package zstd

import (
	"testing"

	"github.com/stretchr/testify/require"
	"github.com/tendermint/tendermint/ethutil/hex"
)

var transactions = [][]byte{
	hex.MustDecodeHex("f8ac820c7d84a0eebb0082d501949e12ad42c4e4d2acfbade01a96446e48e6764b9880b844a9059cbb00000000000000000000000071e415b922dfea87cca82e1a33412ae5f750746300000000000000000000000000000000000000000000000000038d7ea4c68000821617a0086177091aad7d0e292a4abbe54de5ef36b0730c329bb30b00505068ebc2bfeca019cae91f3f9a33574e1fcda8497c0df27f922b11b6a34a27c446811cb77cd163"),
	hex.MustDecodeHex("f8d281e284773594008304777394530000000000000000000000000000000000000286ea31e4079800b8642fcc29fa0000000000000000000000000c178d8d1e6facfc5938ff36d629ff7ebf6a6f970000000000000000000000000000000000000000000000000000ea31e40798000000000000000000000000000000000000000000000000000000000000047773821617a01a6854ce0d0cd5e9a83d373a6b09ff163d462d012726686af8bee9a3c3f68d3fa035a1b70746de540c059684dd4097a0332afe453cd833e52d745765adee071e80"),
	hex.MustDecodeHex("f9010e830812a784773594008301819294b17be239cf3c15b33cb865d4ace5e28aa883440b80b8a456d30bf8000000000000000000000000dd6e11df53ce84811844c4233b0807a2e95c61d80000000000000000000000000000000000000000000000004563918244f400000000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000001a3332343337323839373334373839303133313338353731333538000000000000821618a02ed3c3e996eedf2485f46d285c0fc8680c6a0087f06f059b8e4b73f7f79b6bcaa0077a7142e81a8ed6c5a84462d1ff24cd6a7f5d8f65074145ca9957b38ca51b9d"),
	hex.MustDecodeHex("f9010e830812a884773594008301819294b17be239cf3c15b33cb865d4ace5e28aa883440b80b8a456d30bf80000000000000000000000004e2cb6e329cc6ea1e17abf1a15a2e148f55c1cfb0000000000000000000000000000000000000000000000004563918244f400000000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000001a3332343337323839373334373839303133313338353731333630000000000000821618a0da7efb4c6b883f163955acd343abbf4882c94b102883d86ca613c688bca5e7f9a009a2d23644ed53a403d139d0b986b4bee3738c28a810dc6b4295d82fc54e4825"),
	hex.MustDecodeHex("f8a926847735940082f574947d9f7399951c96c83df20c4839cfcd1e79c9d7f680b8446e553f650000000000000000000000000000000000000000000000004563918244f40000000000000000000000000000dc3f2c5a61053073999548dc3f8372082c4b6a1f8216189f9d5ae2401b6e567243afd59dc44490e6d38cbaefa75aad3fec5d0ba608b9c9a01702d263ccce7bc6661d89147d7a1b31dc7a501868124ccabd01633ac281f657"),
	hex.MustDecodeHex("f9010e83079d78847735940083018192940d763880cc7e54749e4fe3065db53da839a8ef6b80b8a456d30bf8000000000000000000000000245e1f5fd0b30ef3bf1a18f5718621b49ad9fd660000000000000000000000000000000000000000000000004563918244f400000000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000001a3332343337323839373334373839303133313338353731333632000000000000821617a0d6c343f6c301d3220c528923404826369b04c35afb9e6f33a86d766d47086391a00d50ca672f329b5c63da325d77f288dce41e1aa0c2ee381095a282bfbb07139f"),
	hex.MustDecodeHex("f8aa30847735940082e1ec94aebc89aff5ad69d7cf8b85c54d394ad34d9c46bb80b8446e553f65000000000000000000000000000000000000000000000004e1003b28d928000000000000000000000000000044e0c443d145ffce67167550b219ed2728b2f972821617a0aeed20bef6379d2be898920d6d9028bcdc23f39198a655ba33f20202c4483551a07f45d819f57d9a7d92201628739e0d82124e238b7ef52a88cdc5cd94dfc1ea2f"),
	hex.MustDecodeHex("f9010e83079d79847735940083018192940d763880cc7e54749e4fe3065db53da839a8ef6b80b8a456d30bf800000000000000000000000043634f04587cc3617621661444113899e2f5bba40000000000000000000000000000000000000000000000004563918244f400000000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000001a3332343337323839373334373839303133313338353731333634000000000000821617a0f535fd6a8ab7136f7944aaa217a7e253514034e164daa43abcd6f8849b240263a03ebe9adf23f63239a60c5a4b60857b0620e62f8826f2e6564adac9839f1814c4"),
	hex.MustDecodeHex("f905358206b28477359400830474f9949f6e8e1c33fc2aa6ff29b747922e3f8e32911b9d87071afd498d0000b904c4c7cd97480000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000eccaeb7e3928900100c89809db5682a835902900000000000000000000000000000000000000000000000000071afd498d000000000000000000000000000000000000000000000000000000650bb12ba9250600000000000000000000000067297ee4eb097e072b4ab6f1620268061ae8046400000000000000000000000060cba82ddbf4b5ddcd4398cdd05354c6a790c309000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002a0000000000000000000000000000000000000000000000000000000000000032000000000000000000000000000000000000000000000000000000000000001490000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007968156adf895922406523887e5c157623c38db00eccaeb7e3928900100c89809db5682a83590299e12ad42c4e4d2acfbade01a96446e48e6764b98530000000000000000000000000000000000001100000000000000000000000000000000000000000000000000513e24f614378000000000000000000000000000000000000000000000000000071afd498d0000000000000000000000000000000000000000000000000000000000006671399d00eccaeb7e3928900100c89809db5682a83590291a9d3116643841c08afc92c883e800af00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004126638c4498d277a287f07d8836fd0d54aa2048958af0bfe3f82fa31dc35aefc27ffff753faa3d924f4655089d42a772b89b1a1d22838e5e624546addc3d31b8e1b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000010438ed173900000000000000000000000000000000000000000000000000071afd498d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000eccaeb7e3928900100c89809db5682a835902900000000000000000000000000000000000000000000000000000000667113b9000000000000000000000000000000000000000000000000000000000000000200000000000000000000000053000000000000000000000000000000000000110000000000000000000000009e12ad42c4e4d2acfbade01a96446e48e6764b9800000000000000000000000000000000000000000000000000000000821617a0d572c2930049defb041e2900976a31a5b4223f9e81b2bf11a754be95acbb8623a00324cdd6685bd19812ba82cefab7c2cd4d65385b61d6bdb8a017e4ddbf841bcd"),
	hex.MustDecodeHex("f88a08847735940083044dfe9437088ecc92aa376f1535bd42186efc3a92b39e6580a40e7527020000000000000000000000000000000000000000000000000000000000000030821618a0fe81af4d4cad761dba85dd413a78ecfdb6242c05003980b1a3046eb5fdd762b9a0712e23aa0152de5259365299fa992e99d84336e10ce79eeb841e9b5038964877"),
}

func TestCompressDecompress(t *testing.T) {
	var input []byte
	for _, txBz := range transactions {
		input = append(input, txBz...)
	}
	output, err := CompressBatchBytes(input)
	require.NoError(t, err)

	decompressed, err := DecompressBatchBytes(output)
	require.NoError(t, err)
	require.EqualValues(t, input, decompressed)
}
