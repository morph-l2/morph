// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package bindings

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/morph-l2/go-ethereum"
	"github.com/morph-l2/go-ethereum/accounts/abi"
	"github.com/morph-l2/go-ethereum/accounts/abi/bind"
	"github.com/morph-l2/go-ethereum/common"
	"github.com/morph-l2/go-ethereum/core/types"
	"github.com/morph-l2/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// L1LidoGatewayMetaData contains all meta data concerning the L1LidoGateway contract.
var L1LidoGatewayMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l1Token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_l2Token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"DepositAndCallIsNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrorAccountIsZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrorCallerIsNotDepositsDisabler\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrorCallerIsNotDepositsEnabler\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrorCallerIsNotWithdrawalsDisabler\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrorCallerIsNotWithdrawalsEnabler\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrorDepositZeroAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrorDepositsDisabled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrorDepositsEnabled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrorNonZeroMsgValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrorUnsupportedL1Token\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrorUnsupportedL2Token\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrorWithdrawalsDisabled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrorWithdrawalsEnabled\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"l1Token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"l2Token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"DepositERC20\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"disabler\",\"type\":\"address\"}],\"name\":\"DepositsDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enabler\",\"type\":\"address\"}],\"name\":\"DepositsEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"l1Token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"l2Token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"FinalizeWithdrawERC20\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RefundERC20\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"disabler\",\"type\":\"address\"}],\"name\":\"WithdrawalsDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enabler\",\"type\":\"address\"}],\"name\":\"WithdrawalsEnabled\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEPOSITS_DISABLER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEPOSITS_ENABLER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAWALS_DISABLER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAWALS_ENABLER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"counterpart\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_gasLimit\",\"type\":\"uint256\"}],\"name\":\"depositERC20\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_gasLimit\",\"type\":\"uint256\"}],\"name\":\"depositERC20\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_gasLimit\",\"type\":\"uint256\"}],\"name\":\"depositERC20AndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableDeposits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableWithdrawals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableDeposits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableWithdrawals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l1Token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_l2Token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"finalizeWithdrawERC20\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l1Token\",\"type\":\"address\"}],\"name\":\"getL2ERC20Address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_counterpart\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_messenger\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositsEnabler\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_depositsDisabler\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_withdrawalsEnabler\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_withdrawalsDisabler\",\"type\":\"address\"}],\"name\":\"initializeV2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isDepositsEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isWithdrawalsEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l1Token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l2Token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"messenger\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"}],\"name\":\"onDropMessage\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60c060405234801562000010575f80fd5b5060405162003368380380620033688339810160408190526200003391620001dc565b6001600160a01b03808316608081905290821660a0526200009b5760405162461bcd60e51b815260206004820152601460248201527f7a65726f206c31746f6b656e206164647265737300000000000000000000000060448201526064015b60405180910390fd5b6001600160a01b038116620000f35760405162461bcd60e51b815260206004820152601460248201527f7a65726f206c32546f6b656e2061646472657373000000000000000000000000604482015260640162000092565b620000fd62000105565b505062000212565b5f54610100900460ff16156200016e5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840162000092565b5f5460ff90811614620001be575f805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b80516001600160a01b0381168114620001d7575f80fd5b919050565b5f8060408385031215620001ee575f80fd5b620001f983620001c0565b91506200020960208401620001c0565b90509250929050565b60805160a0516130fc6200026c5f395f818161027b015281816110880152818161155a015281816117030152611ad401525f818161047c0152818161101c015281816113cb015281816117dc0152611a6801526130fc5ff3fe6080604052600436106101d0575f3560e01c80639010d07c116100fd578063d547741f11610092578063f27ebced11610062578063f27ebced14610574578063f2fde38b14610593578063f887ea40146105b2578063fadcc54a146105d1575f80fd5b8063d547741f146104fb578063e3b523e31461051a578063e8bac93b1461054d578063f219fa6614610561575f80fd5b8063c01e1bd6116100cd578063c01e1bd61461046b578063c0c53b8b1461049e578063c676ad29146104bd578063ca15c873146104dc575f80fd5b80639010d07c1461040557806391d1485414610424578063ac67e1af14610443578063ad960ce114610457575f80fd5b80635e4c57a411610173578063797594b011610143578063797594b01461038357806384bd13b0146103a25780638d7601c0146103b55780638da5cb5b146103e8575f80fd5b80635e4c57a4146102df5780635ed2c220146102f35780636f18bd221461032e578063715018a61461036f575f80fd5b80632f2ff15d116101ae5780632f2ff15d1461020f5780633cb747bf1461022e57806356eff2671461026a5780635777bf501461029d575f80fd5b80630aea8c26146101d457806314298c51146101e957806321425ee0146101fc575b5f80fd5b6101e76101e23660046129e2565b610604565b005b6101e76101f7366004612a96565b610618565b6101e761020a366004612ad5565b61089d565b34801561021a575f80fd5b506101e7610229366004612b07565b6108d6565b348015610239575f80fd5b5060995461024d906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b348015610275575f80fd5b5061024d7f000000000000000000000000000000000000000000000000000000000000000081565b3480156102a8575f80fd5b507fe20dc80161c3a3e412098d054775959b6cab7cf9e3d46b04fee5a64d0898f0ec5460ff165b6040519015158152602001610261565b3480156102ea575f80fd5b506101e76108ec565b3480156102fe575f80fd5b507fe20dc80161c3a3e412098d054775959b6cab7cf9e3d46b04fee5a64d0898f0ec54610100900460ff166102cf565b348015610339575f80fd5b506103617f63f736f21cb2943826cd50b191eb054ebbea670e4e962d0527611f830cd399d681565b604051908152602001610261565b34801561037a575f80fd5b506101e7610a1e565b34801561038e575f80fd5b5060975461024d906001600160a01b031681565b6101e76103b0366004612b35565b610a31565b3480156103c0575f80fd5b506103617f94a954c0bc99227eddbc0715a62a7e1056ed8784cd719c2303b685683908857c81565b3480156103f3575f80fd5b506065546001600160a01b031661024d565b348015610410575f80fd5b5061024d61041f366004612bc7565b610c21565b34801561042f575f80fd5b506102cf61043e366004612b07565b610c60565b34801561044e575f80fd5b506101e7610c96565b348015610462575f80fd5b506101e7610dc4565b348015610476575f80fd5b5061024d7f000000000000000000000000000000000000000000000000000000000000000081565b3480156104a9575f80fd5b506101e76104b8366004612be7565b610eda565b3480156104c8575f80fd5b5061024d6104d7366004612c2f565b611018565b3480156104e7575f80fd5b506103616104f6366004612c51565b6110ad565b348015610506575f80fd5b506101e7610515366004612b07565b6110e2565b348015610525575f80fd5b506103617f9ab8816a3dc0b3849ec1ac00483f6ec815b07eee2fd766a353311c823ad59d0d81565b348015610558575f80fd5b506101e76110f4565b6101e761056f366004612c68565b61120f565b34801561057f575f80fd5b506101e761058e366004612cab565b61121b565b34801561059e575f80fd5b506101e76105ad366004612c2f565b611330565b3480156105bd575f80fd5b5060985461024d906001600160a01b031681565b3480156105dc575f80fd5b506103617f4b43b36766bde12c5e9cbbc37d15f8d1f769f08f54720ab370faeb4ce893753a81565b61061185858585856113c0565b5050505050565b6099546001600160a01b03163381146106785760405162461bcd60e51b815260206004820152601760248201527f6f6e6c79206d657373656e6765722063616e2063616c6c00000000000000000060448201526064015b60405180910390fd5b806001600160a01b0316636e296e456040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106b4573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906106d89190612d04565b6001600160a01b0316736f297c61b5c92ef107ffd30cd56affe5a273e8416001600160a01b03161461074c5760405162461bcd60e51b815260206004820152601b60248201527f6f6e6c792063616c6c656420696e2064726f7020636f6e746578740000000000604482015260640161066f565b610754611780565b7f8431f5c10000000000000000000000000000000000000000000000000000000061078260045f8587612d1f565b61078b91612d46565b7fffffffff0000000000000000000000000000000000000000000000000000000016146107fa5760405162461bcd60e51b815260206004820152601060248201527f696e76616c69642073656c6563746f7200000000000000000000000000000000604482015260640161066f565b5f808061080a8560048189612d1f565b8101906108179190612d8e565b50945050935050925061082b8383836117d9565b61083f6001600160a01b038416838361187d565b816001600160a01b0316836001600160a01b03167fdbdf8eb487847e4c0f22847f5dac07f2d3690f96f581a6ae4b102769917645a88360405161088491815260200190565b60405180910390a350505061089860018055565b505050565b6108988333845f5b6040519080825280601f01601f1916602001820160405280156108cf576020820181803683370190505b50856113c0565b6108de61192c565b6108e88282611986565b5050565b7fe20dc80161c3a3e412098d054775959b6cab7cf9e3d46b04fee5a64d0898f0ec5460ff1615610948576040517f4f2c8be200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6109727f4b43b36766bde12c5e9cbbc37d15f8d1f769f08f54720ab370faeb4ce893753a33610c60565b6109a8576040517f3d39c5f500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7fe20dc80161c3a3e412098d054775959b6cab7cf9e3d46b04fee5a64d0898f0ec80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905560405133907fc36a428b063177e3f28b3b5d340c08f77827847b2ee30114ccf0c40e519c420a905f90a2565b610a2661192c565b610a2f5f6119fc565b565b6099546001600160a01b0316338114610a8c5760405162461bcd60e51b815260206004820152601760248201527f6f6e6c79206d657373656e6765722063616e2063616c6c000000000000000000604482015260640161066f565b806001600160a01b0316636e296e456040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ac8573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610aec9190612d04565b6097546001600160a01b03908116911614610b495760405162461bcd60e51b815260206004820152601860248201527f6f6e6c792063616c6c20627920636f756e746572706172740000000000000000604482015260640161066f565b610b51611780565b610b6088888888888888611a65565b610b746001600160a01b038916868661187d565b610bb38584848080601f0160208091040260200160405190810160405280939291908181526020018383808284375f92019190915250611be092505050565b856001600160a01b0316876001600160a01b0316896001600160a01b03167fc6f985873b37805705f6bce756dce3d1ff4b603e298d506288cce499926846a788888888604051610c069493929190612e19565b60405180910390a4610c1760018055565b5050505050505050565b5f8281527fe20dc80161c3a3e412098d054775959b6cab7cf9e3d46b04fee5a64d0898f0ed60205260408120610c579083611c74565b90505b92915050565b5f8281527fe20dc80161c3a3e412098d054775959b6cab7cf9e3d46b04fee5a64d0898f0ed60205260408120610c579083611c7f565b7fe20dc80161c3a3e412098d054775959b6cab7cf9e3d46b04fee5a64d0898f0ec5460ff16610cf1576040517fa185a6b200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610d1b7f63f736f21cb2943826cd50b191eb054ebbea670e4e962d0527611f830cd399d633610c60565b610d51576040517fadd9524c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7fe20dc80161c3a3e412098d054775959b6cab7cf9e3d46b04fee5a64d0898f0ec80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905560405133907f9ca4d309bbfd23c65db3dc38c1712862f5812c7139937e2655de86e803f73bb9905f90a2565b7fe20dc80161c3a3e412098d054775959b6cab7cf9e3d46b04fee5a64d0898f0ec54610100900460ff16610e24576040517f77d195b200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610e4e7f94a954c0bc99227eddbc0715a62a7e1056ed8784cd719c2303b685683908857c33610c60565b610e84576040517f9e60ca7e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7fe20dc80161c3a3e412098d054775959b6cab7cf9e3d46b04fee5a64d0898f0ec805461ff001916905560405133907f644eeba8ede48fefc32ada09fb240c5f6c0f06507ab1d296d5af41f1521d9fcb905f90a2565b5f54610100900460ff1615808015610ef857505f54600160ff909116105b80610f115750303b158015610f1157505f5460ff166001145b610f835760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a6564000000000000000000000000000000000000606482015260840161066f565b5f80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790558015610fc2575f805461ff0019166101001790555b610fcd848484611ca0565b8015611012575f805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b5f817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031614611085576040517ffe15603f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b507f000000000000000000000000000000000000000000000000000000000000000092915050565b5f8181527fe20dc80161c3a3e412098d054775959b6cab7cf9e3d46b04fee5a64d0898f0ed60205260408120610c5a90611de3565b6110ea61192c565b6108e88282611dec565b7fe20dc80161c3a3e412098d054775959b6cab7cf9e3d46b04fee5a64d0898f0ec54610100900460ff1615611155576040517ff74ad25400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61117f7f9ab8816a3dc0b3849ec1ac00483f6ec815b07eee2fd766a353311c823ad59d0d33610c60565b6111b5576040517f5c16894300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7fe20dc80161c3a3e412098d054775959b6cab7cf9e3d46b04fee5a64d0898f0ec805461ff00191661010017905560405133907fb2ed3603bd9051f0182ebfb75f12a21059b4d31b578a2a05c8d0245e9e2d3204905f90a2565b6110128484845f6108a5565b5f54600290610100900460ff1615801561123b57505f5460ff8083169116105b6112ad5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a6564000000000000000000000000000000000000606482015260840161066f565b5f80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00001660ff8316176101001790556112e985858585611e62565b5f805461ff001916905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050505050565b61133861192c565b6001600160a01b0381166113b45760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161066f565b6113bd816119fc565b50565b6113c8611780565b847f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031614611434576040517ffe15603f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b846001600160a01b038116611475576040517fef6b416200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7fe20dc80161c3a3e412098d054775959b6cab7cf9e3d46b04fee5a64d0898f0ec5460ff166114d0576040517fa185a6b200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b845f03611509576040517f14fc8bd900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f611515888787612043565b8051919850965090915015611556576040517fb286dd6800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f887f0000000000000000000000000000000000000000000000000000000000000000838a8a8a60405160240161159296959493929190612eab565b60408051601f19818403018152918152602080830180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f8431f5c10000000000000000000000000000000000000000000000000000000017905260995482517fecc7042800000000000000000000000000000000000000000000000000000000815292519394505f936001600160a01b039091169263ecc704289260048083019391928290030181865afa15801561164b573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061166f9190612ef8565b6099546097546040517f5f7b15770000000000000000000000000000000000000000000000000000000081529293506001600160a01b0391821692635f7b15779234926116c9929116905f9088908d908b90600401612f0f565b5f604051808303818588803b1580156116e0575f80fd5b505af11580156116f2573d5f803e3d5ffd5b5050505050826001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168b6001600160a01b03167f1a6c38816de45937fd5cd974f9694fe10e64163ba12a92abf0f4b6b23ad886728c8c8c8760405161176a9493929190612f51565b60405180910390a4505050505061061160018055565b6002600154036117d25760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161066f565b6002600155565b827f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031614611845576040517ffe15603f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3415611012576040517f3ddcf11400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040516001600160a01b0383166024820152604481018290526108989084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152612299565b60018055565b6065546001600160a01b03163314610a2f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161066f565b5f8281527fe20dc80161c3a3e412098d054775959b6cab7cf9e3d46b04fee5a64d0898f0ed602052604090206119bc908261237f565b156108e85760405133906001600160a01b0383169084907f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d905f90a45050565b606580546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35050565b867f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031614611ad1576040517ffe15603f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b867f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031614611b3d576040517f6251ce6800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7fe20dc80161c3a3e412098d054775959b6cab7cf9e3d46b04fee5a64d0898f0ec54610100900460ff16611b9d576040517f77d195b200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3415611bd5576040517f3ddcf11400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050505050505050565b5f8151118015611bf957505f826001600160a01b03163b115b156108e8576040517f444b281f0000000000000000000000000000000000000000000000000000000081526001600160a01b0383169063444b281f90611c43908490600401612f89565b5f604051808303815f87803b158015611c5a575f80fd5b505af1158015611c6c573d5f803e3d5ffd5b505050505050565b5f610c578383612393565b6001600160a01b0381165f9081526001830160205260408120541515610c57565b6001600160a01b038316611cf65760405162461bcd60e51b815260206004820152601860248201527f7a65726f20636f756e7465727061727420616464726573730000000000000000604482015260640161066f565b6001600160a01b038116611d4c5760405162461bcd60e51b815260206004820152601660248201527f7a65726f206d657373656e676572206164647265737300000000000000000000604482015260640161066f565b611d546123b9565b611d5c61243d565b609780546001600160a01b038086167fffffffffffffffffffffffff00000000000000000000000000000000000000009283161790925560998054848416921691909117905582161561089857609880546001600160a01b0384167fffffffffffffffffffffffff0000000000000000000000000000000000000000909116179055505050565b5f610c5a825490565b5f8281527fe20dc80161c3a3e412098d054775959b6cab7cf9e3d46b04fee5a64d0898f0ed60205260409020611e2290826124c1565b156108e85760405133906001600160a01b0383169084907ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b905f90a45050565b5f54610100900460ff16611ede5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161066f565b7fe20dc80161c3a3e412098d054775959b6cab7cf9e3d46b04fee5a64d0898f0ec80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117815560405133907fc36a428b063177e3f28b3b5d340c08f77827847b2ee30114ccf0c40e519c420a905f90a2805461ff001916610100178155611f663390565b6001600160a01b03167fb2ed3603bd9051f0182ebfb75f12a21059b4d31b578a2a05c8d0245e9e2d320460405160405180910390a2611fc57f4b43b36766bde12c5e9cbbc37d15f8d1f769f08f54720ab370faeb4ce893753a86611986565b611fef7f63f736f21cb2943826cd50b191eb054ebbea670e4e962d0527611f830cd399d685611986565b6120197f9ab8816a3dc0b3849ec1ac00483f6ec815b07eee2fd766a353311c823ad59d0d84611986565b6106117f94a954c0bc99227eddbc0715a62a7e1056ed8784cd719c2303b685683908857c83611986565b6098545f908190606090339081906001600160a01b031681900361211357858060200190518101906120759190612f9b565b6040517fc52a3bbc0000000000000000000000000000000000000000000000000000000081526001600160a01b0380841660048301528b81166024830152604482018b905291985091925083169063c52a3bbc906064016020604051808303815f875af11580156120e8573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061210c9190612ef8565b965061223d565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201525f906001600160a01b038a16906370a0823190602401602060405180830381865afa158015612170573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906121949190612ef8565b90506121ab6001600160a01b038a1683308b6124d5565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201525f906001600160a01b038b16906370a0823190602401602060405180830381865afa158015612208573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061222c9190612ef8565b90506122388282613023565b985050505b5f871161228c5760405162461bcd60e51b815260206004820152601360248201527f6465706f736974207a65726f20616d6f756e7400000000000000000000000000604482015260640161066f565b9795965093949350505050565b5f6122ed826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166125269092919063ffffffff16565b905080515f148061230d57508080602001905181019061230d919061305b565b6108985760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161066f565b5f610c57836001600160a01b03841661253c565b5f825f0182815481106123a8576123a861307a565b905f5260205f200154905092915050565b5f54610100900460ff166124355760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161066f565b610a2f612588565b5f54610100900460ff166124b95760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161066f565b610a2f612604565b5f610c57836001600160a01b038416612689565b6040516001600160a01b03808516602483015283166044820152606481018290526110129085907f23b872dd00000000000000000000000000000000000000000000000000000000906084016118c2565b606061253484845f8561276c565b949350505050565b5f81815260018301602052604081205461258157508154600181810184555f848152602080822090930184905584548482528286019093526040902091909155610c5a565b505f610c5a565b5f54610100900460ff166119265760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161066f565b5f54610100900460ff166126805760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161066f565b610a2f336119fc565b5f8181526001830160205260408120548015612763575f6126ab600183613023565b85549091505f906126be90600190613023565b905081811461271d575f865f0182815481106126dc576126dc61307a565b905f5260205f200154905080875f0184815481106126fc576126fc61307a565b5f918252602080832090910192909255918252600188019052604090208390555b855486908061272e5761272e6130a7565b600190038181905f5260205f20015f90559055856001015f8681526020019081526020015f205f905560019350505050610c5a565b5f915050610c5a565b6060824710156127e45760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c0000000000000000000000000000000000000000000000000000606482015260840161066f565b5f80866001600160a01b031685876040516127ff91906130d4565b5f6040518083038185875af1925050503d805f8114612839576040519150601f19603f3d011682016040523d82523d5f602084013e61283e565b606091505b509150915061284f8783838761285a565b979650505050505050565b606083156128c85782515f036128c1576001600160a01b0385163b6128c15760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161066f565b5081612534565b61253483838151156128dd5781518083602001fd5b8060405162461bcd60e51b815260040161066f9190612f89565b6001600160a01b03811681146113bd575f80fd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b604051601f8201601f1916810167ffffffffffffffff811182821017156129615761296161290b565b604052919050565b5f67ffffffffffffffff8211156129825761298261290b565b50601f01601f191660200190565b5f82601f83011261299f575f80fd5b81356129b26129ad82612969565b612938565b8181528460208386010111156129c6575f80fd5b816020850160208301375f918101602001919091529392505050565b5f805f805f60a086880312156129f6575f80fd5b8535612a01816128f7565b94506020860135612a11816128f7565b935060408601359250606086013567ffffffffffffffff811115612a33575f80fd5b612a3f88828901612990565b95989497509295608001359392505050565b5f8083601f840112612a61575f80fd5b50813567ffffffffffffffff811115612a78575f80fd5b602083019150836020828501011115612a8f575f80fd5b9250929050565b5f8060208385031215612aa7575f80fd5b823567ffffffffffffffff811115612abd575f80fd5b612ac985828601612a51565b90969095509350505050565b5f805f60608486031215612ae7575f80fd5b8335612af2816128f7565b95602085013595506040909401359392505050565b5f8060408385031215612b18575f80fd5b823591506020830135612b2a816128f7565b809150509250929050565b5f805f805f805f60c0888a031215612b4b575f80fd5b8735612b56816128f7565b96506020880135612b66816128f7565b95506040880135612b76816128f7565b94506060880135612b86816128f7565b93506080880135925060a088013567ffffffffffffffff811115612ba8575f80fd5b612bb48a828b01612a51565b989b979a50959850939692959293505050565b5f8060408385031215612bd8575f80fd5b50508035926020909101359150565b5f805f60608486031215612bf9575f80fd5b8335612c04816128f7565b92506020840135612c14816128f7565b91506040840135612c24816128f7565b809150509250925092565b5f60208284031215612c3f575f80fd5b8135612c4a816128f7565b9392505050565b5f60208284031215612c61575f80fd5b5035919050565b5f805f8060808587031215612c7b575f80fd5b8435612c86816128f7565b93506020850135612c96816128f7565b93969395505050506040820135916060013590565b5f805f8060808587031215612cbe575f80fd5b8435612cc9816128f7565b93506020850135612cd9816128f7565b92506040850135612ce9816128f7565b91506060850135612cf9816128f7565b939692955090935050565b5f60208284031215612d14575f80fd5b8151612c4a816128f7565b5f8085851115612d2d575f80fd5b83861115612d39575f80fd5b5050820193919092039150565b7fffffffff000000000000000000000000000000000000000000000000000000008135818116916004851015612d865780818660040360031b1b83161692505b505092915050565b5f805f805f8060c08789031215612da3575f80fd5b8635612dae816128f7565b95506020870135612dbe816128f7565b94506040870135612dce816128f7565b93506060870135612dde816128f7565b92506080870135915060a087013567ffffffffffffffff811115612e00575f80fd5b612e0c89828a01612990565b9150509295509295509295565b6001600160a01b038516815283602082015260606040820152816060820152818360808301375f818301608090810191909152601f909201601f191601019392505050565b5f5b83811015612e78578181015183820152602001612e60565b50505f910152565b5f8151808452612e97816020860160208601612e5e565b601f01601f19169290920160200192915050565b5f6001600160a01b0380891683528088166020840152808716604084015280861660608401525083608083015260c060a0830152612eec60c0830184612e80565b98975050505050505050565b5f60208284031215612f08575f80fd5b5051919050565b5f6001600160a01b03808816835286602084015260a06040840152612f3760a0840187612e80565b606084019590955292909216608090910152509392505050565b6001600160a01b0385168152836020820152608060408201525f612f786080830185612e80565b905082606083015295945050505050565b602081525f610c576020830184612e80565b5f8060408385031215612fac575f80fd5b8251612fb7816128f7565b602084015190925067ffffffffffffffff811115612fd3575f80fd5b8301601f81018513612fe3575f80fd5b8051612ff16129ad82612969565b818152866020838501011115613005575f80fd5b613016826020830160208601612e5e565b8093505050509250929050565b81810381811115610c5a577f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f6020828403121561306b575f80fd5b81518015158114612c4a575f80fd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603160045260245ffd5b5f82516130e5818460208701612e5e565b919091019291505056fea164736f6c6343000818000a",
}

// L1LidoGatewayABI is the input ABI used to generate the binding from.
// Deprecated: Use L1LidoGatewayMetaData.ABI instead.
var L1LidoGatewayABI = L1LidoGatewayMetaData.ABI

// L1LidoGatewayBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use L1LidoGatewayMetaData.Bin instead.
var L1LidoGatewayBin = L1LidoGatewayMetaData.Bin

// DeployL1LidoGateway deploys a new Ethereum contract, binding an instance of L1LidoGateway to it.
func DeployL1LidoGateway(auth *bind.TransactOpts, backend bind.ContractBackend, _l1Token common.Address, _l2Token common.Address) (common.Address, *types.Transaction, *L1LidoGateway, error) {
	parsed, err := L1LidoGatewayMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(L1LidoGatewayBin), backend, _l1Token, _l2Token)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &L1LidoGateway{L1LidoGatewayCaller: L1LidoGatewayCaller{contract: contract}, L1LidoGatewayTransactor: L1LidoGatewayTransactor{contract: contract}, L1LidoGatewayFilterer: L1LidoGatewayFilterer{contract: contract}}, nil
}

// L1LidoGateway is an auto generated Go binding around an Ethereum contract.
type L1LidoGateway struct {
	L1LidoGatewayCaller     // Read-only binding to the contract
	L1LidoGatewayTransactor // Write-only binding to the contract
	L1LidoGatewayFilterer   // Log filterer for contract events
}

// L1LidoGatewayCaller is an auto generated read-only Go binding around an Ethereum contract.
type L1LidoGatewayCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// L1LidoGatewayTransactor is an auto generated write-only Go binding around an Ethereum contract.
type L1LidoGatewayTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// L1LidoGatewayFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type L1LidoGatewayFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// L1LidoGatewaySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type L1LidoGatewaySession struct {
	Contract     *L1LidoGateway    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// L1LidoGatewayCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type L1LidoGatewayCallerSession struct {
	Contract *L1LidoGatewayCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// L1LidoGatewayTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type L1LidoGatewayTransactorSession struct {
	Contract     *L1LidoGatewayTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// L1LidoGatewayRaw is an auto generated low-level Go binding around an Ethereum contract.
type L1LidoGatewayRaw struct {
	Contract *L1LidoGateway // Generic contract binding to access the raw methods on
}

// L1LidoGatewayCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type L1LidoGatewayCallerRaw struct {
	Contract *L1LidoGatewayCaller // Generic read-only contract binding to access the raw methods on
}

// L1LidoGatewayTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type L1LidoGatewayTransactorRaw struct {
	Contract *L1LidoGatewayTransactor // Generic write-only contract binding to access the raw methods on
}

// NewL1LidoGateway creates a new instance of L1LidoGateway, bound to a specific deployed contract.
func NewL1LidoGateway(address common.Address, backend bind.ContractBackend) (*L1LidoGateway, error) {
	contract, err := bindL1LidoGateway(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &L1LidoGateway{L1LidoGatewayCaller: L1LidoGatewayCaller{contract: contract}, L1LidoGatewayTransactor: L1LidoGatewayTransactor{contract: contract}, L1LidoGatewayFilterer: L1LidoGatewayFilterer{contract: contract}}, nil
}

// NewL1LidoGatewayCaller creates a new read-only instance of L1LidoGateway, bound to a specific deployed contract.
func NewL1LidoGatewayCaller(address common.Address, caller bind.ContractCaller) (*L1LidoGatewayCaller, error) {
	contract, err := bindL1LidoGateway(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &L1LidoGatewayCaller{contract: contract}, nil
}

// NewL1LidoGatewayTransactor creates a new write-only instance of L1LidoGateway, bound to a specific deployed contract.
func NewL1LidoGatewayTransactor(address common.Address, transactor bind.ContractTransactor) (*L1LidoGatewayTransactor, error) {
	contract, err := bindL1LidoGateway(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &L1LidoGatewayTransactor{contract: contract}, nil
}

// NewL1LidoGatewayFilterer creates a new log filterer instance of L1LidoGateway, bound to a specific deployed contract.
func NewL1LidoGatewayFilterer(address common.Address, filterer bind.ContractFilterer) (*L1LidoGatewayFilterer, error) {
	contract, err := bindL1LidoGateway(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &L1LidoGatewayFilterer{contract: contract}, nil
}

// bindL1LidoGateway binds a generic wrapper to an already deployed contract.
func bindL1LidoGateway(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := L1LidoGatewayMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_L1LidoGateway *L1LidoGatewayRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _L1LidoGateway.Contract.L1LidoGatewayCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_L1LidoGateway *L1LidoGatewayRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _L1LidoGateway.Contract.L1LidoGatewayTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_L1LidoGateway *L1LidoGatewayRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _L1LidoGateway.Contract.L1LidoGatewayTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_L1LidoGateway *L1LidoGatewayCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _L1LidoGateway.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_L1LidoGateway *L1LidoGatewayTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _L1LidoGateway.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_L1LidoGateway *L1LidoGatewayTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _L1LidoGateway.Contract.contract.Transact(opts, method, params...)
}

// DEPOSITSDISABLERROLE is a free data retrieval call binding the contract method 0x6f18bd22.
//
// Solidity: function DEPOSITS_DISABLER_ROLE() view returns(bytes32)
func (_L1LidoGateway *L1LidoGatewayCaller) DEPOSITSDISABLERROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _L1LidoGateway.contract.Call(opts, &out, "DEPOSITS_DISABLER_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DEPOSITSDISABLERROLE is a free data retrieval call binding the contract method 0x6f18bd22.
//
// Solidity: function DEPOSITS_DISABLER_ROLE() view returns(bytes32)
func (_L1LidoGateway *L1LidoGatewaySession) DEPOSITSDISABLERROLE() ([32]byte, error) {
	return _L1LidoGateway.Contract.DEPOSITSDISABLERROLE(&_L1LidoGateway.CallOpts)
}

// DEPOSITSDISABLERROLE is a free data retrieval call binding the contract method 0x6f18bd22.
//
// Solidity: function DEPOSITS_DISABLER_ROLE() view returns(bytes32)
func (_L1LidoGateway *L1LidoGatewayCallerSession) DEPOSITSDISABLERROLE() ([32]byte, error) {
	return _L1LidoGateway.Contract.DEPOSITSDISABLERROLE(&_L1LidoGateway.CallOpts)
}

// DEPOSITSENABLERROLE is a free data retrieval call binding the contract method 0xfadcc54a.
//
// Solidity: function DEPOSITS_ENABLER_ROLE() view returns(bytes32)
func (_L1LidoGateway *L1LidoGatewayCaller) DEPOSITSENABLERROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _L1LidoGateway.contract.Call(opts, &out, "DEPOSITS_ENABLER_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DEPOSITSENABLERROLE is a free data retrieval call binding the contract method 0xfadcc54a.
//
// Solidity: function DEPOSITS_ENABLER_ROLE() view returns(bytes32)
func (_L1LidoGateway *L1LidoGatewaySession) DEPOSITSENABLERROLE() ([32]byte, error) {
	return _L1LidoGateway.Contract.DEPOSITSENABLERROLE(&_L1LidoGateway.CallOpts)
}

// DEPOSITSENABLERROLE is a free data retrieval call binding the contract method 0xfadcc54a.
//
// Solidity: function DEPOSITS_ENABLER_ROLE() view returns(bytes32)
func (_L1LidoGateway *L1LidoGatewayCallerSession) DEPOSITSENABLERROLE() ([32]byte, error) {
	return _L1LidoGateway.Contract.DEPOSITSENABLERROLE(&_L1LidoGateway.CallOpts)
}

// WITHDRAWALSDISABLERROLE is a free data retrieval call binding the contract method 0x8d7601c0.
//
// Solidity: function WITHDRAWALS_DISABLER_ROLE() view returns(bytes32)
func (_L1LidoGateway *L1LidoGatewayCaller) WITHDRAWALSDISABLERROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _L1LidoGateway.contract.Call(opts, &out, "WITHDRAWALS_DISABLER_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// WITHDRAWALSDISABLERROLE is a free data retrieval call binding the contract method 0x8d7601c0.
//
// Solidity: function WITHDRAWALS_DISABLER_ROLE() view returns(bytes32)
func (_L1LidoGateway *L1LidoGatewaySession) WITHDRAWALSDISABLERROLE() ([32]byte, error) {
	return _L1LidoGateway.Contract.WITHDRAWALSDISABLERROLE(&_L1LidoGateway.CallOpts)
}

// WITHDRAWALSDISABLERROLE is a free data retrieval call binding the contract method 0x8d7601c0.
//
// Solidity: function WITHDRAWALS_DISABLER_ROLE() view returns(bytes32)
func (_L1LidoGateway *L1LidoGatewayCallerSession) WITHDRAWALSDISABLERROLE() ([32]byte, error) {
	return _L1LidoGateway.Contract.WITHDRAWALSDISABLERROLE(&_L1LidoGateway.CallOpts)
}

// WITHDRAWALSENABLERROLE is a free data retrieval call binding the contract method 0xe3b523e3.
//
// Solidity: function WITHDRAWALS_ENABLER_ROLE() view returns(bytes32)
func (_L1LidoGateway *L1LidoGatewayCaller) WITHDRAWALSENABLERROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _L1LidoGateway.contract.Call(opts, &out, "WITHDRAWALS_ENABLER_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// WITHDRAWALSENABLERROLE is a free data retrieval call binding the contract method 0xe3b523e3.
//
// Solidity: function WITHDRAWALS_ENABLER_ROLE() view returns(bytes32)
func (_L1LidoGateway *L1LidoGatewaySession) WITHDRAWALSENABLERROLE() ([32]byte, error) {
	return _L1LidoGateway.Contract.WITHDRAWALSENABLERROLE(&_L1LidoGateway.CallOpts)
}

// WITHDRAWALSENABLERROLE is a free data retrieval call binding the contract method 0xe3b523e3.
//
// Solidity: function WITHDRAWALS_ENABLER_ROLE() view returns(bytes32)
func (_L1LidoGateway *L1LidoGatewayCallerSession) WITHDRAWALSENABLERROLE() ([32]byte, error) {
	return _L1LidoGateway.Contract.WITHDRAWALSENABLERROLE(&_L1LidoGateway.CallOpts)
}

// Counterpart is a free data retrieval call binding the contract method 0x797594b0.
//
// Solidity: function counterpart() view returns(address)
func (_L1LidoGateway *L1LidoGatewayCaller) Counterpart(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _L1LidoGateway.contract.Call(opts, &out, "counterpart")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Counterpart is a free data retrieval call binding the contract method 0x797594b0.
//
// Solidity: function counterpart() view returns(address)
func (_L1LidoGateway *L1LidoGatewaySession) Counterpart() (common.Address, error) {
	return _L1LidoGateway.Contract.Counterpart(&_L1LidoGateway.CallOpts)
}

// Counterpart is a free data retrieval call binding the contract method 0x797594b0.
//
// Solidity: function counterpart() view returns(address)
func (_L1LidoGateway *L1LidoGatewayCallerSession) Counterpart() (common.Address, error) {
	return _L1LidoGateway.Contract.Counterpart(&_L1LidoGateway.CallOpts)
}

// GetL2ERC20Address is a free data retrieval call binding the contract method 0xc676ad29.
//
// Solidity: function getL2ERC20Address(address _l1Token) view returns(address)
func (_L1LidoGateway *L1LidoGatewayCaller) GetL2ERC20Address(opts *bind.CallOpts, _l1Token common.Address) (common.Address, error) {
	var out []interface{}
	err := _L1LidoGateway.contract.Call(opts, &out, "getL2ERC20Address", _l1Token)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetL2ERC20Address is a free data retrieval call binding the contract method 0xc676ad29.
//
// Solidity: function getL2ERC20Address(address _l1Token) view returns(address)
func (_L1LidoGateway *L1LidoGatewaySession) GetL2ERC20Address(_l1Token common.Address) (common.Address, error) {
	return _L1LidoGateway.Contract.GetL2ERC20Address(&_L1LidoGateway.CallOpts, _l1Token)
}

// GetL2ERC20Address is a free data retrieval call binding the contract method 0xc676ad29.
//
// Solidity: function getL2ERC20Address(address _l1Token) view returns(address)
func (_L1LidoGateway *L1LidoGatewayCallerSession) GetL2ERC20Address(_l1Token common.Address) (common.Address, error) {
	return _L1LidoGateway.Contract.GetL2ERC20Address(&_L1LidoGateway.CallOpts, _l1Token)
}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 _role, uint256 _index) view returns(address)
func (_L1LidoGateway *L1LidoGatewayCaller) GetRoleMember(opts *bind.CallOpts, _role [32]byte, _index *big.Int) (common.Address, error) {
	var out []interface{}
	err := _L1LidoGateway.contract.Call(opts, &out, "getRoleMember", _role, _index)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 _role, uint256 _index) view returns(address)
func (_L1LidoGateway *L1LidoGatewaySession) GetRoleMember(_role [32]byte, _index *big.Int) (common.Address, error) {
	return _L1LidoGateway.Contract.GetRoleMember(&_L1LidoGateway.CallOpts, _role, _index)
}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 _role, uint256 _index) view returns(address)
func (_L1LidoGateway *L1LidoGatewayCallerSession) GetRoleMember(_role [32]byte, _index *big.Int) (common.Address, error) {
	return _L1LidoGateway.Contract.GetRoleMember(&_L1LidoGateway.CallOpts, _role, _index)
}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 _role) view returns(uint256)
func (_L1LidoGateway *L1LidoGatewayCaller) GetRoleMemberCount(opts *bind.CallOpts, _role [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _L1LidoGateway.contract.Call(opts, &out, "getRoleMemberCount", _role)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 _role) view returns(uint256)
func (_L1LidoGateway *L1LidoGatewaySession) GetRoleMemberCount(_role [32]byte) (*big.Int, error) {
	return _L1LidoGateway.Contract.GetRoleMemberCount(&_L1LidoGateway.CallOpts, _role)
}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 _role) view returns(uint256)
func (_L1LidoGateway *L1LidoGatewayCallerSession) GetRoleMemberCount(_role [32]byte) (*big.Int, error) {
	return _L1LidoGateway.Contract.GetRoleMemberCount(&_L1LidoGateway.CallOpts, _role)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 _role, address _account) view returns(bool)
func (_L1LidoGateway *L1LidoGatewayCaller) HasRole(opts *bind.CallOpts, _role [32]byte, _account common.Address) (bool, error) {
	var out []interface{}
	err := _L1LidoGateway.contract.Call(opts, &out, "hasRole", _role, _account)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 _role, address _account) view returns(bool)
func (_L1LidoGateway *L1LidoGatewaySession) HasRole(_role [32]byte, _account common.Address) (bool, error) {
	return _L1LidoGateway.Contract.HasRole(&_L1LidoGateway.CallOpts, _role, _account)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 _role, address _account) view returns(bool)
func (_L1LidoGateway *L1LidoGatewayCallerSession) HasRole(_role [32]byte, _account common.Address) (bool, error) {
	return _L1LidoGateway.Contract.HasRole(&_L1LidoGateway.CallOpts, _role, _account)
}

// IsDepositsEnabled is a free data retrieval call binding the contract method 0x5777bf50.
//
// Solidity: function isDepositsEnabled() view returns(bool)
func (_L1LidoGateway *L1LidoGatewayCaller) IsDepositsEnabled(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _L1LidoGateway.contract.Call(opts, &out, "isDepositsEnabled")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsDepositsEnabled is a free data retrieval call binding the contract method 0x5777bf50.
//
// Solidity: function isDepositsEnabled() view returns(bool)
func (_L1LidoGateway *L1LidoGatewaySession) IsDepositsEnabled() (bool, error) {
	return _L1LidoGateway.Contract.IsDepositsEnabled(&_L1LidoGateway.CallOpts)
}

// IsDepositsEnabled is a free data retrieval call binding the contract method 0x5777bf50.
//
// Solidity: function isDepositsEnabled() view returns(bool)
func (_L1LidoGateway *L1LidoGatewayCallerSession) IsDepositsEnabled() (bool, error) {
	return _L1LidoGateway.Contract.IsDepositsEnabled(&_L1LidoGateway.CallOpts)
}

// IsWithdrawalsEnabled is a free data retrieval call binding the contract method 0x5ed2c220.
//
// Solidity: function isWithdrawalsEnabled() view returns(bool)
func (_L1LidoGateway *L1LidoGatewayCaller) IsWithdrawalsEnabled(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _L1LidoGateway.contract.Call(opts, &out, "isWithdrawalsEnabled")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsWithdrawalsEnabled is a free data retrieval call binding the contract method 0x5ed2c220.
//
// Solidity: function isWithdrawalsEnabled() view returns(bool)
func (_L1LidoGateway *L1LidoGatewaySession) IsWithdrawalsEnabled() (bool, error) {
	return _L1LidoGateway.Contract.IsWithdrawalsEnabled(&_L1LidoGateway.CallOpts)
}

// IsWithdrawalsEnabled is a free data retrieval call binding the contract method 0x5ed2c220.
//
// Solidity: function isWithdrawalsEnabled() view returns(bool)
func (_L1LidoGateway *L1LidoGatewayCallerSession) IsWithdrawalsEnabled() (bool, error) {
	return _L1LidoGateway.Contract.IsWithdrawalsEnabled(&_L1LidoGateway.CallOpts)
}

// L1Token is a free data retrieval call binding the contract method 0xc01e1bd6.
//
// Solidity: function l1Token() view returns(address)
func (_L1LidoGateway *L1LidoGatewayCaller) L1Token(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _L1LidoGateway.contract.Call(opts, &out, "l1Token")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// L1Token is a free data retrieval call binding the contract method 0xc01e1bd6.
//
// Solidity: function l1Token() view returns(address)
func (_L1LidoGateway *L1LidoGatewaySession) L1Token() (common.Address, error) {
	return _L1LidoGateway.Contract.L1Token(&_L1LidoGateway.CallOpts)
}

// L1Token is a free data retrieval call binding the contract method 0xc01e1bd6.
//
// Solidity: function l1Token() view returns(address)
func (_L1LidoGateway *L1LidoGatewayCallerSession) L1Token() (common.Address, error) {
	return _L1LidoGateway.Contract.L1Token(&_L1LidoGateway.CallOpts)
}

// L2Token is a free data retrieval call binding the contract method 0x56eff267.
//
// Solidity: function l2Token() view returns(address)
func (_L1LidoGateway *L1LidoGatewayCaller) L2Token(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _L1LidoGateway.contract.Call(opts, &out, "l2Token")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// L2Token is a free data retrieval call binding the contract method 0x56eff267.
//
// Solidity: function l2Token() view returns(address)
func (_L1LidoGateway *L1LidoGatewaySession) L2Token() (common.Address, error) {
	return _L1LidoGateway.Contract.L2Token(&_L1LidoGateway.CallOpts)
}

// L2Token is a free data retrieval call binding the contract method 0x56eff267.
//
// Solidity: function l2Token() view returns(address)
func (_L1LidoGateway *L1LidoGatewayCallerSession) L2Token() (common.Address, error) {
	return _L1LidoGateway.Contract.L2Token(&_L1LidoGateway.CallOpts)
}

// Messenger is a free data retrieval call binding the contract method 0x3cb747bf.
//
// Solidity: function messenger() view returns(address)
func (_L1LidoGateway *L1LidoGatewayCaller) Messenger(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _L1LidoGateway.contract.Call(opts, &out, "messenger")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Messenger is a free data retrieval call binding the contract method 0x3cb747bf.
//
// Solidity: function messenger() view returns(address)
func (_L1LidoGateway *L1LidoGatewaySession) Messenger() (common.Address, error) {
	return _L1LidoGateway.Contract.Messenger(&_L1LidoGateway.CallOpts)
}

// Messenger is a free data retrieval call binding the contract method 0x3cb747bf.
//
// Solidity: function messenger() view returns(address)
func (_L1LidoGateway *L1LidoGatewayCallerSession) Messenger() (common.Address, error) {
	return _L1LidoGateway.Contract.Messenger(&_L1LidoGateway.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_L1LidoGateway *L1LidoGatewayCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _L1LidoGateway.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_L1LidoGateway *L1LidoGatewaySession) Owner() (common.Address, error) {
	return _L1LidoGateway.Contract.Owner(&_L1LidoGateway.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_L1LidoGateway *L1LidoGatewayCallerSession) Owner() (common.Address, error) {
	return _L1LidoGateway.Contract.Owner(&_L1LidoGateway.CallOpts)
}

// Router is a free data retrieval call binding the contract method 0xf887ea40.
//
// Solidity: function router() view returns(address)
func (_L1LidoGateway *L1LidoGatewayCaller) Router(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _L1LidoGateway.contract.Call(opts, &out, "router")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Router is a free data retrieval call binding the contract method 0xf887ea40.
//
// Solidity: function router() view returns(address)
func (_L1LidoGateway *L1LidoGatewaySession) Router() (common.Address, error) {
	return _L1LidoGateway.Contract.Router(&_L1LidoGateway.CallOpts)
}

// Router is a free data retrieval call binding the contract method 0xf887ea40.
//
// Solidity: function router() view returns(address)
func (_L1LidoGateway *L1LidoGatewayCallerSession) Router() (common.Address, error) {
	return _L1LidoGateway.Contract.Router(&_L1LidoGateway.CallOpts)
}

// DepositERC20 is a paid mutator transaction binding the contract method 0x21425ee0.
//
// Solidity: function depositERC20(address _token, uint256 _amount, uint256 _gasLimit) payable returns()
func (_L1LidoGateway *L1LidoGatewayTransactor) DepositERC20(opts *bind.TransactOpts, _token common.Address, _amount *big.Int, _gasLimit *big.Int) (*types.Transaction, error) {
	return _L1LidoGateway.contract.Transact(opts, "depositERC20", _token, _amount, _gasLimit)
}

// DepositERC20 is a paid mutator transaction binding the contract method 0x21425ee0.
//
// Solidity: function depositERC20(address _token, uint256 _amount, uint256 _gasLimit) payable returns()
func (_L1LidoGateway *L1LidoGatewaySession) DepositERC20(_token common.Address, _amount *big.Int, _gasLimit *big.Int) (*types.Transaction, error) {
	return _L1LidoGateway.Contract.DepositERC20(&_L1LidoGateway.TransactOpts, _token, _amount, _gasLimit)
}

// DepositERC20 is a paid mutator transaction binding the contract method 0x21425ee0.
//
// Solidity: function depositERC20(address _token, uint256 _amount, uint256 _gasLimit) payable returns()
func (_L1LidoGateway *L1LidoGatewayTransactorSession) DepositERC20(_token common.Address, _amount *big.Int, _gasLimit *big.Int) (*types.Transaction, error) {
	return _L1LidoGateway.Contract.DepositERC20(&_L1LidoGateway.TransactOpts, _token, _amount, _gasLimit)
}

// DepositERC200 is a paid mutator transaction binding the contract method 0xf219fa66.
//
// Solidity: function depositERC20(address _token, address _to, uint256 _amount, uint256 _gasLimit) payable returns()
func (_L1LidoGateway *L1LidoGatewayTransactor) DepositERC200(opts *bind.TransactOpts, _token common.Address, _to common.Address, _amount *big.Int, _gasLimit *big.Int) (*types.Transaction, error) {
	return _L1LidoGateway.contract.Transact(opts, "depositERC200", _token, _to, _amount, _gasLimit)
}

// DepositERC200 is a paid mutator transaction binding the contract method 0xf219fa66.
//
// Solidity: function depositERC20(address _token, address _to, uint256 _amount, uint256 _gasLimit) payable returns()
func (_L1LidoGateway *L1LidoGatewaySession) DepositERC200(_token common.Address, _to common.Address, _amount *big.Int, _gasLimit *big.Int) (*types.Transaction, error) {
	return _L1LidoGateway.Contract.DepositERC200(&_L1LidoGateway.TransactOpts, _token, _to, _amount, _gasLimit)
}

// DepositERC200 is a paid mutator transaction binding the contract method 0xf219fa66.
//
// Solidity: function depositERC20(address _token, address _to, uint256 _amount, uint256 _gasLimit) payable returns()
func (_L1LidoGateway *L1LidoGatewayTransactorSession) DepositERC200(_token common.Address, _to common.Address, _amount *big.Int, _gasLimit *big.Int) (*types.Transaction, error) {
	return _L1LidoGateway.Contract.DepositERC200(&_L1LidoGateway.TransactOpts, _token, _to, _amount, _gasLimit)
}

// DepositERC20AndCall is a paid mutator transaction binding the contract method 0x0aea8c26.
//
// Solidity: function depositERC20AndCall(address _token, address _to, uint256 _amount, bytes _data, uint256 _gasLimit) payable returns()
func (_L1LidoGateway *L1LidoGatewayTransactor) DepositERC20AndCall(opts *bind.TransactOpts, _token common.Address, _to common.Address, _amount *big.Int, _data []byte, _gasLimit *big.Int) (*types.Transaction, error) {
	return _L1LidoGateway.contract.Transact(opts, "depositERC20AndCall", _token, _to, _amount, _data, _gasLimit)
}

// DepositERC20AndCall is a paid mutator transaction binding the contract method 0x0aea8c26.
//
// Solidity: function depositERC20AndCall(address _token, address _to, uint256 _amount, bytes _data, uint256 _gasLimit) payable returns()
func (_L1LidoGateway *L1LidoGatewaySession) DepositERC20AndCall(_token common.Address, _to common.Address, _amount *big.Int, _data []byte, _gasLimit *big.Int) (*types.Transaction, error) {
	return _L1LidoGateway.Contract.DepositERC20AndCall(&_L1LidoGateway.TransactOpts, _token, _to, _amount, _data, _gasLimit)
}

// DepositERC20AndCall is a paid mutator transaction binding the contract method 0x0aea8c26.
//
// Solidity: function depositERC20AndCall(address _token, address _to, uint256 _amount, bytes _data, uint256 _gasLimit) payable returns()
func (_L1LidoGateway *L1LidoGatewayTransactorSession) DepositERC20AndCall(_token common.Address, _to common.Address, _amount *big.Int, _data []byte, _gasLimit *big.Int) (*types.Transaction, error) {
	return _L1LidoGateway.Contract.DepositERC20AndCall(&_L1LidoGateway.TransactOpts, _token, _to, _amount, _data, _gasLimit)
}

// DisableDeposits is a paid mutator transaction binding the contract method 0xac67e1af.
//
// Solidity: function disableDeposits() returns()
func (_L1LidoGateway *L1LidoGatewayTransactor) DisableDeposits(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _L1LidoGateway.contract.Transact(opts, "disableDeposits")
}

// DisableDeposits is a paid mutator transaction binding the contract method 0xac67e1af.
//
// Solidity: function disableDeposits() returns()
func (_L1LidoGateway *L1LidoGatewaySession) DisableDeposits() (*types.Transaction, error) {
	return _L1LidoGateway.Contract.DisableDeposits(&_L1LidoGateway.TransactOpts)
}

// DisableDeposits is a paid mutator transaction binding the contract method 0xac67e1af.
//
// Solidity: function disableDeposits() returns()
func (_L1LidoGateway *L1LidoGatewayTransactorSession) DisableDeposits() (*types.Transaction, error) {
	return _L1LidoGateway.Contract.DisableDeposits(&_L1LidoGateway.TransactOpts)
}

// DisableWithdrawals is a paid mutator transaction binding the contract method 0xad960ce1.
//
// Solidity: function disableWithdrawals() returns()
func (_L1LidoGateway *L1LidoGatewayTransactor) DisableWithdrawals(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _L1LidoGateway.contract.Transact(opts, "disableWithdrawals")
}

// DisableWithdrawals is a paid mutator transaction binding the contract method 0xad960ce1.
//
// Solidity: function disableWithdrawals() returns()
func (_L1LidoGateway *L1LidoGatewaySession) DisableWithdrawals() (*types.Transaction, error) {
	return _L1LidoGateway.Contract.DisableWithdrawals(&_L1LidoGateway.TransactOpts)
}

// DisableWithdrawals is a paid mutator transaction binding the contract method 0xad960ce1.
//
// Solidity: function disableWithdrawals() returns()
func (_L1LidoGateway *L1LidoGatewayTransactorSession) DisableWithdrawals() (*types.Transaction, error) {
	return _L1LidoGateway.Contract.DisableWithdrawals(&_L1LidoGateway.TransactOpts)
}

// EnableDeposits is a paid mutator transaction binding the contract method 0x5e4c57a4.
//
// Solidity: function enableDeposits() returns()
func (_L1LidoGateway *L1LidoGatewayTransactor) EnableDeposits(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _L1LidoGateway.contract.Transact(opts, "enableDeposits")
}

// EnableDeposits is a paid mutator transaction binding the contract method 0x5e4c57a4.
//
// Solidity: function enableDeposits() returns()
func (_L1LidoGateway *L1LidoGatewaySession) EnableDeposits() (*types.Transaction, error) {
	return _L1LidoGateway.Contract.EnableDeposits(&_L1LidoGateway.TransactOpts)
}

// EnableDeposits is a paid mutator transaction binding the contract method 0x5e4c57a4.
//
// Solidity: function enableDeposits() returns()
func (_L1LidoGateway *L1LidoGatewayTransactorSession) EnableDeposits() (*types.Transaction, error) {
	return _L1LidoGateway.Contract.EnableDeposits(&_L1LidoGateway.TransactOpts)
}

// EnableWithdrawals is a paid mutator transaction binding the contract method 0xe8bac93b.
//
// Solidity: function enableWithdrawals() returns()
func (_L1LidoGateway *L1LidoGatewayTransactor) EnableWithdrawals(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _L1LidoGateway.contract.Transact(opts, "enableWithdrawals")
}

// EnableWithdrawals is a paid mutator transaction binding the contract method 0xe8bac93b.
//
// Solidity: function enableWithdrawals() returns()
func (_L1LidoGateway *L1LidoGatewaySession) EnableWithdrawals() (*types.Transaction, error) {
	return _L1LidoGateway.Contract.EnableWithdrawals(&_L1LidoGateway.TransactOpts)
}

// EnableWithdrawals is a paid mutator transaction binding the contract method 0xe8bac93b.
//
// Solidity: function enableWithdrawals() returns()
func (_L1LidoGateway *L1LidoGatewayTransactorSession) EnableWithdrawals() (*types.Transaction, error) {
	return _L1LidoGateway.Contract.EnableWithdrawals(&_L1LidoGateway.TransactOpts)
}

// FinalizeWithdrawERC20 is a paid mutator transaction binding the contract method 0x84bd13b0.
//
// Solidity: function finalizeWithdrawERC20(address _l1Token, address _l2Token, address _from, address _to, uint256 _amount, bytes _data) payable returns()
func (_L1LidoGateway *L1LidoGatewayTransactor) FinalizeWithdrawERC20(opts *bind.TransactOpts, _l1Token common.Address, _l2Token common.Address, _from common.Address, _to common.Address, _amount *big.Int, _data []byte) (*types.Transaction, error) {
	return _L1LidoGateway.contract.Transact(opts, "finalizeWithdrawERC20", _l1Token, _l2Token, _from, _to, _amount, _data)
}

// FinalizeWithdrawERC20 is a paid mutator transaction binding the contract method 0x84bd13b0.
//
// Solidity: function finalizeWithdrawERC20(address _l1Token, address _l2Token, address _from, address _to, uint256 _amount, bytes _data) payable returns()
func (_L1LidoGateway *L1LidoGatewaySession) FinalizeWithdrawERC20(_l1Token common.Address, _l2Token common.Address, _from common.Address, _to common.Address, _amount *big.Int, _data []byte) (*types.Transaction, error) {
	return _L1LidoGateway.Contract.FinalizeWithdrawERC20(&_L1LidoGateway.TransactOpts, _l1Token, _l2Token, _from, _to, _amount, _data)
}

// FinalizeWithdrawERC20 is a paid mutator transaction binding the contract method 0x84bd13b0.
//
// Solidity: function finalizeWithdrawERC20(address _l1Token, address _l2Token, address _from, address _to, uint256 _amount, bytes _data) payable returns()
func (_L1LidoGateway *L1LidoGatewayTransactorSession) FinalizeWithdrawERC20(_l1Token common.Address, _l2Token common.Address, _from common.Address, _to common.Address, _amount *big.Int, _data []byte) (*types.Transaction, error) {
	return _L1LidoGateway.Contract.FinalizeWithdrawERC20(&_L1LidoGateway.TransactOpts, _l1Token, _l2Token, _from, _to, _amount, _data)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 _role, address _account) returns()
func (_L1LidoGateway *L1LidoGatewayTransactor) GrantRole(opts *bind.TransactOpts, _role [32]byte, _account common.Address) (*types.Transaction, error) {
	return _L1LidoGateway.contract.Transact(opts, "grantRole", _role, _account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 _role, address _account) returns()
func (_L1LidoGateway *L1LidoGatewaySession) GrantRole(_role [32]byte, _account common.Address) (*types.Transaction, error) {
	return _L1LidoGateway.Contract.GrantRole(&_L1LidoGateway.TransactOpts, _role, _account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 _role, address _account) returns()
func (_L1LidoGateway *L1LidoGatewayTransactorSession) GrantRole(_role [32]byte, _account common.Address) (*types.Transaction, error) {
	return _L1LidoGateway.Contract.GrantRole(&_L1LidoGateway.TransactOpts, _role, _account)
}

// Initialize is a paid mutator transaction binding the contract method 0xc0c53b8b.
//
// Solidity: function initialize(address _counterpart, address _router, address _messenger) returns()
func (_L1LidoGateway *L1LidoGatewayTransactor) Initialize(opts *bind.TransactOpts, _counterpart common.Address, _router common.Address, _messenger common.Address) (*types.Transaction, error) {
	return _L1LidoGateway.contract.Transact(opts, "initialize", _counterpart, _router, _messenger)
}

// Initialize is a paid mutator transaction binding the contract method 0xc0c53b8b.
//
// Solidity: function initialize(address _counterpart, address _router, address _messenger) returns()
func (_L1LidoGateway *L1LidoGatewaySession) Initialize(_counterpart common.Address, _router common.Address, _messenger common.Address) (*types.Transaction, error) {
	return _L1LidoGateway.Contract.Initialize(&_L1LidoGateway.TransactOpts, _counterpart, _router, _messenger)
}

// Initialize is a paid mutator transaction binding the contract method 0xc0c53b8b.
//
// Solidity: function initialize(address _counterpart, address _router, address _messenger) returns()
func (_L1LidoGateway *L1LidoGatewayTransactorSession) Initialize(_counterpart common.Address, _router common.Address, _messenger common.Address) (*types.Transaction, error) {
	return _L1LidoGateway.Contract.Initialize(&_L1LidoGateway.TransactOpts, _counterpart, _router, _messenger)
}

// InitializeV2 is a paid mutator transaction binding the contract method 0xf27ebced.
//
// Solidity: function initializeV2(address _depositsEnabler, address _depositsDisabler, address _withdrawalsEnabler, address _withdrawalsDisabler) returns()
func (_L1LidoGateway *L1LidoGatewayTransactor) InitializeV2(opts *bind.TransactOpts, _depositsEnabler common.Address, _depositsDisabler common.Address, _withdrawalsEnabler common.Address, _withdrawalsDisabler common.Address) (*types.Transaction, error) {
	return _L1LidoGateway.contract.Transact(opts, "initializeV2", _depositsEnabler, _depositsDisabler, _withdrawalsEnabler, _withdrawalsDisabler)
}

// InitializeV2 is a paid mutator transaction binding the contract method 0xf27ebced.
//
// Solidity: function initializeV2(address _depositsEnabler, address _depositsDisabler, address _withdrawalsEnabler, address _withdrawalsDisabler) returns()
func (_L1LidoGateway *L1LidoGatewaySession) InitializeV2(_depositsEnabler common.Address, _depositsDisabler common.Address, _withdrawalsEnabler common.Address, _withdrawalsDisabler common.Address) (*types.Transaction, error) {
	return _L1LidoGateway.Contract.InitializeV2(&_L1LidoGateway.TransactOpts, _depositsEnabler, _depositsDisabler, _withdrawalsEnabler, _withdrawalsDisabler)
}

// InitializeV2 is a paid mutator transaction binding the contract method 0xf27ebced.
//
// Solidity: function initializeV2(address _depositsEnabler, address _depositsDisabler, address _withdrawalsEnabler, address _withdrawalsDisabler) returns()
func (_L1LidoGateway *L1LidoGatewayTransactorSession) InitializeV2(_depositsEnabler common.Address, _depositsDisabler common.Address, _withdrawalsEnabler common.Address, _withdrawalsDisabler common.Address) (*types.Transaction, error) {
	return _L1LidoGateway.Contract.InitializeV2(&_L1LidoGateway.TransactOpts, _depositsEnabler, _depositsDisabler, _withdrawalsEnabler, _withdrawalsDisabler)
}

// OnDropMessage is a paid mutator transaction binding the contract method 0x14298c51.
//
// Solidity: function onDropMessage(bytes _message) payable returns()
func (_L1LidoGateway *L1LidoGatewayTransactor) OnDropMessage(opts *bind.TransactOpts, _message []byte) (*types.Transaction, error) {
	return _L1LidoGateway.contract.Transact(opts, "onDropMessage", _message)
}

// OnDropMessage is a paid mutator transaction binding the contract method 0x14298c51.
//
// Solidity: function onDropMessage(bytes _message) payable returns()
func (_L1LidoGateway *L1LidoGatewaySession) OnDropMessage(_message []byte) (*types.Transaction, error) {
	return _L1LidoGateway.Contract.OnDropMessage(&_L1LidoGateway.TransactOpts, _message)
}

// OnDropMessage is a paid mutator transaction binding the contract method 0x14298c51.
//
// Solidity: function onDropMessage(bytes _message) payable returns()
func (_L1LidoGateway *L1LidoGatewayTransactorSession) OnDropMessage(_message []byte) (*types.Transaction, error) {
	return _L1LidoGateway.Contract.OnDropMessage(&_L1LidoGateway.TransactOpts, _message)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_L1LidoGateway *L1LidoGatewayTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _L1LidoGateway.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_L1LidoGateway *L1LidoGatewaySession) RenounceOwnership() (*types.Transaction, error) {
	return _L1LidoGateway.Contract.RenounceOwnership(&_L1LidoGateway.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_L1LidoGateway *L1LidoGatewayTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _L1LidoGateway.Contract.RenounceOwnership(&_L1LidoGateway.TransactOpts)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 _role, address _account) returns()
func (_L1LidoGateway *L1LidoGatewayTransactor) RevokeRole(opts *bind.TransactOpts, _role [32]byte, _account common.Address) (*types.Transaction, error) {
	return _L1LidoGateway.contract.Transact(opts, "revokeRole", _role, _account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 _role, address _account) returns()
func (_L1LidoGateway *L1LidoGatewaySession) RevokeRole(_role [32]byte, _account common.Address) (*types.Transaction, error) {
	return _L1LidoGateway.Contract.RevokeRole(&_L1LidoGateway.TransactOpts, _role, _account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 _role, address _account) returns()
func (_L1LidoGateway *L1LidoGatewayTransactorSession) RevokeRole(_role [32]byte, _account common.Address) (*types.Transaction, error) {
	return _L1LidoGateway.Contract.RevokeRole(&_L1LidoGateway.TransactOpts, _role, _account)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_L1LidoGateway *L1LidoGatewayTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _L1LidoGateway.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_L1LidoGateway *L1LidoGatewaySession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _L1LidoGateway.Contract.TransferOwnership(&_L1LidoGateway.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_L1LidoGateway *L1LidoGatewayTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _L1LidoGateway.Contract.TransferOwnership(&_L1LidoGateway.TransactOpts, newOwner)
}

// L1LidoGatewayDepositERC20Iterator is returned from FilterDepositERC20 and is used to iterate over the raw logs and unpacked data for DepositERC20 events raised by the L1LidoGateway contract.
type L1LidoGatewayDepositERC20Iterator struct {
	Event *L1LidoGatewayDepositERC20 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *L1LidoGatewayDepositERC20Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(L1LidoGatewayDepositERC20)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(L1LidoGatewayDepositERC20)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *L1LidoGatewayDepositERC20Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *L1LidoGatewayDepositERC20Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// L1LidoGatewayDepositERC20 represents a DepositERC20 event raised by the L1LidoGateway contract.
type L1LidoGatewayDepositERC20 struct {
	L1Token common.Address
	L2Token common.Address
	From    common.Address
	To      common.Address
	Amount  *big.Int
	Data    []byte
	Nonce   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterDepositERC20 is a free log retrieval operation binding the contract event 0x1a6c38816de45937fd5cd974f9694fe10e64163ba12a92abf0f4b6b23ad88672.
//
// Solidity: event DepositERC20(address indexed l1Token, address indexed l2Token, address indexed from, address to, uint256 amount, bytes data, uint256 nonce)
func (_L1LidoGateway *L1LidoGatewayFilterer) FilterDepositERC20(opts *bind.FilterOpts, l1Token []common.Address, l2Token []common.Address, from []common.Address) (*L1LidoGatewayDepositERC20Iterator, error) {

	var l1TokenRule []interface{}
	for _, l1TokenItem := range l1Token {
		l1TokenRule = append(l1TokenRule, l1TokenItem)
	}
	var l2TokenRule []interface{}
	for _, l2TokenItem := range l2Token {
		l2TokenRule = append(l2TokenRule, l2TokenItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _L1LidoGateway.contract.FilterLogs(opts, "DepositERC20", l1TokenRule, l2TokenRule, fromRule)
	if err != nil {
		return nil, err
	}
	return &L1LidoGatewayDepositERC20Iterator{contract: _L1LidoGateway.contract, event: "DepositERC20", logs: logs, sub: sub}, nil
}

// WatchDepositERC20 is a free log subscription operation binding the contract event 0x1a6c38816de45937fd5cd974f9694fe10e64163ba12a92abf0f4b6b23ad88672.
//
// Solidity: event DepositERC20(address indexed l1Token, address indexed l2Token, address indexed from, address to, uint256 amount, bytes data, uint256 nonce)
func (_L1LidoGateway *L1LidoGatewayFilterer) WatchDepositERC20(opts *bind.WatchOpts, sink chan<- *L1LidoGatewayDepositERC20, l1Token []common.Address, l2Token []common.Address, from []common.Address) (event.Subscription, error) {

	var l1TokenRule []interface{}
	for _, l1TokenItem := range l1Token {
		l1TokenRule = append(l1TokenRule, l1TokenItem)
	}
	var l2TokenRule []interface{}
	for _, l2TokenItem := range l2Token {
		l2TokenRule = append(l2TokenRule, l2TokenItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _L1LidoGateway.contract.WatchLogs(opts, "DepositERC20", l1TokenRule, l2TokenRule, fromRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(L1LidoGatewayDepositERC20)
				if err := _L1LidoGateway.contract.UnpackLog(event, "DepositERC20", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDepositERC20 is a log parse operation binding the contract event 0x1a6c38816de45937fd5cd974f9694fe10e64163ba12a92abf0f4b6b23ad88672.
//
// Solidity: event DepositERC20(address indexed l1Token, address indexed l2Token, address indexed from, address to, uint256 amount, bytes data, uint256 nonce)
func (_L1LidoGateway *L1LidoGatewayFilterer) ParseDepositERC20(log types.Log) (*L1LidoGatewayDepositERC20, error) {
	event := new(L1LidoGatewayDepositERC20)
	if err := _L1LidoGateway.contract.UnpackLog(event, "DepositERC20", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// L1LidoGatewayDepositsDisabledIterator is returned from FilterDepositsDisabled and is used to iterate over the raw logs and unpacked data for DepositsDisabled events raised by the L1LidoGateway contract.
type L1LidoGatewayDepositsDisabledIterator struct {
	Event *L1LidoGatewayDepositsDisabled // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *L1LidoGatewayDepositsDisabledIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(L1LidoGatewayDepositsDisabled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(L1LidoGatewayDepositsDisabled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *L1LidoGatewayDepositsDisabledIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *L1LidoGatewayDepositsDisabledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// L1LidoGatewayDepositsDisabled represents a DepositsDisabled event raised by the L1LidoGateway contract.
type L1LidoGatewayDepositsDisabled struct {
	Disabler common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterDepositsDisabled is a free log retrieval operation binding the contract event 0x9ca4d309bbfd23c65db3dc38c1712862f5812c7139937e2655de86e803f73bb9.
//
// Solidity: event DepositsDisabled(address indexed disabler)
func (_L1LidoGateway *L1LidoGatewayFilterer) FilterDepositsDisabled(opts *bind.FilterOpts, disabler []common.Address) (*L1LidoGatewayDepositsDisabledIterator, error) {

	var disablerRule []interface{}
	for _, disablerItem := range disabler {
		disablerRule = append(disablerRule, disablerItem)
	}

	logs, sub, err := _L1LidoGateway.contract.FilterLogs(opts, "DepositsDisabled", disablerRule)
	if err != nil {
		return nil, err
	}
	return &L1LidoGatewayDepositsDisabledIterator{contract: _L1LidoGateway.contract, event: "DepositsDisabled", logs: logs, sub: sub}, nil
}

// WatchDepositsDisabled is a free log subscription operation binding the contract event 0x9ca4d309bbfd23c65db3dc38c1712862f5812c7139937e2655de86e803f73bb9.
//
// Solidity: event DepositsDisabled(address indexed disabler)
func (_L1LidoGateway *L1LidoGatewayFilterer) WatchDepositsDisabled(opts *bind.WatchOpts, sink chan<- *L1LidoGatewayDepositsDisabled, disabler []common.Address) (event.Subscription, error) {

	var disablerRule []interface{}
	for _, disablerItem := range disabler {
		disablerRule = append(disablerRule, disablerItem)
	}

	logs, sub, err := _L1LidoGateway.contract.WatchLogs(opts, "DepositsDisabled", disablerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(L1LidoGatewayDepositsDisabled)
				if err := _L1LidoGateway.contract.UnpackLog(event, "DepositsDisabled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDepositsDisabled is a log parse operation binding the contract event 0x9ca4d309bbfd23c65db3dc38c1712862f5812c7139937e2655de86e803f73bb9.
//
// Solidity: event DepositsDisabled(address indexed disabler)
func (_L1LidoGateway *L1LidoGatewayFilterer) ParseDepositsDisabled(log types.Log) (*L1LidoGatewayDepositsDisabled, error) {
	event := new(L1LidoGatewayDepositsDisabled)
	if err := _L1LidoGateway.contract.UnpackLog(event, "DepositsDisabled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// L1LidoGatewayDepositsEnabledIterator is returned from FilterDepositsEnabled and is used to iterate over the raw logs and unpacked data for DepositsEnabled events raised by the L1LidoGateway contract.
type L1LidoGatewayDepositsEnabledIterator struct {
	Event *L1LidoGatewayDepositsEnabled // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *L1LidoGatewayDepositsEnabledIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(L1LidoGatewayDepositsEnabled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(L1LidoGatewayDepositsEnabled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *L1LidoGatewayDepositsEnabledIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *L1LidoGatewayDepositsEnabledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// L1LidoGatewayDepositsEnabled represents a DepositsEnabled event raised by the L1LidoGateway contract.
type L1LidoGatewayDepositsEnabled struct {
	Enabler common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterDepositsEnabled is a free log retrieval operation binding the contract event 0xc36a428b063177e3f28b3b5d340c08f77827847b2ee30114ccf0c40e519c420a.
//
// Solidity: event DepositsEnabled(address indexed enabler)
func (_L1LidoGateway *L1LidoGatewayFilterer) FilterDepositsEnabled(opts *bind.FilterOpts, enabler []common.Address) (*L1LidoGatewayDepositsEnabledIterator, error) {

	var enablerRule []interface{}
	for _, enablerItem := range enabler {
		enablerRule = append(enablerRule, enablerItem)
	}

	logs, sub, err := _L1LidoGateway.contract.FilterLogs(opts, "DepositsEnabled", enablerRule)
	if err != nil {
		return nil, err
	}
	return &L1LidoGatewayDepositsEnabledIterator{contract: _L1LidoGateway.contract, event: "DepositsEnabled", logs: logs, sub: sub}, nil
}

// WatchDepositsEnabled is a free log subscription operation binding the contract event 0xc36a428b063177e3f28b3b5d340c08f77827847b2ee30114ccf0c40e519c420a.
//
// Solidity: event DepositsEnabled(address indexed enabler)
func (_L1LidoGateway *L1LidoGatewayFilterer) WatchDepositsEnabled(opts *bind.WatchOpts, sink chan<- *L1LidoGatewayDepositsEnabled, enabler []common.Address) (event.Subscription, error) {

	var enablerRule []interface{}
	for _, enablerItem := range enabler {
		enablerRule = append(enablerRule, enablerItem)
	}

	logs, sub, err := _L1LidoGateway.contract.WatchLogs(opts, "DepositsEnabled", enablerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(L1LidoGatewayDepositsEnabled)
				if err := _L1LidoGateway.contract.UnpackLog(event, "DepositsEnabled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDepositsEnabled is a log parse operation binding the contract event 0xc36a428b063177e3f28b3b5d340c08f77827847b2ee30114ccf0c40e519c420a.
//
// Solidity: event DepositsEnabled(address indexed enabler)
func (_L1LidoGateway *L1LidoGatewayFilterer) ParseDepositsEnabled(log types.Log) (*L1LidoGatewayDepositsEnabled, error) {
	event := new(L1LidoGatewayDepositsEnabled)
	if err := _L1LidoGateway.contract.UnpackLog(event, "DepositsEnabled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// L1LidoGatewayFinalizeWithdrawERC20Iterator is returned from FilterFinalizeWithdrawERC20 and is used to iterate over the raw logs and unpacked data for FinalizeWithdrawERC20 events raised by the L1LidoGateway contract.
type L1LidoGatewayFinalizeWithdrawERC20Iterator struct {
	Event *L1LidoGatewayFinalizeWithdrawERC20 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *L1LidoGatewayFinalizeWithdrawERC20Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(L1LidoGatewayFinalizeWithdrawERC20)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(L1LidoGatewayFinalizeWithdrawERC20)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *L1LidoGatewayFinalizeWithdrawERC20Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *L1LidoGatewayFinalizeWithdrawERC20Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// L1LidoGatewayFinalizeWithdrawERC20 represents a FinalizeWithdrawERC20 event raised by the L1LidoGateway contract.
type L1LidoGatewayFinalizeWithdrawERC20 struct {
	L1Token common.Address
	L2Token common.Address
	From    common.Address
	To      common.Address
	Amount  *big.Int
	Data    []byte
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterFinalizeWithdrawERC20 is a free log retrieval operation binding the contract event 0xc6f985873b37805705f6bce756dce3d1ff4b603e298d506288cce499926846a7.
//
// Solidity: event FinalizeWithdrawERC20(address indexed l1Token, address indexed l2Token, address indexed from, address to, uint256 amount, bytes data)
func (_L1LidoGateway *L1LidoGatewayFilterer) FilterFinalizeWithdrawERC20(opts *bind.FilterOpts, l1Token []common.Address, l2Token []common.Address, from []common.Address) (*L1LidoGatewayFinalizeWithdrawERC20Iterator, error) {

	var l1TokenRule []interface{}
	for _, l1TokenItem := range l1Token {
		l1TokenRule = append(l1TokenRule, l1TokenItem)
	}
	var l2TokenRule []interface{}
	for _, l2TokenItem := range l2Token {
		l2TokenRule = append(l2TokenRule, l2TokenItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _L1LidoGateway.contract.FilterLogs(opts, "FinalizeWithdrawERC20", l1TokenRule, l2TokenRule, fromRule)
	if err != nil {
		return nil, err
	}
	return &L1LidoGatewayFinalizeWithdrawERC20Iterator{contract: _L1LidoGateway.contract, event: "FinalizeWithdrawERC20", logs: logs, sub: sub}, nil
}

// WatchFinalizeWithdrawERC20 is a free log subscription operation binding the contract event 0xc6f985873b37805705f6bce756dce3d1ff4b603e298d506288cce499926846a7.
//
// Solidity: event FinalizeWithdrawERC20(address indexed l1Token, address indexed l2Token, address indexed from, address to, uint256 amount, bytes data)
func (_L1LidoGateway *L1LidoGatewayFilterer) WatchFinalizeWithdrawERC20(opts *bind.WatchOpts, sink chan<- *L1LidoGatewayFinalizeWithdrawERC20, l1Token []common.Address, l2Token []common.Address, from []common.Address) (event.Subscription, error) {

	var l1TokenRule []interface{}
	for _, l1TokenItem := range l1Token {
		l1TokenRule = append(l1TokenRule, l1TokenItem)
	}
	var l2TokenRule []interface{}
	for _, l2TokenItem := range l2Token {
		l2TokenRule = append(l2TokenRule, l2TokenItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _L1LidoGateway.contract.WatchLogs(opts, "FinalizeWithdrawERC20", l1TokenRule, l2TokenRule, fromRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(L1LidoGatewayFinalizeWithdrawERC20)
				if err := _L1LidoGateway.contract.UnpackLog(event, "FinalizeWithdrawERC20", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseFinalizeWithdrawERC20 is a log parse operation binding the contract event 0xc6f985873b37805705f6bce756dce3d1ff4b603e298d506288cce499926846a7.
//
// Solidity: event FinalizeWithdrawERC20(address indexed l1Token, address indexed l2Token, address indexed from, address to, uint256 amount, bytes data)
func (_L1LidoGateway *L1LidoGatewayFilterer) ParseFinalizeWithdrawERC20(log types.Log) (*L1LidoGatewayFinalizeWithdrawERC20, error) {
	event := new(L1LidoGatewayFinalizeWithdrawERC20)
	if err := _L1LidoGateway.contract.UnpackLog(event, "FinalizeWithdrawERC20", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// L1LidoGatewayInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the L1LidoGateway contract.
type L1LidoGatewayInitializedIterator struct {
	Event *L1LidoGatewayInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *L1LidoGatewayInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(L1LidoGatewayInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(L1LidoGatewayInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *L1LidoGatewayInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *L1LidoGatewayInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// L1LidoGatewayInitialized represents a Initialized event raised by the L1LidoGateway contract.
type L1LidoGatewayInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_L1LidoGateway *L1LidoGatewayFilterer) FilterInitialized(opts *bind.FilterOpts) (*L1LidoGatewayInitializedIterator, error) {

	logs, sub, err := _L1LidoGateway.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &L1LidoGatewayInitializedIterator{contract: _L1LidoGateway.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_L1LidoGateway *L1LidoGatewayFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *L1LidoGatewayInitialized) (event.Subscription, error) {

	logs, sub, err := _L1LidoGateway.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(L1LidoGatewayInitialized)
				if err := _L1LidoGateway.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_L1LidoGateway *L1LidoGatewayFilterer) ParseInitialized(log types.Log) (*L1LidoGatewayInitialized, error) {
	event := new(L1LidoGatewayInitialized)
	if err := _L1LidoGateway.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// L1LidoGatewayOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the L1LidoGateway contract.
type L1LidoGatewayOwnershipTransferredIterator struct {
	Event *L1LidoGatewayOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *L1LidoGatewayOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(L1LidoGatewayOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(L1LidoGatewayOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *L1LidoGatewayOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *L1LidoGatewayOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// L1LidoGatewayOwnershipTransferred represents a OwnershipTransferred event raised by the L1LidoGateway contract.
type L1LidoGatewayOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_L1LidoGateway *L1LidoGatewayFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*L1LidoGatewayOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _L1LidoGateway.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &L1LidoGatewayOwnershipTransferredIterator{contract: _L1LidoGateway.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_L1LidoGateway *L1LidoGatewayFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *L1LidoGatewayOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _L1LidoGateway.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(L1LidoGatewayOwnershipTransferred)
				if err := _L1LidoGateway.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_L1LidoGateway *L1LidoGatewayFilterer) ParseOwnershipTransferred(log types.Log) (*L1LidoGatewayOwnershipTransferred, error) {
	event := new(L1LidoGatewayOwnershipTransferred)
	if err := _L1LidoGateway.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// L1LidoGatewayRefundERC20Iterator is returned from FilterRefundERC20 and is used to iterate over the raw logs and unpacked data for RefundERC20 events raised by the L1LidoGateway contract.
type L1LidoGatewayRefundERC20Iterator struct {
	Event *L1LidoGatewayRefundERC20 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *L1LidoGatewayRefundERC20Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(L1LidoGatewayRefundERC20)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(L1LidoGatewayRefundERC20)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *L1LidoGatewayRefundERC20Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *L1LidoGatewayRefundERC20Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// L1LidoGatewayRefundERC20 represents a RefundERC20 event raised by the L1LidoGateway contract.
type L1LidoGatewayRefundERC20 struct {
	Token     common.Address
	Recipient common.Address
	Amount    *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterRefundERC20 is a free log retrieval operation binding the contract event 0xdbdf8eb487847e4c0f22847f5dac07f2d3690f96f581a6ae4b102769917645a8.
//
// Solidity: event RefundERC20(address indexed token, address indexed recipient, uint256 amount)
func (_L1LidoGateway *L1LidoGatewayFilterer) FilterRefundERC20(opts *bind.FilterOpts, token []common.Address, recipient []common.Address) (*L1LidoGatewayRefundERC20Iterator, error) {

	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}
	var recipientRule []interface{}
	for _, recipientItem := range recipient {
		recipientRule = append(recipientRule, recipientItem)
	}

	logs, sub, err := _L1LidoGateway.contract.FilterLogs(opts, "RefundERC20", tokenRule, recipientRule)
	if err != nil {
		return nil, err
	}
	return &L1LidoGatewayRefundERC20Iterator{contract: _L1LidoGateway.contract, event: "RefundERC20", logs: logs, sub: sub}, nil
}

// WatchRefundERC20 is a free log subscription operation binding the contract event 0xdbdf8eb487847e4c0f22847f5dac07f2d3690f96f581a6ae4b102769917645a8.
//
// Solidity: event RefundERC20(address indexed token, address indexed recipient, uint256 amount)
func (_L1LidoGateway *L1LidoGatewayFilterer) WatchRefundERC20(opts *bind.WatchOpts, sink chan<- *L1LidoGatewayRefundERC20, token []common.Address, recipient []common.Address) (event.Subscription, error) {

	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}
	var recipientRule []interface{}
	for _, recipientItem := range recipient {
		recipientRule = append(recipientRule, recipientItem)
	}

	logs, sub, err := _L1LidoGateway.contract.WatchLogs(opts, "RefundERC20", tokenRule, recipientRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(L1LidoGatewayRefundERC20)
				if err := _L1LidoGateway.contract.UnpackLog(event, "RefundERC20", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRefundERC20 is a log parse operation binding the contract event 0xdbdf8eb487847e4c0f22847f5dac07f2d3690f96f581a6ae4b102769917645a8.
//
// Solidity: event RefundERC20(address indexed token, address indexed recipient, uint256 amount)
func (_L1LidoGateway *L1LidoGatewayFilterer) ParseRefundERC20(log types.Log) (*L1LidoGatewayRefundERC20, error) {
	event := new(L1LidoGatewayRefundERC20)
	if err := _L1LidoGateway.contract.UnpackLog(event, "RefundERC20", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// L1LidoGatewayRoleGrantedIterator is returned from FilterRoleGranted and is used to iterate over the raw logs and unpacked data for RoleGranted events raised by the L1LidoGateway contract.
type L1LidoGatewayRoleGrantedIterator struct {
	Event *L1LidoGatewayRoleGranted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *L1LidoGatewayRoleGrantedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(L1LidoGatewayRoleGranted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(L1LidoGatewayRoleGranted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *L1LidoGatewayRoleGrantedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *L1LidoGatewayRoleGrantedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// L1LidoGatewayRoleGranted represents a RoleGranted event raised by the L1LidoGateway contract.
type L1LidoGatewayRoleGranted struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleGranted is a free log retrieval operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_L1LidoGateway *L1LidoGatewayFilterer) FilterRoleGranted(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*L1LidoGatewayRoleGrantedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _L1LidoGateway.contract.FilterLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &L1LidoGatewayRoleGrantedIterator{contract: _L1LidoGateway.contract, event: "RoleGranted", logs: logs, sub: sub}, nil
}

// WatchRoleGranted is a free log subscription operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_L1LidoGateway *L1LidoGatewayFilterer) WatchRoleGranted(opts *bind.WatchOpts, sink chan<- *L1LidoGatewayRoleGranted, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _L1LidoGateway.contract.WatchLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(L1LidoGatewayRoleGranted)
				if err := _L1LidoGateway.contract.UnpackLog(event, "RoleGranted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleGranted is a log parse operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_L1LidoGateway *L1LidoGatewayFilterer) ParseRoleGranted(log types.Log) (*L1LidoGatewayRoleGranted, error) {
	event := new(L1LidoGatewayRoleGranted)
	if err := _L1LidoGateway.contract.UnpackLog(event, "RoleGranted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// L1LidoGatewayRoleRevokedIterator is returned from FilterRoleRevoked and is used to iterate over the raw logs and unpacked data for RoleRevoked events raised by the L1LidoGateway contract.
type L1LidoGatewayRoleRevokedIterator struct {
	Event *L1LidoGatewayRoleRevoked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *L1LidoGatewayRoleRevokedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(L1LidoGatewayRoleRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(L1LidoGatewayRoleRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *L1LidoGatewayRoleRevokedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *L1LidoGatewayRoleRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// L1LidoGatewayRoleRevoked represents a RoleRevoked event raised by the L1LidoGateway contract.
type L1LidoGatewayRoleRevoked struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleRevoked is a free log retrieval operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_L1LidoGateway *L1LidoGatewayFilterer) FilterRoleRevoked(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*L1LidoGatewayRoleRevokedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _L1LidoGateway.contract.FilterLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &L1LidoGatewayRoleRevokedIterator{contract: _L1LidoGateway.contract, event: "RoleRevoked", logs: logs, sub: sub}, nil
}

// WatchRoleRevoked is a free log subscription operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_L1LidoGateway *L1LidoGatewayFilterer) WatchRoleRevoked(opts *bind.WatchOpts, sink chan<- *L1LidoGatewayRoleRevoked, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _L1LidoGateway.contract.WatchLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(L1LidoGatewayRoleRevoked)
				if err := _L1LidoGateway.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleRevoked is a log parse operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_L1LidoGateway *L1LidoGatewayFilterer) ParseRoleRevoked(log types.Log) (*L1LidoGatewayRoleRevoked, error) {
	event := new(L1LidoGatewayRoleRevoked)
	if err := _L1LidoGateway.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// L1LidoGatewayWithdrawalsDisabledIterator is returned from FilterWithdrawalsDisabled and is used to iterate over the raw logs and unpacked data for WithdrawalsDisabled events raised by the L1LidoGateway contract.
type L1LidoGatewayWithdrawalsDisabledIterator struct {
	Event *L1LidoGatewayWithdrawalsDisabled // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *L1LidoGatewayWithdrawalsDisabledIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(L1LidoGatewayWithdrawalsDisabled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(L1LidoGatewayWithdrawalsDisabled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *L1LidoGatewayWithdrawalsDisabledIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *L1LidoGatewayWithdrawalsDisabledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// L1LidoGatewayWithdrawalsDisabled represents a WithdrawalsDisabled event raised by the L1LidoGateway contract.
type L1LidoGatewayWithdrawalsDisabled struct {
	Disabler common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterWithdrawalsDisabled is a free log retrieval operation binding the contract event 0x644eeba8ede48fefc32ada09fb240c5f6c0f06507ab1d296d5af41f1521d9fcb.
//
// Solidity: event WithdrawalsDisabled(address indexed disabler)
func (_L1LidoGateway *L1LidoGatewayFilterer) FilterWithdrawalsDisabled(opts *bind.FilterOpts, disabler []common.Address) (*L1LidoGatewayWithdrawalsDisabledIterator, error) {

	var disablerRule []interface{}
	for _, disablerItem := range disabler {
		disablerRule = append(disablerRule, disablerItem)
	}

	logs, sub, err := _L1LidoGateway.contract.FilterLogs(opts, "WithdrawalsDisabled", disablerRule)
	if err != nil {
		return nil, err
	}
	return &L1LidoGatewayWithdrawalsDisabledIterator{contract: _L1LidoGateway.contract, event: "WithdrawalsDisabled", logs: logs, sub: sub}, nil
}

// WatchWithdrawalsDisabled is a free log subscription operation binding the contract event 0x644eeba8ede48fefc32ada09fb240c5f6c0f06507ab1d296d5af41f1521d9fcb.
//
// Solidity: event WithdrawalsDisabled(address indexed disabler)
func (_L1LidoGateway *L1LidoGatewayFilterer) WatchWithdrawalsDisabled(opts *bind.WatchOpts, sink chan<- *L1LidoGatewayWithdrawalsDisabled, disabler []common.Address) (event.Subscription, error) {

	var disablerRule []interface{}
	for _, disablerItem := range disabler {
		disablerRule = append(disablerRule, disablerItem)
	}

	logs, sub, err := _L1LidoGateway.contract.WatchLogs(opts, "WithdrawalsDisabled", disablerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(L1LidoGatewayWithdrawalsDisabled)
				if err := _L1LidoGateway.contract.UnpackLog(event, "WithdrawalsDisabled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdrawalsDisabled is a log parse operation binding the contract event 0x644eeba8ede48fefc32ada09fb240c5f6c0f06507ab1d296d5af41f1521d9fcb.
//
// Solidity: event WithdrawalsDisabled(address indexed disabler)
func (_L1LidoGateway *L1LidoGatewayFilterer) ParseWithdrawalsDisabled(log types.Log) (*L1LidoGatewayWithdrawalsDisabled, error) {
	event := new(L1LidoGatewayWithdrawalsDisabled)
	if err := _L1LidoGateway.contract.UnpackLog(event, "WithdrawalsDisabled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// L1LidoGatewayWithdrawalsEnabledIterator is returned from FilterWithdrawalsEnabled and is used to iterate over the raw logs and unpacked data for WithdrawalsEnabled events raised by the L1LidoGateway contract.
type L1LidoGatewayWithdrawalsEnabledIterator struct {
	Event *L1LidoGatewayWithdrawalsEnabled // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *L1LidoGatewayWithdrawalsEnabledIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(L1LidoGatewayWithdrawalsEnabled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(L1LidoGatewayWithdrawalsEnabled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *L1LidoGatewayWithdrawalsEnabledIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *L1LidoGatewayWithdrawalsEnabledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// L1LidoGatewayWithdrawalsEnabled represents a WithdrawalsEnabled event raised by the L1LidoGateway contract.
type L1LidoGatewayWithdrawalsEnabled struct {
	Enabler common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterWithdrawalsEnabled is a free log retrieval operation binding the contract event 0xb2ed3603bd9051f0182ebfb75f12a21059b4d31b578a2a05c8d0245e9e2d3204.
//
// Solidity: event WithdrawalsEnabled(address indexed enabler)
func (_L1LidoGateway *L1LidoGatewayFilterer) FilterWithdrawalsEnabled(opts *bind.FilterOpts, enabler []common.Address) (*L1LidoGatewayWithdrawalsEnabledIterator, error) {

	var enablerRule []interface{}
	for _, enablerItem := range enabler {
		enablerRule = append(enablerRule, enablerItem)
	}

	logs, sub, err := _L1LidoGateway.contract.FilterLogs(opts, "WithdrawalsEnabled", enablerRule)
	if err != nil {
		return nil, err
	}
	return &L1LidoGatewayWithdrawalsEnabledIterator{contract: _L1LidoGateway.contract, event: "WithdrawalsEnabled", logs: logs, sub: sub}, nil
}

// WatchWithdrawalsEnabled is a free log subscription operation binding the contract event 0xb2ed3603bd9051f0182ebfb75f12a21059b4d31b578a2a05c8d0245e9e2d3204.
//
// Solidity: event WithdrawalsEnabled(address indexed enabler)
func (_L1LidoGateway *L1LidoGatewayFilterer) WatchWithdrawalsEnabled(opts *bind.WatchOpts, sink chan<- *L1LidoGatewayWithdrawalsEnabled, enabler []common.Address) (event.Subscription, error) {

	var enablerRule []interface{}
	for _, enablerItem := range enabler {
		enablerRule = append(enablerRule, enablerItem)
	}

	logs, sub, err := _L1LidoGateway.contract.WatchLogs(opts, "WithdrawalsEnabled", enablerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(L1LidoGatewayWithdrawalsEnabled)
				if err := _L1LidoGateway.contract.UnpackLog(event, "WithdrawalsEnabled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdrawalsEnabled is a log parse operation binding the contract event 0xb2ed3603bd9051f0182ebfb75f12a21059b4d31b578a2a05c8d0245e9e2d3204.
//
// Solidity: event WithdrawalsEnabled(address indexed enabler)
func (_L1LidoGateway *L1LidoGatewayFilterer) ParseWithdrawalsEnabled(log types.Log) (*L1LidoGatewayWithdrawalsEnabled, error) {
	event := new(L1LidoGatewayWithdrawalsEnabled)
	if err := _L1LidoGateway.contract.UnpackLog(event, "WithdrawalsEnabled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
