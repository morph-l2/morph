// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package bindings

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/scroll-tech/go-ethereum"
	"github.com/scroll-tech/go-ethereum/accounts/abi"
	"github.com/scroll-tech/go-ethereum/accounts/abi/bind"
	"github.com/scroll-tech/go-ethereum/common"
	"github.com/scroll-tech/go-ethereum/core/types"
	"github.com/scroll-tech/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// L1StakingMetaData contains all meta data concerning the L1Staking contract.
var L1StakingMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"_messenger\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldGasLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newGasLimit\",\"type\":\"uint256\"}],\"name\":\"GasLimitAddStakerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldGasLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newGasLimit\",\"type\":\"uint256\"}],\"name\":\"GasLimitRemoveStakersUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"tmKey\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"blsKey\",\"type\":\"bytes\"}],\"name\":\"Registered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPercentage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPercentage\",\"type\":\"uint256\"}],\"name\":\"RewardPercentageUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SlashRemainingClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"stakers\",\"type\":\"address[]\"}],\"name\":\"Slashed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"stakers\",\"type\":\"address[]\"}],\"name\":\"StakersRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"add\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"remove\",\"type\":\"address[]\"}],\"name\":\"WhitelistUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unlockHeight\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MESSENGER\",\"outputs\":[{\"internalType\":\"contractICrossDomainMessenger\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OTHER_STAKING\",\"outputs\":[{\"internalType\":\"contractStaking\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"blsPubkey\",\"type\":\"bytes\"}],\"name\":\"blsKeys\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"claimSlashRemaining\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"claimWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cleanStakerStore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"deleteList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"deleteableHeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasLimitAddStaker\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasLimitRemoveStakers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"}],\"name\":\"getStakerBitmap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bitmap\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakers\",\"outputs\":[{\"internalType\":\"address[255]\",\"name\":\"\",\"type\":\"address[255]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_stakers\",\"type\":\"address[]\"}],\"name\":\"getStakersBitmap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bitmap\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bitmap\",\"type\":\"uint256\"}],\"name\":\"getStakersFromBitmap\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"stakerAddrs\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rollupContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stakingValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockBlocks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_gasLimitAdd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_gasLimitRemove\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isStaker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isStakerInDeleteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"messenger\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"tmKey\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"blsKey\",\"type\":\"bytes\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"removedList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollupContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sequencersBitmap\",\"type\":\"uint256\"}],\"name\":\"slash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slashRemaining\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakerIndexes\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakerSet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"tmKey\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"blsKey\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"tmPubkey\",\"type\":\"bytes32\"}],\"name\":\"tmKeys\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gasLimitAdd\",\"type\":\"uint256\"}],\"name\":\"updateGasLimitAddStaker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gasLimitRemove\",\"type\":\"uint256\"}],\"name\":\"updateGasLimitRemoveStakers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardPercentage\",\"type\":\"uint256\"}],\"name\":\"updateRewardPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"add\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"remove\",\"type\":\"address[]\"}],\"name\":\"updateWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"verifySignature\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalLockBlocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"withdrawals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60c060405234801562000010575f80fd5b50604051620034f7380380620034f783398101604081905262000033916200005d565b6001600160a01b031660805273530000000000000000000000000000000000001560a0526200008c565b5f602082840312156200006e575f80fd5b81516001600160a01b038116811462000085575f80fd5b9392505050565b60805160a051613426620000d15f395f81816105af01528181612440015261267801525f81816103a60152818161064c01528181612411015261264901526134265ff3fe6080604052600436106102b6575f3560e01c80637a9262a211610170578063ab8c53dc116100d1578063d096c3c611610087578063df15503311610062578063df1550331461082a578063e2a6ad5f14610861578063f2fde38b14610880575f80fd5b8063d096c3c614610797578063d51c90a9146107d4578063dd4785f5146107e9575f80fd5b8063bfa02ba9116100b7578063bfa02ba91461073a578063c7cd469a14610759578063cde4cd1114610778575f80fd5b8063ab8c53dc14610706578063ae81de531461071b575f80fd5b8063927ede2d116101265780639d48f4171161010c5780639d48f4171461069c578063a3066aab146106c8578063a4f209b0146106e7575f80fd5b8063927ede2d1461063b5780639b19251a1461066e575f80fd5b80638a565ac3116101565780638a565ac3146105d15780638da5cb5b146105f05780639168ae721461060d575f80fd5b80637a9262a214610572578063831cfb581461059e575f80fd5b806345bc4d101161021a5780636f1e8533116101d057806374fe27b7116101b657806374fe27b7146104f2578063797adbde146105185780637a4e87c314610537575f80fd5b80636f1e8533146104bf578063715018a6146104de575f80fd5b80634d64903a116102005780634d64903a1461046657806352d472eb1461047b578063692c565b14610490575f80fd5b806345bc4d101461042857806345ff4c8014610447575f80fd5b80633cb747bf1161026f5780633ee2a1f9116102555780633ee2a1f9146103de57806341de239b146103f257806343352d6114610407575f80fd5b80633cb747bf146103985780633ccfd60b146103ca575f80fd5b80632e407a6f1161029f5780632e407a6f146102f7578063303afb9e146103235780633a9bbede1461035a575f80fd5b80632108db35146102ba5780632a28e5a3146102e2575b5f80fd5b3480156102c5575f80fd5b506102cf609c5481565b6040519081526020015b60405180910390f35b6102f56102f0366004612c74565b61089f565b005b348015610302575f80fd5b506102cf610311366004612cce565b6101a16020525f908152604090205481565b34801561032e575f80fd5b5061034261033d366004612cee565b610c9a565b6040516001600160a01b0390911681526020016102d9565b348015610365575f80fd5b50610388610374366004612cce565b609f6020525f908152604090205460ff1681565b60405190151581526020016102d9565b3480156103a3575f80fd5b507f0000000000000000000000000000000000000000000000000000000000000000610342565b3480156103d5575f80fd5b506102f5610cb9565b3480156103e9575f80fd5b506102f5610ee9565b3480156103fd575f80fd5b506102cf60995481565b348015610412575f80fd5b5061041b61117c565b6040516102d99190612d05565b348015610433575f80fd5b506102cf610442366004612cee565b6111c2565b348015610452575f80fd5b506102f5610461366004612d3f565b6114d5565b348015610471575f80fd5b506102cf60985481565b348015610486575f80fd5b506102cf609a5481565b34801561049b575f80fd5b506103886104aa366004612cee565b6101a46020525f908152604090205460ff1681565b3480156104ca575f80fd5b506103886104d9366004612cce565b611941565b3480156104e9575f80fd5b506102f56119ba565b3480156104fd575f80fd5b5061038861050c366004612dcd565b60019695505050505050565b348015610523575f80fd5b50610342610532366004612cee565b6119cd565b348015610542575f80fd5b50610388610551366004612e73565b80516020818301810180516101a38252928201919093012091525460ff1681565b34801561057d575f80fd5b506102cf61058c366004612cce565b6101a56020525f908152604090205481565b3480156105a9575f80fd5b506103427f000000000000000000000000000000000000000000000000000000000000000081565b3480156105dc575f80fd5b506102f56105eb366004612cee565b6119f6565b3480156105fb575f80fd5b506033546001600160a01b0316610342565b348015610618575f80fd5b5061062c610627366004612cce565b611aa1565b6040516102d993929190612f18565b348015610646575f80fd5b506103427f000000000000000000000000000000000000000000000000000000000000000081565b348015610679575f80fd5b50610388610688366004612cce565b609e6020525f908152604090205460ff1681565b3480156106a7575f80fd5b506106bb6106b6366004612cee565b611b54565b6040516102d99190612f48565b3480156106d3575f80fd5b506102f56106e2366004612cce565b611c64565b3480156106f2575f80fd5b506102f5610701366004612cee565b611ddf565b348015610711575f80fd5b506102cf609d5481565b348015610726575f80fd5b506102f5610735366004612cee565b611e8f565b348015610745575f80fd5b50609754610342906001600160a01b031681565b348015610764575f80fd5b506102f5610773366004612f94565b611f32565b348015610783575f80fd5b506102f5610792366004612cce565b6120d3565b3480156107a2575f80fd5b506102cf6107b1366004612cce565b6001600160a01b03165f90815261019f6020526040902054600160ff9091161b90565b3480156107df575f80fd5b506102cf609b5481565b3480156107f4575f80fd5b50610818610803366004612cce565b61019f6020525f908152604090205460ff1681565b60405160ff90911681526020016102d9565b348015610835575f80fd5b50610388610844366004612cce565b6001600160a01b03165f9081526101a16020526040902054151590565b34801561086c575f80fd5b506102cf61087b366004612ffb565b612141565b34801561088b575f80fd5b506102f561089a366004612cce565b612274565b335f818152609e602052604090205460ff166109025760405162461bcd60e51b815260206004820152601060248201527f6e6f7420696e2077686974656c6973740000000000000000000000000000000060448201526064015b60405180910390fd5b335f9081526101a260205260409020546001600160a01b0316156109685760405162461bcd60e51b815260206004820152601260248201527f616c72656164792072656769737465726564000000000000000000000000000060448201526064016108f9565b821580159061098657505f8381526101a4602052604090205460ff16155b6109d25760405162461bcd60e51b815260206004820152601960248201527f696e76616c69642074656e6465726d696e74207075626b65790000000000000060448201526064016108f9565b8151610100148015610a0557506101a3826040516109f0919061303a565b9081526040519081900360200190205460ff16155b610a515760405162461bcd60e51b815260206004820152601260248201527f696e76616c696420626c73207075626b6579000000000000000000000000000060448201526064016108f9565b6098543414610aa25760405162461bcd60e51b815260206004820152601560248201527f696e76616c6964207374616b696e672076616c7565000000000000000000000060448201526064016108f9565b6040518060600160405280610ab43390565b6001600160a01b03908116825260208083018790526040928301869052335f9081526101a28252839020845181547fffffffffffffffffffffffff00000000000000000000000000000000000000001693169290921782558301516001820155908201516002820190610b2790826130ea565b50905050610b3a610b353390565b612301565b60016101a383604051610b4d919061303a565b90815260408051918290036020908101909220805493151560ff199485161790555f8681526101a49092529020805490911660011790557fb9c7babb56df9f2da4a30811a6c778e4e68af88b72712d56cf62c5516e20e199610bac3390565b8484604051610bbd93929190612f18565b60405180910390a1335f9081526101a26020908152604091829020825160608101845281546001600160a01b03168152600182015492810192909252600281018054610c959484019190610c1090613055565b80601f0160208091040260200160405190810160405280929190818152602001828054610c3c90613055565b8015610c875780601f10610c5e57610100808354040283529160200191610c87565b820191905f5260205f20905b815481529060010190602001808311610c6a57829003601f168201915b50505050508152505061240f565b505050565b60a08160ff8110610ca9575f80fd5b01546001600160a01b0316905081565b610cc233611941565b610d0e5760405162461bcd60e51b815260206004820152600b60248201527f6f6e6c79207374616b657200000000000000000000000000000000000000000060448201526064016108f9565b335f9081526101a5602052604090205415610d6b5760405162461bcd60e51b815260206004820152600b60248201527f7769746864726177696e6700000000000000000000000000000000000000000060448201526064016108f9565b610d7433610844565b15610dc15760405162461bcd60e51b815260206004820152601160248201527f7374616b657220697320736c617368656400000000000000000000000000000060448201526064016108f9565b609954610dce9043613233565b335f8181526101a56020526040902091909155610dea90612555565b335f8181526101a560209081526040918290205491519182527f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5910160405180910390a26040805160018082528183019092525f916020808301908036833701905050905033815f81518110610e6257610e62613246565b6001600160a01b0392909216602092830291909101820152335f908152609e82526040808220805460ff19908116909155609f909352908190208054909216600117909155517f3f446646c03e618be8238a586960d6d625f35c653cdca1ef59609993e8ed2c8490610ed5908390612f48565b60405180910390a1610ee681612647565b50565b610ef161275d565b5f5b6101a054811015610ee657436101a15f6101a08481548110610f1757610f17613246565b5f9182526020808320909101546001600160a01b03168352820192909252604001902054116111745760a0600161019f5f6101a08581548110610f5c57610f5c613246565b5f9182526020808320909101546001600160a01b03168352820192909252604001902054610f8d919060ff16613273565b60ff1660ff8110610fa057610fa0613246565b0180547fffffffffffffffffffffffff00000000000000000000000000000000000000001690556101a0805461019f915f9184908110610fe257610fe2613246565b5f9182526020808320909101546001600160a01b031683528201929092526040018120805460ff191690556101a080546101a19291908490811061102857611028613246565b5f9182526020808320909101546001600160a01b031683528201929092526040018120556101a0805461105d9060019061328c565b8154811061106d5761106d613246565b5f918252602090912001546101a080546001600160a01b03909216918390811061109957611099613246565b905f5260205f20015f6101000a8154816001600160a01b0302191690836001600160a01b031602179055506101a08054806110d6576110d661329f565b600190038181905f5260205f20015f6101000a8154906001600160a01b03021916905590556101a25f6101a0838154811061111357611113613246565b5f9182526020808320909101546001600160a01b03168352820192909252604001812080547fffffffffffffffffffffffff000000000000000000000000000000000000000016815560018101829055906111716002830182612b32565b50505b600101610ef3565b611184612b69565b60408051611fe08101918290529060a09060ff9082845b81546001600160a01b0316815260019091019060200180831161119b575050505050905090565b6097545f906001600160a01b0316336001600160a01b0316146112275760405162461bcd60e51b815260206004820152601460248201527f6f6e6c7920726f6c6c757020636f6e747261637400000000000000000000000060448201526064016108f9565b61122f6127b7565b5f61123983611b54565b90505f805b82518110156113f8575f6101a55f85848151811061125e5761125e613246565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020015f205411156112e1576101a55f8483815181106112a2576112a2613246565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020015f205f9055609854826112da9190613233565b91506113f0565b61131b8382815181106112f6576112f6613246565b60200260200101516001600160a01b03165f9081526101a16020526040902054151590565b6113f05760985461132c9083613233565b915061135083828151811061134357611343613246565b6020026020010151612555565b609e5f84838151811061136557611365613246565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020015f205f6101000a81549060ff02191690556001609f5f8584815181106113b2576113b2613246565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020015f205f6101000a81548160ff0219169083151502179055505b60010161123e565b505f6064609a548361140a91906132cc565b61141491906132e3565b9050611420818361328c565b609d5f8282546114309190613233565b909155505060975461144b906001600160a01b031682612810565b7f654f4a61849f1b3ad10abb283d27f02d5fece7b820acc5a3b874713b58748b5a8360405161147a9190612f48565b60405180910390a17f3f446646c03e618be8238a586960d6d625f35c653cdca1ef59609993e8ed2c84836040516114b19190612f48565b60405180910390a16114c283612647565b925050506114d06001606555565b919050565b5f54610100900460ff16158080156114f357505f54600160ff909116105b8061150c5750303b15801561150c57505f5460ff166001145b61157e5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016108f9565b5f805460ff1916600117905580156115bc575f80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b6001600160a01b0387166116125760405162461bcd60e51b815260206004820152601760248201527f696e76616c696420726f6c6c757020636f6e747261637400000000000000000060448201526064016108f9565b5f86116116615760405162461bcd60e51b815260206004820152601560248201527f696e76616c6964207374616b696e672076616c7565000000000000000000000060448201526064016108f9565b5f85116116b05760405162461bcd60e51b815260206004820152601e60248201527f696e76616c6964207769746864726177616c206c6f636b20626c6f636b73000060448201526064016108f9565b5f83116116ff5760405162461bcd60e51b815260206004820152601c60248201527f696e76616c696420676173206c696d697420616464207374616b65720000000060448201526064016108f9565b5f821161174e5760405162461bcd60e51b815260206004820181905260248201527f696e76616c696420676173206c696d69742072656d6f7665207374616b65727360448201526064016108f9565b5f8411801561175e575060648411155b6117cf5760405162461bcd60e51b8152602060048201526024808201527f696e76616c6964206368616c6c656e676572207265776172642070657263656e60448201527f746167650000000000000000000000000000000000000000000000000000000060648201526084016108f9565b6117d76128c0565b6117df612944565b609780547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b038916179055609a84905560988690556099859055609b839055609c829055604080515f8152602081018590527f0ef80fb82bf5439b8591744c0fde771f5d93dce7a7970b1e9b7828cdc3970e9c910160405180910390a1604080515f8152602081018490527fdd4b37d1f14888147fe4be2cfaedcbf148fd07ececc856d0433241b8b6e4a7f7910160405180910390a1604080515f8152602081018690527fa46de936426e045703b2d34a292a19fde92b329018db8e0da750033876b655ba910160405180910390a18015611938575f80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050505050565b6001600160a01b0381165f90815261019f602052604081205460ff16810361196a57505f919050565b6001600160a01b0382165f81815261019f602052604090205460a0906119959060019060ff16613273565b60ff1660ff81106119a8576119a8613246565b01546001600160a01b03161492915050565b6119c261275d565b6119cb5f6129c8565b565b6101a081815481106119dd575f80fd5b5f918252602090912001546001600160a01b0316905081565b6119fe61275d565b5f81118015611a0f5750609c548114155b611a5b5760405162461bcd60e51b815260206004820152601560248201527f696e76616c6964206e657720676173206c696d6974000000000000000000000060448201526064016108f9565b609c80549082905560408051828152602081018490527fdd4b37d1f14888147fe4be2cfaedcbf148fd07ececc856d0433241b8b6e4a7f791015b60405180910390a15050565b6101a26020525f90815260409020805460018201546002830180546001600160a01b03909316939192611ad390613055565b80601f0160208091040260200160405190810160405280929190818152602001828054611aff90613055565b8015611b4a5780601f10611b2157610100808354040283529160200191611b4a565b820191905f5260205f20905b815481529060010190602001808311611b2d57829003601f168201915b5050505050905083565b6060815f5b8115611b8057611b6a816001613233565b9050611b7760018361328c565b82169150611b59565b8067ffffffffffffffff811115611b9957611b99612ba0565b604051908082528060200260200182016040528015611bc2578160200160208202803683370190505b5092505f60015b60ff8160ff161015611c5b57600160ff82161b861615611c535760a0611bf0600183613273565b60ff1660ff8110611c0357611c03613246565b015485516001600160a01b0390911690869084908110611c2557611c25613246565b6001600160a01b0390921660209283029190910190910152611c48826001613233565b915082821015611c5b575b600101611bc9565b50505050919050565b611c6c6127b7565b335f9081526101a56020526040902054611cc85760405162461bcd60e51b815260206004820152601460248201527f7769746864726177616c206e6f7420657869737400000000000000000000000060448201526064016108f9565b335f9081526101a560205260409020544311611d265760405162461bcd60e51b815260206004820152601160248201527f7769746864726177616c206c6f636b656400000000000000000000000000000060448201526064016108f9565b335f9081526101a5602090815260408083208390556101a2909152812080547fffffffffffffffffffffffff00000000000000000000000000000000000000001681556001810182905590611d7e6002830182612b32565b5050611d873390565b6040516001600160a01b03838116825291909116907f89309c9b2aeaffbdce717113df9427298b20448c05919bf889e05f8c3094254b9060200160405180910390a2611dd581609854612810565b610ee66001606555565b611de761275d565b5f81118015611df7575060648111155b8015611e055750609a548114155b611e515760405162461bcd60e51b815260206004820152601960248201527f696e76616c6964207265776172642070657263656e746167650000000000000060448201526064016108f9565b609a80549082905560408051828152602081018490527fa46de936426e045703b2d34a292a19fde92b329018db8e0da750033876b655ba9101611a95565b611e9761275d565b5f81118015611ea85750609b548114155b611ef45760405162461bcd60e51b815260206004820152601560248201527f696e76616c6964206e657720676173206c696d6974000000000000000000000060448201526064016108f9565b609b80549082905560408051828152602081018490527f0ef80fb82bf5439b8591744c0fde771f5d93dce7a7970b1e9b7828cdc3970e9c9101611a95565b611f3a61275d565b5f5b8381101561203257609f5f868684818110611f5957611f59613246565b9050602002016020810190611f6e9190612cce565b6001600160a01b0316815260208101919091526040015f205460ff1615611fd75760405162461bcd60e51b815260206004820152600f60248201527f696e2072656d6f766564206c697374000000000000000000000000000000000060448201526064016108f9565b6001609e5f878785818110611fee57611fee613246565b90506020020160208101906120039190612cce565b6001600160a01b0316815260208101919091526040015f20805460ff1916911515919091179055600101611f3c565b505f5b8181101561208f57609e5f84848481811061205257612052613246565b90506020020160208101906120679190612cce565b6001600160a01b0316815260208101919091526040015f20805460ff19169055600101612035565b507fe375867e538b40218c1b3db2ccceaf875eb073e38b510449e6088c1539ac8622848484846040516120c59493929190613360565b60405180910390a150505050565b6120db61275d565b6120e36127b7565b609d546120f08282612810565b5f609d55604080516001600160a01b0384168152602081018390527fa1fefb6c5328a92a416e321ed50997303fe7135fd88c28b0592b21ce42b5cdd9910160405180910390a150610ee66001606555565b5f60ff8211156121935760405162461bcd60e51b815260206004820152601c60248201527f7374616b657273206c656e677468206f7574206f6620626f756e64730000000060448201526064016108f9565b5f5b8281101561226c576121c78484838181106121b2576121b2613246565b90506020020160208101906104d99190612cce565b6122135760405162461bcd60e51b815260206004820152600e60248201527f696e76616c6964207374616b657200000000000000000000000000000000000060448201526064016108f9565b61019f5f85858481811061222957612229613246565b905060200201602081019061223e9190612cce565b6001600160a01b0316815260208101919091526040015f2054600160ff90911681901b929092179101612195565b505b92915050565b61227c61275d565b6001600160a01b0381166122f85760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016108f9565b610ee6816129c8565b5f5b60ff8160ff1610156123c6575f60a060ff80841690811061232657612326613246565b01546001600160a01b0316036123be578160a08260ff1660ff811061234d5761234d613246565b0180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b039290921691909117905561238f816001613391565b6001600160a01b03929092165f90815261019f60205260409020805460ff191660ff9093169290921790915550565b600101612303565b5060405162461bcd60e51b815260206004820152600960248201527f736c6f742066756c6c000000000000000000000000000000000000000000000060448201526064016108f9565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b2267a7b7f00000000000000000000000000000000000000000000000000000000000000005f8460405160240161247191906133aa565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f6d454d5100000000000000000000000000000000000000000000000000000000179052609b5490517fffffffff0000000000000000000000000000000000000000000000000000000060e087901b16815261252594939291906004016133e1565b5f604051808303815f87803b15801561253c575f80fd5b505af115801561254e573d5f803e3d5ffd5b5050505050565b6001600160a01b0381165f9081526101a16020526040902054156125bb5760405162461bcd60e51b815260206004820152601560248201527f616c726561647920696e2064656c6574654c697374000000000000000000000060448201526064016108f9565b6101a080546001810182555f919091527f7980fe0f714a613298681d64b7b8ffa7b148338dd52429f307d72798d5c317c40180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03831617905560995461262b9043613233565b6001600160a01b039091165f9081526101a16020526040902055565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b2267a7b7f00000000000000000000000000000000000000000000000000000000000000005f846040516024016126a99190612f48565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f0be67fcc00000000000000000000000000000000000000000000000000000000179052609c5490517fffffffff0000000000000000000000000000000000000000000000000000000060e087901b16815261252594939291906004016133e1565b6033546001600160a01b031633146119cb5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016108f9565b6002606554036128095760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016108f9565b6002606555565b80156128b5575f826001600160a01b0316826040515f6040518083038185875af1925050503d805f811461285f576040519150601f19603f3d011682016040523d82523d5f602084013e612864565b606091505b5050905080610c955760405162461bcd60e51b815260206004820152601b60248201527f526f6c6c75703a20455448207472616e73666572206661696c6564000000000060448201526064016108f9565b5050565b6001606555565b5f54610100900460ff1661293c5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016108f9565b6119cb612a31565b5f54610100900460ff166129c05760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016108f9565b6119cb612ab6565b603380546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35050565b5f54610100900460ff16612aad5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016108f9565b6119cb336129c8565b5f54610100900460ff166128b95760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016108f9565b508054612b3e90613055565b5f825580601f10612b4d575050565b601f0160209004905f5260205f2090810190610ee69190612b88565b60405180611fe0016040528060ff906020820280368337509192915050565b5b80821115612b9c575f8155600101612b89565b5090565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b5f82601f830112612bdc575f80fd5b813567ffffffffffffffff80821115612bf757612bf7612ba0565b604051601f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908282118183101715612c3d57612c3d612ba0565b81604052838152866020858801011115612c55575f80fd5b836020870160208301375f602085830101528094505050505092915050565b5f8060408385031215612c85575f80fd5b82359150602083013567ffffffffffffffff811115612ca2575f80fd5b612cae85828601612bcd565b9150509250929050565b80356001600160a01b03811681146114d0575f80fd5b5f60208284031215612cde575f80fd5b612ce782612cb8565b9392505050565b5f60208284031215612cfe575f80fd5b5035919050565b611fe0810181835f5b60ff811015612d365781516001600160a01b0316835260209283019290910190600101612d0e565b50505092915050565b5f805f805f8060c08789031215612d54575f80fd5b612d5d87612cb8565b9860208801359850604088013597606081013597506080810135965060a00135945092505050565b5f8083601f840112612d95575f80fd5b50813567ffffffffffffffff811115612dac575f80fd5b6020830191508360208260051b8501011115612dc6575f80fd5b9250929050565b5f805f805f8060808789031215612de2575f80fd5b86359550602087013567ffffffffffffffff80821115612e00575f80fd5b612e0c8a838b01612d85565b9097509550604089013594506060890135915080821115612e2b575f80fd5b818901915089601f830112612e3e575f80fd5b813581811115612e4c575f80fd5b8a6020828501011115612e5d575f80fd5b6020830194508093505050509295509295509295565b5f60208284031215612e83575f80fd5b813567ffffffffffffffff811115612e99575f80fd5b612ea584828501612bcd565b949350505050565b5f5b83811015612ec7578181015183820152602001612eaf565b50505f910152565b5f8151808452612ee6816020860160208601612ead565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6001600160a01b0384168152826020820152606060408201525f612f3f6060830184612ecf565b95945050505050565b602080825282518282018190525f9190848201906040850190845b81811015612f885783516001600160a01b031683529284019291840191600101612f63565b50909695505050505050565b5f805f8060408587031215612fa7575f80fd5b843567ffffffffffffffff80821115612fbe575f80fd5b612fca88838901612d85565b90965094506020870135915080821115612fe2575f80fd5b50612fef87828801612d85565b95989497509550505050565b5f806020838503121561300c575f80fd5b823567ffffffffffffffff811115613022575f80fd5b61302e85828601612d85565b90969095509350505050565b5f825161304b818460208701612ead565b9190910192915050565b600181811c9082168061306957607f821691505b6020821081036130a0577f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b50919050565b601f821115610c9557805f5260205f20601f840160051c810160208510156130cb5750805b601f840160051c820191505b8181101561254e575f81556001016130d7565b815167ffffffffffffffff81111561310457613104612ba0565b613118816131128454613055565b846130a6565b602080601f83116001811461316a575f84156131345750858301515b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600386901b1c1916600185901b1785556131fe565b5f858152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08616915b828110156131b657888601518255948401946001909101908401613197565b50858210156131f257878501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600388901b60f8161c191681555b505060018460011b0185555b505050505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b8082018082111561226e5761226e613206565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b60ff828116828216039081111561226e5761226e613206565b8181038181111561226e5761226e613206565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603160045260245ffd5b808202811582820484141761226e5761226e613206565b5f82613316577f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b500490565b8183525f60208085019450825f5b85811015613355576001600160a01b0361334283612cb8565b1687529582019590820190600101613329565b509495945050505050565b604081525f61337360408301868861331b565b828103602084015261338681858761331b565b979650505050505050565b60ff818116838216019081111561226e5761226e613206565b602081526001600160a01b038251166020820152602082015160408201525f6040830151606080840152612ea56080840182612ecf565b6001600160a01b0385168152836020820152608060408201525f6134086080830185612ecf565b90508260608301529594505050505056fea164736f6c6343000818000a",
}

// L1StakingABI is the input ABI used to generate the binding from.
// Deprecated: Use L1StakingMetaData.ABI instead.
var L1StakingABI = L1StakingMetaData.ABI

// L1StakingBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use L1StakingMetaData.Bin instead.
var L1StakingBin = L1StakingMetaData.Bin

// DeployL1Staking deploys a new Ethereum contract, binding an instance of L1Staking to it.
func DeployL1Staking(auth *bind.TransactOpts, backend bind.ContractBackend, _messenger common.Address) (common.Address, *types.Transaction, *L1Staking, error) {
	parsed, err := L1StakingMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(L1StakingBin), backend, _messenger)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &L1Staking{L1StakingCaller: L1StakingCaller{contract: contract}, L1StakingTransactor: L1StakingTransactor{contract: contract}, L1StakingFilterer: L1StakingFilterer{contract: contract}}, nil
}

// L1Staking is an auto generated Go binding around an Ethereum contract.
type L1Staking struct {
	L1StakingCaller     // Read-only binding to the contract
	L1StakingTransactor // Write-only binding to the contract
	L1StakingFilterer   // Log filterer for contract events
}

// L1StakingCaller is an auto generated read-only Go binding around an Ethereum contract.
type L1StakingCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// L1StakingTransactor is an auto generated write-only Go binding around an Ethereum contract.
type L1StakingTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// L1StakingFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type L1StakingFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// L1StakingSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type L1StakingSession struct {
	Contract     *L1Staking        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// L1StakingCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type L1StakingCallerSession struct {
	Contract *L1StakingCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// L1StakingTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type L1StakingTransactorSession struct {
	Contract     *L1StakingTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// L1StakingRaw is an auto generated low-level Go binding around an Ethereum contract.
type L1StakingRaw struct {
	Contract *L1Staking // Generic contract binding to access the raw methods on
}

// L1StakingCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type L1StakingCallerRaw struct {
	Contract *L1StakingCaller // Generic read-only contract binding to access the raw methods on
}

// L1StakingTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type L1StakingTransactorRaw struct {
	Contract *L1StakingTransactor // Generic write-only contract binding to access the raw methods on
}

// NewL1Staking creates a new instance of L1Staking, bound to a specific deployed contract.
func NewL1Staking(address common.Address, backend bind.ContractBackend) (*L1Staking, error) {
	contract, err := bindL1Staking(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &L1Staking{L1StakingCaller: L1StakingCaller{contract: contract}, L1StakingTransactor: L1StakingTransactor{contract: contract}, L1StakingFilterer: L1StakingFilterer{contract: contract}}, nil
}

// NewL1StakingCaller creates a new read-only instance of L1Staking, bound to a specific deployed contract.
func NewL1StakingCaller(address common.Address, caller bind.ContractCaller) (*L1StakingCaller, error) {
	contract, err := bindL1Staking(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &L1StakingCaller{contract: contract}, nil
}

// NewL1StakingTransactor creates a new write-only instance of L1Staking, bound to a specific deployed contract.
func NewL1StakingTransactor(address common.Address, transactor bind.ContractTransactor) (*L1StakingTransactor, error) {
	contract, err := bindL1Staking(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &L1StakingTransactor{contract: contract}, nil
}

// NewL1StakingFilterer creates a new log filterer instance of L1Staking, bound to a specific deployed contract.
func NewL1StakingFilterer(address common.Address, filterer bind.ContractFilterer) (*L1StakingFilterer, error) {
	contract, err := bindL1Staking(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &L1StakingFilterer{contract: contract}, nil
}

// bindL1Staking binds a generic wrapper to an already deployed contract.
func bindL1Staking(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := L1StakingMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_L1Staking *L1StakingRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _L1Staking.Contract.L1StakingCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_L1Staking *L1StakingRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _L1Staking.Contract.L1StakingTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_L1Staking *L1StakingRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _L1Staking.Contract.L1StakingTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_L1Staking *L1StakingCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _L1Staking.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_L1Staking *L1StakingTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _L1Staking.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_L1Staking *L1StakingTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _L1Staking.Contract.contract.Transact(opts, method, params...)
}

// MESSENGER is a free data retrieval call binding the contract method 0x927ede2d.
//
// Solidity: function MESSENGER() view returns(address)
func (_L1Staking *L1StakingCaller) MESSENGER(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _L1Staking.contract.Call(opts, &out, "MESSENGER")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// MESSENGER is a free data retrieval call binding the contract method 0x927ede2d.
//
// Solidity: function MESSENGER() view returns(address)
func (_L1Staking *L1StakingSession) MESSENGER() (common.Address, error) {
	return _L1Staking.Contract.MESSENGER(&_L1Staking.CallOpts)
}

// MESSENGER is a free data retrieval call binding the contract method 0x927ede2d.
//
// Solidity: function MESSENGER() view returns(address)
func (_L1Staking *L1StakingCallerSession) MESSENGER() (common.Address, error) {
	return _L1Staking.Contract.MESSENGER(&_L1Staking.CallOpts)
}

// OTHERSTAKING is a free data retrieval call binding the contract method 0x831cfb58.
//
// Solidity: function OTHER_STAKING() view returns(address)
func (_L1Staking *L1StakingCaller) OTHERSTAKING(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _L1Staking.contract.Call(opts, &out, "OTHER_STAKING")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OTHERSTAKING is a free data retrieval call binding the contract method 0x831cfb58.
//
// Solidity: function OTHER_STAKING() view returns(address)
func (_L1Staking *L1StakingSession) OTHERSTAKING() (common.Address, error) {
	return _L1Staking.Contract.OTHERSTAKING(&_L1Staking.CallOpts)
}

// OTHERSTAKING is a free data retrieval call binding the contract method 0x831cfb58.
//
// Solidity: function OTHER_STAKING() view returns(address)
func (_L1Staking *L1StakingCallerSession) OTHERSTAKING() (common.Address, error) {
	return _L1Staking.Contract.OTHERSTAKING(&_L1Staking.CallOpts)
}

// BlsKeys is a free data retrieval call binding the contract method 0x7a4e87c3.
//
// Solidity: function blsKeys(bytes blsPubkey) view returns(bool)
func (_L1Staking *L1StakingCaller) BlsKeys(opts *bind.CallOpts, blsPubkey []byte) (bool, error) {
	var out []interface{}
	err := _L1Staking.contract.Call(opts, &out, "blsKeys", blsPubkey)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// BlsKeys is a free data retrieval call binding the contract method 0x7a4e87c3.
//
// Solidity: function blsKeys(bytes blsPubkey) view returns(bool)
func (_L1Staking *L1StakingSession) BlsKeys(blsPubkey []byte) (bool, error) {
	return _L1Staking.Contract.BlsKeys(&_L1Staking.CallOpts, blsPubkey)
}

// BlsKeys is a free data retrieval call binding the contract method 0x7a4e87c3.
//
// Solidity: function blsKeys(bytes blsPubkey) view returns(bool)
func (_L1Staking *L1StakingCallerSession) BlsKeys(blsPubkey []byte) (bool, error) {
	return _L1Staking.Contract.BlsKeys(&_L1Staking.CallOpts, blsPubkey)
}

// DeleteList is a free data retrieval call binding the contract method 0x797adbde.
//
// Solidity: function deleteList(uint256 ) view returns(address)
func (_L1Staking *L1StakingCaller) DeleteList(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _L1Staking.contract.Call(opts, &out, "deleteList", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// DeleteList is a free data retrieval call binding the contract method 0x797adbde.
//
// Solidity: function deleteList(uint256 ) view returns(address)
func (_L1Staking *L1StakingSession) DeleteList(arg0 *big.Int) (common.Address, error) {
	return _L1Staking.Contract.DeleteList(&_L1Staking.CallOpts, arg0)
}

// DeleteList is a free data retrieval call binding the contract method 0x797adbde.
//
// Solidity: function deleteList(uint256 ) view returns(address)
func (_L1Staking *L1StakingCallerSession) DeleteList(arg0 *big.Int) (common.Address, error) {
	return _L1Staking.Contract.DeleteList(&_L1Staking.CallOpts, arg0)
}

// DeleteableHeight is a free data retrieval call binding the contract method 0x2e407a6f.
//
// Solidity: function deleteableHeight(address ) view returns(uint256)
func (_L1Staking *L1StakingCaller) DeleteableHeight(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _L1Staking.contract.Call(opts, &out, "deleteableHeight", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// DeleteableHeight is a free data retrieval call binding the contract method 0x2e407a6f.
//
// Solidity: function deleteableHeight(address ) view returns(uint256)
func (_L1Staking *L1StakingSession) DeleteableHeight(arg0 common.Address) (*big.Int, error) {
	return _L1Staking.Contract.DeleteableHeight(&_L1Staking.CallOpts, arg0)
}

// DeleteableHeight is a free data retrieval call binding the contract method 0x2e407a6f.
//
// Solidity: function deleteableHeight(address ) view returns(uint256)
func (_L1Staking *L1StakingCallerSession) DeleteableHeight(arg0 common.Address) (*big.Int, error) {
	return _L1Staking.Contract.DeleteableHeight(&_L1Staking.CallOpts, arg0)
}

// GasLimitAddStaker is a free data retrieval call binding the contract method 0xd51c90a9.
//
// Solidity: function gasLimitAddStaker() view returns(uint256)
func (_L1Staking *L1StakingCaller) GasLimitAddStaker(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _L1Staking.contract.Call(opts, &out, "gasLimitAddStaker")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GasLimitAddStaker is a free data retrieval call binding the contract method 0xd51c90a9.
//
// Solidity: function gasLimitAddStaker() view returns(uint256)
func (_L1Staking *L1StakingSession) GasLimitAddStaker() (*big.Int, error) {
	return _L1Staking.Contract.GasLimitAddStaker(&_L1Staking.CallOpts)
}

// GasLimitAddStaker is a free data retrieval call binding the contract method 0xd51c90a9.
//
// Solidity: function gasLimitAddStaker() view returns(uint256)
func (_L1Staking *L1StakingCallerSession) GasLimitAddStaker() (*big.Int, error) {
	return _L1Staking.Contract.GasLimitAddStaker(&_L1Staking.CallOpts)
}

// GasLimitRemoveStakers is a free data retrieval call binding the contract method 0x2108db35.
//
// Solidity: function gasLimitRemoveStakers() view returns(uint256)
func (_L1Staking *L1StakingCaller) GasLimitRemoveStakers(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _L1Staking.contract.Call(opts, &out, "gasLimitRemoveStakers")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GasLimitRemoveStakers is a free data retrieval call binding the contract method 0x2108db35.
//
// Solidity: function gasLimitRemoveStakers() view returns(uint256)
func (_L1Staking *L1StakingSession) GasLimitRemoveStakers() (*big.Int, error) {
	return _L1Staking.Contract.GasLimitRemoveStakers(&_L1Staking.CallOpts)
}

// GasLimitRemoveStakers is a free data retrieval call binding the contract method 0x2108db35.
//
// Solidity: function gasLimitRemoveStakers() view returns(uint256)
func (_L1Staking *L1StakingCallerSession) GasLimitRemoveStakers() (*big.Int, error) {
	return _L1Staking.Contract.GasLimitRemoveStakers(&_L1Staking.CallOpts)
}

// GetStakerBitmap is a free data retrieval call binding the contract method 0xd096c3c6.
//
// Solidity: function getStakerBitmap(address _staker) view returns(uint256 bitmap)
func (_L1Staking *L1StakingCaller) GetStakerBitmap(opts *bind.CallOpts, _staker common.Address) (*big.Int, error) {
	var out []interface{}
	err := _L1Staking.contract.Call(opts, &out, "getStakerBitmap", _staker)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetStakerBitmap is a free data retrieval call binding the contract method 0xd096c3c6.
//
// Solidity: function getStakerBitmap(address _staker) view returns(uint256 bitmap)
func (_L1Staking *L1StakingSession) GetStakerBitmap(_staker common.Address) (*big.Int, error) {
	return _L1Staking.Contract.GetStakerBitmap(&_L1Staking.CallOpts, _staker)
}

// GetStakerBitmap is a free data retrieval call binding the contract method 0xd096c3c6.
//
// Solidity: function getStakerBitmap(address _staker) view returns(uint256 bitmap)
func (_L1Staking *L1StakingCallerSession) GetStakerBitmap(_staker common.Address) (*big.Int, error) {
	return _L1Staking.Contract.GetStakerBitmap(&_L1Staking.CallOpts, _staker)
}

// GetStakers is a free data retrieval call binding the contract method 0x43352d61.
//
// Solidity: function getStakers() view returns(address[255])
func (_L1Staking *L1StakingCaller) GetStakers(opts *bind.CallOpts) ([255]common.Address, error) {
	var out []interface{}
	err := _L1Staking.contract.Call(opts, &out, "getStakers")

	if err != nil {
		return *new([255]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([255]common.Address)).(*[255]common.Address)

	return out0, err

}

// GetStakers is a free data retrieval call binding the contract method 0x43352d61.
//
// Solidity: function getStakers() view returns(address[255])
func (_L1Staking *L1StakingSession) GetStakers() ([255]common.Address, error) {
	return _L1Staking.Contract.GetStakers(&_L1Staking.CallOpts)
}

// GetStakers is a free data retrieval call binding the contract method 0x43352d61.
//
// Solidity: function getStakers() view returns(address[255])
func (_L1Staking *L1StakingCallerSession) GetStakers() ([255]common.Address, error) {
	return _L1Staking.Contract.GetStakers(&_L1Staking.CallOpts)
}

// GetStakersBitmap is a free data retrieval call binding the contract method 0xe2a6ad5f.
//
// Solidity: function getStakersBitmap(address[] _stakers) view returns(uint256 bitmap)
func (_L1Staking *L1StakingCaller) GetStakersBitmap(opts *bind.CallOpts, _stakers []common.Address) (*big.Int, error) {
	var out []interface{}
	err := _L1Staking.contract.Call(opts, &out, "getStakersBitmap", _stakers)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetStakersBitmap is a free data retrieval call binding the contract method 0xe2a6ad5f.
//
// Solidity: function getStakersBitmap(address[] _stakers) view returns(uint256 bitmap)
func (_L1Staking *L1StakingSession) GetStakersBitmap(_stakers []common.Address) (*big.Int, error) {
	return _L1Staking.Contract.GetStakersBitmap(&_L1Staking.CallOpts, _stakers)
}

// GetStakersBitmap is a free data retrieval call binding the contract method 0xe2a6ad5f.
//
// Solidity: function getStakersBitmap(address[] _stakers) view returns(uint256 bitmap)
func (_L1Staking *L1StakingCallerSession) GetStakersBitmap(_stakers []common.Address) (*big.Int, error) {
	return _L1Staking.Contract.GetStakersBitmap(&_L1Staking.CallOpts, _stakers)
}

// GetStakersFromBitmap is a free data retrieval call binding the contract method 0x9d48f417.
//
// Solidity: function getStakersFromBitmap(uint256 bitmap) view returns(address[] stakerAddrs)
func (_L1Staking *L1StakingCaller) GetStakersFromBitmap(opts *bind.CallOpts, bitmap *big.Int) ([]common.Address, error) {
	var out []interface{}
	err := _L1Staking.contract.Call(opts, &out, "getStakersFromBitmap", bitmap)

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetStakersFromBitmap is a free data retrieval call binding the contract method 0x9d48f417.
//
// Solidity: function getStakersFromBitmap(uint256 bitmap) view returns(address[] stakerAddrs)
func (_L1Staking *L1StakingSession) GetStakersFromBitmap(bitmap *big.Int) ([]common.Address, error) {
	return _L1Staking.Contract.GetStakersFromBitmap(&_L1Staking.CallOpts, bitmap)
}

// GetStakersFromBitmap is a free data retrieval call binding the contract method 0x9d48f417.
//
// Solidity: function getStakersFromBitmap(uint256 bitmap) view returns(address[] stakerAddrs)
func (_L1Staking *L1StakingCallerSession) GetStakersFromBitmap(bitmap *big.Int) ([]common.Address, error) {
	return _L1Staking.Contract.GetStakersFromBitmap(&_L1Staking.CallOpts, bitmap)
}

// IsStaker is a free data retrieval call binding the contract method 0x6f1e8533.
//
// Solidity: function isStaker(address addr) view returns(bool)
func (_L1Staking *L1StakingCaller) IsStaker(opts *bind.CallOpts, addr common.Address) (bool, error) {
	var out []interface{}
	err := _L1Staking.contract.Call(opts, &out, "isStaker", addr)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsStaker is a free data retrieval call binding the contract method 0x6f1e8533.
//
// Solidity: function isStaker(address addr) view returns(bool)
func (_L1Staking *L1StakingSession) IsStaker(addr common.Address) (bool, error) {
	return _L1Staking.Contract.IsStaker(&_L1Staking.CallOpts, addr)
}

// IsStaker is a free data retrieval call binding the contract method 0x6f1e8533.
//
// Solidity: function isStaker(address addr) view returns(bool)
func (_L1Staking *L1StakingCallerSession) IsStaker(addr common.Address) (bool, error) {
	return _L1Staking.Contract.IsStaker(&_L1Staking.CallOpts, addr)
}

// IsStakerInDeleteList is a free data retrieval call binding the contract method 0xdf155033.
//
// Solidity: function isStakerInDeleteList(address addr) view returns(bool)
func (_L1Staking *L1StakingCaller) IsStakerInDeleteList(opts *bind.CallOpts, addr common.Address) (bool, error) {
	var out []interface{}
	err := _L1Staking.contract.Call(opts, &out, "isStakerInDeleteList", addr)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsStakerInDeleteList is a free data retrieval call binding the contract method 0xdf155033.
//
// Solidity: function isStakerInDeleteList(address addr) view returns(bool)
func (_L1Staking *L1StakingSession) IsStakerInDeleteList(addr common.Address) (bool, error) {
	return _L1Staking.Contract.IsStakerInDeleteList(&_L1Staking.CallOpts, addr)
}

// IsStakerInDeleteList is a free data retrieval call binding the contract method 0xdf155033.
//
// Solidity: function isStakerInDeleteList(address addr) view returns(bool)
func (_L1Staking *L1StakingCallerSession) IsStakerInDeleteList(addr common.Address) (bool, error) {
	return _L1Staking.Contract.IsStakerInDeleteList(&_L1Staking.CallOpts, addr)
}

// Messenger is a free data retrieval call binding the contract method 0x3cb747bf.
//
// Solidity: function messenger() view returns(address)
func (_L1Staking *L1StakingCaller) Messenger(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _L1Staking.contract.Call(opts, &out, "messenger")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Messenger is a free data retrieval call binding the contract method 0x3cb747bf.
//
// Solidity: function messenger() view returns(address)
func (_L1Staking *L1StakingSession) Messenger() (common.Address, error) {
	return _L1Staking.Contract.Messenger(&_L1Staking.CallOpts)
}

// Messenger is a free data retrieval call binding the contract method 0x3cb747bf.
//
// Solidity: function messenger() view returns(address)
func (_L1Staking *L1StakingCallerSession) Messenger() (common.Address, error) {
	return _L1Staking.Contract.Messenger(&_L1Staking.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_L1Staking *L1StakingCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _L1Staking.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_L1Staking *L1StakingSession) Owner() (common.Address, error) {
	return _L1Staking.Contract.Owner(&_L1Staking.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_L1Staking *L1StakingCallerSession) Owner() (common.Address, error) {
	return _L1Staking.Contract.Owner(&_L1Staking.CallOpts)
}

// RemovedList is a free data retrieval call binding the contract method 0x3a9bbede.
//
// Solidity: function removedList(address ) view returns(bool)
func (_L1Staking *L1StakingCaller) RemovedList(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _L1Staking.contract.Call(opts, &out, "removedList", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// RemovedList is a free data retrieval call binding the contract method 0x3a9bbede.
//
// Solidity: function removedList(address ) view returns(bool)
func (_L1Staking *L1StakingSession) RemovedList(arg0 common.Address) (bool, error) {
	return _L1Staking.Contract.RemovedList(&_L1Staking.CallOpts, arg0)
}

// RemovedList is a free data retrieval call binding the contract method 0x3a9bbede.
//
// Solidity: function removedList(address ) view returns(bool)
func (_L1Staking *L1StakingCallerSession) RemovedList(arg0 common.Address) (bool, error) {
	return _L1Staking.Contract.RemovedList(&_L1Staking.CallOpts, arg0)
}

// RewardPercentage is a free data retrieval call binding the contract method 0x52d472eb.
//
// Solidity: function rewardPercentage() view returns(uint256)
func (_L1Staking *L1StakingCaller) RewardPercentage(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _L1Staking.contract.Call(opts, &out, "rewardPercentage")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RewardPercentage is a free data retrieval call binding the contract method 0x52d472eb.
//
// Solidity: function rewardPercentage() view returns(uint256)
func (_L1Staking *L1StakingSession) RewardPercentage() (*big.Int, error) {
	return _L1Staking.Contract.RewardPercentage(&_L1Staking.CallOpts)
}

// RewardPercentage is a free data retrieval call binding the contract method 0x52d472eb.
//
// Solidity: function rewardPercentage() view returns(uint256)
func (_L1Staking *L1StakingCallerSession) RewardPercentage() (*big.Int, error) {
	return _L1Staking.Contract.RewardPercentage(&_L1Staking.CallOpts)
}

// RollupContract is a free data retrieval call binding the contract method 0xbfa02ba9.
//
// Solidity: function rollupContract() view returns(address)
func (_L1Staking *L1StakingCaller) RollupContract(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _L1Staking.contract.Call(opts, &out, "rollupContract")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RollupContract is a free data retrieval call binding the contract method 0xbfa02ba9.
//
// Solidity: function rollupContract() view returns(address)
func (_L1Staking *L1StakingSession) RollupContract() (common.Address, error) {
	return _L1Staking.Contract.RollupContract(&_L1Staking.CallOpts)
}

// RollupContract is a free data retrieval call binding the contract method 0xbfa02ba9.
//
// Solidity: function rollupContract() view returns(address)
func (_L1Staking *L1StakingCallerSession) RollupContract() (common.Address, error) {
	return _L1Staking.Contract.RollupContract(&_L1Staking.CallOpts)
}

// SlashRemaining is a free data retrieval call binding the contract method 0xab8c53dc.
//
// Solidity: function slashRemaining() view returns(uint256)
func (_L1Staking *L1StakingCaller) SlashRemaining(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _L1Staking.contract.Call(opts, &out, "slashRemaining")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SlashRemaining is a free data retrieval call binding the contract method 0xab8c53dc.
//
// Solidity: function slashRemaining() view returns(uint256)
func (_L1Staking *L1StakingSession) SlashRemaining() (*big.Int, error) {
	return _L1Staking.Contract.SlashRemaining(&_L1Staking.CallOpts)
}

// SlashRemaining is a free data retrieval call binding the contract method 0xab8c53dc.
//
// Solidity: function slashRemaining() view returns(uint256)
func (_L1Staking *L1StakingCallerSession) SlashRemaining() (*big.Int, error) {
	return _L1Staking.Contract.SlashRemaining(&_L1Staking.CallOpts)
}

// StakerIndexes is a free data retrieval call binding the contract method 0xdd4785f5.
//
// Solidity: function stakerIndexes(address ) view returns(uint8)
func (_L1Staking *L1StakingCaller) StakerIndexes(opts *bind.CallOpts, arg0 common.Address) (uint8, error) {
	var out []interface{}
	err := _L1Staking.contract.Call(opts, &out, "stakerIndexes", arg0)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// StakerIndexes is a free data retrieval call binding the contract method 0xdd4785f5.
//
// Solidity: function stakerIndexes(address ) view returns(uint8)
func (_L1Staking *L1StakingSession) StakerIndexes(arg0 common.Address) (uint8, error) {
	return _L1Staking.Contract.StakerIndexes(&_L1Staking.CallOpts, arg0)
}

// StakerIndexes is a free data retrieval call binding the contract method 0xdd4785f5.
//
// Solidity: function stakerIndexes(address ) view returns(uint8)
func (_L1Staking *L1StakingCallerSession) StakerIndexes(arg0 common.Address) (uint8, error) {
	return _L1Staking.Contract.StakerIndexes(&_L1Staking.CallOpts, arg0)
}

// StakerSet is a free data retrieval call binding the contract method 0x303afb9e.
//
// Solidity: function stakerSet(uint256 ) view returns(address)
func (_L1Staking *L1StakingCaller) StakerSet(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _L1Staking.contract.Call(opts, &out, "stakerSet", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// StakerSet is a free data retrieval call binding the contract method 0x303afb9e.
//
// Solidity: function stakerSet(uint256 ) view returns(address)
func (_L1Staking *L1StakingSession) StakerSet(arg0 *big.Int) (common.Address, error) {
	return _L1Staking.Contract.StakerSet(&_L1Staking.CallOpts, arg0)
}

// StakerSet is a free data retrieval call binding the contract method 0x303afb9e.
//
// Solidity: function stakerSet(uint256 ) view returns(address)
func (_L1Staking *L1StakingCallerSession) StakerSet(arg0 *big.Int) (common.Address, error) {
	return _L1Staking.Contract.StakerSet(&_L1Staking.CallOpts, arg0)
}

// Stakers is a free data retrieval call binding the contract method 0x9168ae72.
//
// Solidity: function stakers(address ) view returns(address addr, bytes32 tmKey, bytes blsKey)
func (_L1Staking *L1StakingCaller) Stakers(opts *bind.CallOpts, arg0 common.Address) (struct {
	Addr   common.Address
	TmKey  [32]byte
	BlsKey []byte
}, error) {
	var out []interface{}
	err := _L1Staking.contract.Call(opts, &out, "stakers", arg0)

	outstruct := new(struct {
		Addr   common.Address
		TmKey  [32]byte
		BlsKey []byte
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Addr = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.TmKey = *abi.ConvertType(out[1], new([32]byte)).(*[32]byte)
	outstruct.BlsKey = *abi.ConvertType(out[2], new([]byte)).(*[]byte)

	return *outstruct, err

}

// Stakers is a free data retrieval call binding the contract method 0x9168ae72.
//
// Solidity: function stakers(address ) view returns(address addr, bytes32 tmKey, bytes blsKey)
func (_L1Staking *L1StakingSession) Stakers(arg0 common.Address) (struct {
	Addr   common.Address
	TmKey  [32]byte
	BlsKey []byte
}, error) {
	return _L1Staking.Contract.Stakers(&_L1Staking.CallOpts, arg0)
}

// Stakers is a free data retrieval call binding the contract method 0x9168ae72.
//
// Solidity: function stakers(address ) view returns(address addr, bytes32 tmKey, bytes blsKey)
func (_L1Staking *L1StakingCallerSession) Stakers(arg0 common.Address) (struct {
	Addr   common.Address
	TmKey  [32]byte
	BlsKey []byte
}, error) {
	return _L1Staking.Contract.Stakers(&_L1Staking.CallOpts, arg0)
}

// StakingValue is a free data retrieval call binding the contract method 0x4d64903a.
//
// Solidity: function stakingValue() view returns(uint256)
func (_L1Staking *L1StakingCaller) StakingValue(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _L1Staking.contract.Call(opts, &out, "stakingValue")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// StakingValue is a free data retrieval call binding the contract method 0x4d64903a.
//
// Solidity: function stakingValue() view returns(uint256)
func (_L1Staking *L1StakingSession) StakingValue() (*big.Int, error) {
	return _L1Staking.Contract.StakingValue(&_L1Staking.CallOpts)
}

// StakingValue is a free data retrieval call binding the contract method 0x4d64903a.
//
// Solidity: function stakingValue() view returns(uint256)
func (_L1Staking *L1StakingCallerSession) StakingValue() (*big.Int, error) {
	return _L1Staking.Contract.StakingValue(&_L1Staking.CallOpts)
}

// TmKeys is a free data retrieval call binding the contract method 0x692c565b.
//
// Solidity: function tmKeys(bytes32 tmPubkey) view returns(bool)
func (_L1Staking *L1StakingCaller) TmKeys(opts *bind.CallOpts, tmPubkey [32]byte) (bool, error) {
	var out []interface{}
	err := _L1Staking.contract.Call(opts, &out, "tmKeys", tmPubkey)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// TmKeys is a free data retrieval call binding the contract method 0x692c565b.
//
// Solidity: function tmKeys(bytes32 tmPubkey) view returns(bool)
func (_L1Staking *L1StakingSession) TmKeys(tmPubkey [32]byte) (bool, error) {
	return _L1Staking.Contract.TmKeys(&_L1Staking.CallOpts, tmPubkey)
}

// TmKeys is a free data retrieval call binding the contract method 0x692c565b.
//
// Solidity: function tmKeys(bytes32 tmPubkey) view returns(bool)
func (_L1Staking *L1StakingCallerSession) TmKeys(tmPubkey [32]byte) (bool, error) {
	return _L1Staking.Contract.TmKeys(&_L1Staking.CallOpts, tmPubkey)
}

// VerifySignature is a free data retrieval call binding the contract method 0x74fe27b7.
//
// Solidity: function verifySignature(uint256 , address[] , bytes32 , bytes ) pure returns(bool)
func (_L1Staking *L1StakingCaller) VerifySignature(opts *bind.CallOpts, arg0 *big.Int, arg1 []common.Address, arg2 [32]byte, arg3 []byte) (bool, error) {
	var out []interface{}
	err := _L1Staking.contract.Call(opts, &out, "verifySignature", arg0, arg1, arg2, arg3)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// VerifySignature is a free data retrieval call binding the contract method 0x74fe27b7.
//
// Solidity: function verifySignature(uint256 , address[] , bytes32 , bytes ) pure returns(bool)
func (_L1Staking *L1StakingSession) VerifySignature(arg0 *big.Int, arg1 []common.Address, arg2 [32]byte, arg3 []byte) (bool, error) {
	return _L1Staking.Contract.VerifySignature(&_L1Staking.CallOpts, arg0, arg1, arg2, arg3)
}

// VerifySignature is a free data retrieval call binding the contract method 0x74fe27b7.
//
// Solidity: function verifySignature(uint256 , address[] , bytes32 , bytes ) pure returns(bool)
func (_L1Staking *L1StakingCallerSession) VerifySignature(arg0 *big.Int, arg1 []common.Address, arg2 [32]byte, arg3 []byte) (bool, error) {
	return _L1Staking.Contract.VerifySignature(&_L1Staking.CallOpts, arg0, arg1, arg2, arg3)
}

// Whitelist is a free data retrieval call binding the contract method 0x9b19251a.
//
// Solidity: function whitelist(address ) view returns(bool)
func (_L1Staking *L1StakingCaller) Whitelist(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _L1Staking.contract.Call(opts, &out, "whitelist", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Whitelist is a free data retrieval call binding the contract method 0x9b19251a.
//
// Solidity: function whitelist(address ) view returns(bool)
func (_L1Staking *L1StakingSession) Whitelist(arg0 common.Address) (bool, error) {
	return _L1Staking.Contract.Whitelist(&_L1Staking.CallOpts, arg0)
}

// Whitelist is a free data retrieval call binding the contract method 0x9b19251a.
//
// Solidity: function whitelist(address ) view returns(bool)
func (_L1Staking *L1StakingCallerSession) Whitelist(arg0 common.Address) (bool, error) {
	return _L1Staking.Contract.Whitelist(&_L1Staking.CallOpts, arg0)
}

// WithdrawalLockBlocks is a free data retrieval call binding the contract method 0x41de239b.
//
// Solidity: function withdrawalLockBlocks() view returns(uint256)
func (_L1Staking *L1StakingCaller) WithdrawalLockBlocks(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _L1Staking.contract.Call(opts, &out, "withdrawalLockBlocks")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// WithdrawalLockBlocks is a free data retrieval call binding the contract method 0x41de239b.
//
// Solidity: function withdrawalLockBlocks() view returns(uint256)
func (_L1Staking *L1StakingSession) WithdrawalLockBlocks() (*big.Int, error) {
	return _L1Staking.Contract.WithdrawalLockBlocks(&_L1Staking.CallOpts)
}

// WithdrawalLockBlocks is a free data retrieval call binding the contract method 0x41de239b.
//
// Solidity: function withdrawalLockBlocks() view returns(uint256)
func (_L1Staking *L1StakingCallerSession) WithdrawalLockBlocks() (*big.Int, error) {
	return _L1Staking.Contract.WithdrawalLockBlocks(&_L1Staking.CallOpts)
}

// Withdrawals is a free data retrieval call binding the contract method 0x7a9262a2.
//
// Solidity: function withdrawals(address staker) view returns(uint256)
func (_L1Staking *L1StakingCaller) Withdrawals(opts *bind.CallOpts, staker common.Address) (*big.Int, error) {
	var out []interface{}
	err := _L1Staking.contract.Call(opts, &out, "withdrawals", staker)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Withdrawals is a free data retrieval call binding the contract method 0x7a9262a2.
//
// Solidity: function withdrawals(address staker) view returns(uint256)
func (_L1Staking *L1StakingSession) Withdrawals(staker common.Address) (*big.Int, error) {
	return _L1Staking.Contract.Withdrawals(&_L1Staking.CallOpts, staker)
}

// Withdrawals is a free data retrieval call binding the contract method 0x7a9262a2.
//
// Solidity: function withdrawals(address staker) view returns(uint256)
func (_L1Staking *L1StakingCallerSession) Withdrawals(staker common.Address) (*big.Int, error) {
	return _L1Staking.Contract.Withdrawals(&_L1Staking.CallOpts, staker)
}

// ClaimSlashRemaining is a paid mutator transaction binding the contract method 0xcde4cd11.
//
// Solidity: function claimSlashRemaining(address receiver) returns()
func (_L1Staking *L1StakingTransactor) ClaimSlashRemaining(opts *bind.TransactOpts, receiver common.Address) (*types.Transaction, error) {
	return _L1Staking.contract.Transact(opts, "claimSlashRemaining", receiver)
}

// ClaimSlashRemaining is a paid mutator transaction binding the contract method 0xcde4cd11.
//
// Solidity: function claimSlashRemaining(address receiver) returns()
func (_L1Staking *L1StakingSession) ClaimSlashRemaining(receiver common.Address) (*types.Transaction, error) {
	return _L1Staking.Contract.ClaimSlashRemaining(&_L1Staking.TransactOpts, receiver)
}

// ClaimSlashRemaining is a paid mutator transaction binding the contract method 0xcde4cd11.
//
// Solidity: function claimSlashRemaining(address receiver) returns()
func (_L1Staking *L1StakingTransactorSession) ClaimSlashRemaining(receiver common.Address) (*types.Transaction, error) {
	return _L1Staking.Contract.ClaimSlashRemaining(&_L1Staking.TransactOpts, receiver)
}

// ClaimWithdrawal is a paid mutator transaction binding the contract method 0xa3066aab.
//
// Solidity: function claimWithdrawal(address receiver) returns()
func (_L1Staking *L1StakingTransactor) ClaimWithdrawal(opts *bind.TransactOpts, receiver common.Address) (*types.Transaction, error) {
	return _L1Staking.contract.Transact(opts, "claimWithdrawal", receiver)
}

// ClaimWithdrawal is a paid mutator transaction binding the contract method 0xa3066aab.
//
// Solidity: function claimWithdrawal(address receiver) returns()
func (_L1Staking *L1StakingSession) ClaimWithdrawal(receiver common.Address) (*types.Transaction, error) {
	return _L1Staking.Contract.ClaimWithdrawal(&_L1Staking.TransactOpts, receiver)
}

// ClaimWithdrawal is a paid mutator transaction binding the contract method 0xa3066aab.
//
// Solidity: function claimWithdrawal(address receiver) returns()
func (_L1Staking *L1StakingTransactorSession) ClaimWithdrawal(receiver common.Address) (*types.Transaction, error) {
	return _L1Staking.Contract.ClaimWithdrawal(&_L1Staking.TransactOpts, receiver)
}

// CleanStakerStore is a paid mutator transaction binding the contract method 0x3ee2a1f9.
//
// Solidity: function cleanStakerStore() returns()
func (_L1Staking *L1StakingTransactor) CleanStakerStore(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _L1Staking.contract.Transact(opts, "cleanStakerStore")
}

// CleanStakerStore is a paid mutator transaction binding the contract method 0x3ee2a1f9.
//
// Solidity: function cleanStakerStore() returns()
func (_L1Staking *L1StakingSession) CleanStakerStore() (*types.Transaction, error) {
	return _L1Staking.Contract.CleanStakerStore(&_L1Staking.TransactOpts)
}

// CleanStakerStore is a paid mutator transaction binding the contract method 0x3ee2a1f9.
//
// Solidity: function cleanStakerStore() returns()
func (_L1Staking *L1StakingTransactorSession) CleanStakerStore() (*types.Transaction, error) {
	return _L1Staking.Contract.CleanStakerStore(&_L1Staking.TransactOpts)
}

// Initialize is a paid mutator transaction binding the contract method 0x45ff4c80.
//
// Solidity: function initialize(address _rollupContract, uint256 _stakingValue, uint256 _lockBlocks, uint256 _rewardPercentage, uint256 _gasLimitAdd, uint256 _gasLimitRemove) returns()
func (_L1Staking *L1StakingTransactor) Initialize(opts *bind.TransactOpts, _rollupContract common.Address, _stakingValue *big.Int, _lockBlocks *big.Int, _rewardPercentage *big.Int, _gasLimitAdd *big.Int, _gasLimitRemove *big.Int) (*types.Transaction, error) {
	return _L1Staking.contract.Transact(opts, "initialize", _rollupContract, _stakingValue, _lockBlocks, _rewardPercentage, _gasLimitAdd, _gasLimitRemove)
}

// Initialize is a paid mutator transaction binding the contract method 0x45ff4c80.
//
// Solidity: function initialize(address _rollupContract, uint256 _stakingValue, uint256 _lockBlocks, uint256 _rewardPercentage, uint256 _gasLimitAdd, uint256 _gasLimitRemove) returns()
func (_L1Staking *L1StakingSession) Initialize(_rollupContract common.Address, _stakingValue *big.Int, _lockBlocks *big.Int, _rewardPercentage *big.Int, _gasLimitAdd *big.Int, _gasLimitRemove *big.Int) (*types.Transaction, error) {
	return _L1Staking.Contract.Initialize(&_L1Staking.TransactOpts, _rollupContract, _stakingValue, _lockBlocks, _rewardPercentage, _gasLimitAdd, _gasLimitRemove)
}

// Initialize is a paid mutator transaction binding the contract method 0x45ff4c80.
//
// Solidity: function initialize(address _rollupContract, uint256 _stakingValue, uint256 _lockBlocks, uint256 _rewardPercentage, uint256 _gasLimitAdd, uint256 _gasLimitRemove) returns()
func (_L1Staking *L1StakingTransactorSession) Initialize(_rollupContract common.Address, _stakingValue *big.Int, _lockBlocks *big.Int, _rewardPercentage *big.Int, _gasLimitAdd *big.Int, _gasLimitRemove *big.Int) (*types.Transaction, error) {
	return _L1Staking.Contract.Initialize(&_L1Staking.TransactOpts, _rollupContract, _stakingValue, _lockBlocks, _rewardPercentage, _gasLimitAdd, _gasLimitRemove)
}

// Register is a paid mutator transaction binding the contract method 0x2a28e5a3.
//
// Solidity: function register(bytes32 tmKey, bytes blsKey) payable returns()
func (_L1Staking *L1StakingTransactor) Register(opts *bind.TransactOpts, tmKey [32]byte, blsKey []byte) (*types.Transaction, error) {
	return _L1Staking.contract.Transact(opts, "register", tmKey, blsKey)
}

// Register is a paid mutator transaction binding the contract method 0x2a28e5a3.
//
// Solidity: function register(bytes32 tmKey, bytes blsKey) payable returns()
func (_L1Staking *L1StakingSession) Register(tmKey [32]byte, blsKey []byte) (*types.Transaction, error) {
	return _L1Staking.Contract.Register(&_L1Staking.TransactOpts, tmKey, blsKey)
}

// Register is a paid mutator transaction binding the contract method 0x2a28e5a3.
//
// Solidity: function register(bytes32 tmKey, bytes blsKey) payable returns()
func (_L1Staking *L1StakingTransactorSession) Register(tmKey [32]byte, blsKey []byte) (*types.Transaction, error) {
	return _L1Staking.Contract.Register(&_L1Staking.TransactOpts, tmKey, blsKey)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_L1Staking *L1StakingTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _L1Staking.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_L1Staking *L1StakingSession) RenounceOwnership() (*types.Transaction, error) {
	return _L1Staking.Contract.RenounceOwnership(&_L1Staking.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_L1Staking *L1StakingTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _L1Staking.Contract.RenounceOwnership(&_L1Staking.TransactOpts)
}

// Slash is a paid mutator transaction binding the contract method 0x45bc4d10.
//
// Solidity: function slash(uint256 sequencersBitmap) returns(uint256)
func (_L1Staking *L1StakingTransactor) Slash(opts *bind.TransactOpts, sequencersBitmap *big.Int) (*types.Transaction, error) {
	return _L1Staking.contract.Transact(opts, "slash", sequencersBitmap)
}

// Slash is a paid mutator transaction binding the contract method 0x45bc4d10.
//
// Solidity: function slash(uint256 sequencersBitmap) returns(uint256)
func (_L1Staking *L1StakingSession) Slash(sequencersBitmap *big.Int) (*types.Transaction, error) {
	return _L1Staking.Contract.Slash(&_L1Staking.TransactOpts, sequencersBitmap)
}

// Slash is a paid mutator transaction binding the contract method 0x45bc4d10.
//
// Solidity: function slash(uint256 sequencersBitmap) returns(uint256)
func (_L1Staking *L1StakingTransactorSession) Slash(sequencersBitmap *big.Int) (*types.Transaction, error) {
	return _L1Staking.Contract.Slash(&_L1Staking.TransactOpts, sequencersBitmap)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_L1Staking *L1StakingTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _L1Staking.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_L1Staking *L1StakingSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _L1Staking.Contract.TransferOwnership(&_L1Staking.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_L1Staking *L1StakingTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _L1Staking.Contract.TransferOwnership(&_L1Staking.TransactOpts, newOwner)
}

// UpdateGasLimitAddStaker is a paid mutator transaction binding the contract method 0xae81de53.
//
// Solidity: function updateGasLimitAddStaker(uint256 _gasLimitAdd) returns()
func (_L1Staking *L1StakingTransactor) UpdateGasLimitAddStaker(opts *bind.TransactOpts, _gasLimitAdd *big.Int) (*types.Transaction, error) {
	return _L1Staking.contract.Transact(opts, "updateGasLimitAddStaker", _gasLimitAdd)
}

// UpdateGasLimitAddStaker is a paid mutator transaction binding the contract method 0xae81de53.
//
// Solidity: function updateGasLimitAddStaker(uint256 _gasLimitAdd) returns()
func (_L1Staking *L1StakingSession) UpdateGasLimitAddStaker(_gasLimitAdd *big.Int) (*types.Transaction, error) {
	return _L1Staking.Contract.UpdateGasLimitAddStaker(&_L1Staking.TransactOpts, _gasLimitAdd)
}

// UpdateGasLimitAddStaker is a paid mutator transaction binding the contract method 0xae81de53.
//
// Solidity: function updateGasLimitAddStaker(uint256 _gasLimitAdd) returns()
func (_L1Staking *L1StakingTransactorSession) UpdateGasLimitAddStaker(_gasLimitAdd *big.Int) (*types.Transaction, error) {
	return _L1Staking.Contract.UpdateGasLimitAddStaker(&_L1Staking.TransactOpts, _gasLimitAdd)
}

// UpdateGasLimitRemoveStakers is a paid mutator transaction binding the contract method 0x8a565ac3.
//
// Solidity: function updateGasLimitRemoveStakers(uint256 _gasLimitRemove) returns()
func (_L1Staking *L1StakingTransactor) UpdateGasLimitRemoveStakers(opts *bind.TransactOpts, _gasLimitRemove *big.Int) (*types.Transaction, error) {
	return _L1Staking.contract.Transact(opts, "updateGasLimitRemoveStakers", _gasLimitRemove)
}

// UpdateGasLimitRemoveStakers is a paid mutator transaction binding the contract method 0x8a565ac3.
//
// Solidity: function updateGasLimitRemoveStakers(uint256 _gasLimitRemove) returns()
func (_L1Staking *L1StakingSession) UpdateGasLimitRemoveStakers(_gasLimitRemove *big.Int) (*types.Transaction, error) {
	return _L1Staking.Contract.UpdateGasLimitRemoveStakers(&_L1Staking.TransactOpts, _gasLimitRemove)
}

// UpdateGasLimitRemoveStakers is a paid mutator transaction binding the contract method 0x8a565ac3.
//
// Solidity: function updateGasLimitRemoveStakers(uint256 _gasLimitRemove) returns()
func (_L1Staking *L1StakingTransactorSession) UpdateGasLimitRemoveStakers(_gasLimitRemove *big.Int) (*types.Transaction, error) {
	return _L1Staking.Contract.UpdateGasLimitRemoveStakers(&_L1Staking.TransactOpts, _gasLimitRemove)
}

// UpdateRewardPercentage is a paid mutator transaction binding the contract method 0xa4f209b0.
//
// Solidity: function updateRewardPercentage(uint256 _rewardPercentage) returns()
func (_L1Staking *L1StakingTransactor) UpdateRewardPercentage(opts *bind.TransactOpts, _rewardPercentage *big.Int) (*types.Transaction, error) {
	return _L1Staking.contract.Transact(opts, "updateRewardPercentage", _rewardPercentage)
}

// UpdateRewardPercentage is a paid mutator transaction binding the contract method 0xa4f209b0.
//
// Solidity: function updateRewardPercentage(uint256 _rewardPercentage) returns()
func (_L1Staking *L1StakingSession) UpdateRewardPercentage(_rewardPercentage *big.Int) (*types.Transaction, error) {
	return _L1Staking.Contract.UpdateRewardPercentage(&_L1Staking.TransactOpts, _rewardPercentage)
}

// UpdateRewardPercentage is a paid mutator transaction binding the contract method 0xa4f209b0.
//
// Solidity: function updateRewardPercentage(uint256 _rewardPercentage) returns()
func (_L1Staking *L1StakingTransactorSession) UpdateRewardPercentage(_rewardPercentage *big.Int) (*types.Transaction, error) {
	return _L1Staking.Contract.UpdateRewardPercentage(&_L1Staking.TransactOpts, _rewardPercentage)
}

// UpdateWhitelist is a paid mutator transaction binding the contract method 0xc7cd469a.
//
// Solidity: function updateWhitelist(address[] add, address[] remove) returns()
func (_L1Staking *L1StakingTransactor) UpdateWhitelist(opts *bind.TransactOpts, add []common.Address, remove []common.Address) (*types.Transaction, error) {
	return _L1Staking.contract.Transact(opts, "updateWhitelist", add, remove)
}

// UpdateWhitelist is a paid mutator transaction binding the contract method 0xc7cd469a.
//
// Solidity: function updateWhitelist(address[] add, address[] remove) returns()
func (_L1Staking *L1StakingSession) UpdateWhitelist(add []common.Address, remove []common.Address) (*types.Transaction, error) {
	return _L1Staking.Contract.UpdateWhitelist(&_L1Staking.TransactOpts, add, remove)
}

// UpdateWhitelist is a paid mutator transaction binding the contract method 0xc7cd469a.
//
// Solidity: function updateWhitelist(address[] add, address[] remove) returns()
func (_L1Staking *L1StakingTransactorSession) UpdateWhitelist(add []common.Address, remove []common.Address) (*types.Transaction, error) {
	return _L1Staking.Contract.UpdateWhitelist(&_L1Staking.TransactOpts, add, remove)
}

// Withdraw is a paid mutator transaction binding the contract method 0x3ccfd60b.
//
// Solidity: function withdraw() returns()
func (_L1Staking *L1StakingTransactor) Withdraw(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _L1Staking.contract.Transact(opts, "withdraw")
}

// Withdraw is a paid mutator transaction binding the contract method 0x3ccfd60b.
//
// Solidity: function withdraw() returns()
func (_L1Staking *L1StakingSession) Withdraw() (*types.Transaction, error) {
	return _L1Staking.Contract.Withdraw(&_L1Staking.TransactOpts)
}

// Withdraw is a paid mutator transaction binding the contract method 0x3ccfd60b.
//
// Solidity: function withdraw() returns()
func (_L1Staking *L1StakingTransactorSession) Withdraw() (*types.Transaction, error) {
	return _L1Staking.Contract.Withdraw(&_L1Staking.TransactOpts)
}

// L1StakingClaimedIterator is returned from FilterClaimed and is used to iterate over the raw logs and unpacked data for Claimed events raised by the L1Staking contract.
type L1StakingClaimedIterator struct {
	Event *L1StakingClaimed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *L1StakingClaimedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(L1StakingClaimed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(L1StakingClaimed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *L1StakingClaimedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *L1StakingClaimedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// L1StakingClaimed represents a Claimed event raised by the L1Staking contract.
type L1StakingClaimed struct {
	Staker   common.Address
	Receiver common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterClaimed is a free log retrieval operation binding the contract event 0x89309c9b2aeaffbdce717113df9427298b20448c05919bf889e05f8c3094254b.
//
// Solidity: event Claimed(address indexed staker, address receiver)
func (_L1Staking *L1StakingFilterer) FilterClaimed(opts *bind.FilterOpts, staker []common.Address) (*L1StakingClaimedIterator, error) {

	var stakerRule []interface{}
	for _, stakerItem := range staker {
		stakerRule = append(stakerRule, stakerItem)
	}

	logs, sub, err := _L1Staking.contract.FilterLogs(opts, "Claimed", stakerRule)
	if err != nil {
		return nil, err
	}
	return &L1StakingClaimedIterator{contract: _L1Staking.contract, event: "Claimed", logs: logs, sub: sub}, nil
}

// WatchClaimed is a free log subscription operation binding the contract event 0x89309c9b2aeaffbdce717113df9427298b20448c05919bf889e05f8c3094254b.
//
// Solidity: event Claimed(address indexed staker, address receiver)
func (_L1Staking *L1StakingFilterer) WatchClaimed(opts *bind.WatchOpts, sink chan<- *L1StakingClaimed, staker []common.Address) (event.Subscription, error) {

	var stakerRule []interface{}
	for _, stakerItem := range staker {
		stakerRule = append(stakerRule, stakerItem)
	}

	logs, sub, err := _L1Staking.contract.WatchLogs(opts, "Claimed", stakerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(L1StakingClaimed)
				if err := _L1Staking.contract.UnpackLog(event, "Claimed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseClaimed is a log parse operation binding the contract event 0x89309c9b2aeaffbdce717113df9427298b20448c05919bf889e05f8c3094254b.
//
// Solidity: event Claimed(address indexed staker, address receiver)
func (_L1Staking *L1StakingFilterer) ParseClaimed(log types.Log) (*L1StakingClaimed, error) {
	event := new(L1StakingClaimed)
	if err := _L1Staking.contract.UnpackLog(event, "Claimed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// L1StakingGasLimitAddStakerUpdatedIterator is returned from FilterGasLimitAddStakerUpdated and is used to iterate over the raw logs and unpacked data for GasLimitAddStakerUpdated events raised by the L1Staking contract.
type L1StakingGasLimitAddStakerUpdatedIterator struct {
	Event *L1StakingGasLimitAddStakerUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *L1StakingGasLimitAddStakerUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(L1StakingGasLimitAddStakerUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(L1StakingGasLimitAddStakerUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *L1StakingGasLimitAddStakerUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *L1StakingGasLimitAddStakerUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// L1StakingGasLimitAddStakerUpdated represents a GasLimitAddStakerUpdated event raised by the L1Staking contract.
type L1StakingGasLimitAddStakerUpdated struct {
	OldGasLimit *big.Int
	NewGasLimit *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterGasLimitAddStakerUpdated is a free log retrieval operation binding the contract event 0x0ef80fb82bf5439b8591744c0fde771f5d93dce7a7970b1e9b7828cdc3970e9c.
//
// Solidity: event GasLimitAddStakerUpdated(uint256 oldGasLimit, uint256 newGasLimit)
func (_L1Staking *L1StakingFilterer) FilterGasLimitAddStakerUpdated(opts *bind.FilterOpts) (*L1StakingGasLimitAddStakerUpdatedIterator, error) {

	logs, sub, err := _L1Staking.contract.FilterLogs(opts, "GasLimitAddStakerUpdated")
	if err != nil {
		return nil, err
	}
	return &L1StakingGasLimitAddStakerUpdatedIterator{contract: _L1Staking.contract, event: "GasLimitAddStakerUpdated", logs: logs, sub: sub}, nil
}

// WatchGasLimitAddStakerUpdated is a free log subscription operation binding the contract event 0x0ef80fb82bf5439b8591744c0fde771f5d93dce7a7970b1e9b7828cdc3970e9c.
//
// Solidity: event GasLimitAddStakerUpdated(uint256 oldGasLimit, uint256 newGasLimit)
func (_L1Staking *L1StakingFilterer) WatchGasLimitAddStakerUpdated(opts *bind.WatchOpts, sink chan<- *L1StakingGasLimitAddStakerUpdated) (event.Subscription, error) {

	logs, sub, err := _L1Staking.contract.WatchLogs(opts, "GasLimitAddStakerUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(L1StakingGasLimitAddStakerUpdated)
				if err := _L1Staking.contract.UnpackLog(event, "GasLimitAddStakerUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseGasLimitAddStakerUpdated is a log parse operation binding the contract event 0x0ef80fb82bf5439b8591744c0fde771f5d93dce7a7970b1e9b7828cdc3970e9c.
//
// Solidity: event GasLimitAddStakerUpdated(uint256 oldGasLimit, uint256 newGasLimit)
func (_L1Staking *L1StakingFilterer) ParseGasLimitAddStakerUpdated(log types.Log) (*L1StakingGasLimitAddStakerUpdated, error) {
	event := new(L1StakingGasLimitAddStakerUpdated)
	if err := _L1Staking.contract.UnpackLog(event, "GasLimitAddStakerUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// L1StakingGasLimitRemoveStakersUpdatedIterator is returned from FilterGasLimitRemoveStakersUpdated and is used to iterate over the raw logs and unpacked data for GasLimitRemoveStakersUpdated events raised by the L1Staking contract.
type L1StakingGasLimitRemoveStakersUpdatedIterator struct {
	Event *L1StakingGasLimitRemoveStakersUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *L1StakingGasLimitRemoveStakersUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(L1StakingGasLimitRemoveStakersUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(L1StakingGasLimitRemoveStakersUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *L1StakingGasLimitRemoveStakersUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *L1StakingGasLimitRemoveStakersUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// L1StakingGasLimitRemoveStakersUpdated represents a GasLimitRemoveStakersUpdated event raised by the L1Staking contract.
type L1StakingGasLimitRemoveStakersUpdated struct {
	OldGasLimit *big.Int
	NewGasLimit *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterGasLimitRemoveStakersUpdated is a free log retrieval operation binding the contract event 0xdd4b37d1f14888147fe4be2cfaedcbf148fd07ececc856d0433241b8b6e4a7f7.
//
// Solidity: event GasLimitRemoveStakersUpdated(uint256 oldGasLimit, uint256 newGasLimit)
func (_L1Staking *L1StakingFilterer) FilterGasLimitRemoveStakersUpdated(opts *bind.FilterOpts) (*L1StakingGasLimitRemoveStakersUpdatedIterator, error) {

	logs, sub, err := _L1Staking.contract.FilterLogs(opts, "GasLimitRemoveStakersUpdated")
	if err != nil {
		return nil, err
	}
	return &L1StakingGasLimitRemoveStakersUpdatedIterator{contract: _L1Staking.contract, event: "GasLimitRemoveStakersUpdated", logs: logs, sub: sub}, nil
}

// WatchGasLimitRemoveStakersUpdated is a free log subscription operation binding the contract event 0xdd4b37d1f14888147fe4be2cfaedcbf148fd07ececc856d0433241b8b6e4a7f7.
//
// Solidity: event GasLimitRemoveStakersUpdated(uint256 oldGasLimit, uint256 newGasLimit)
func (_L1Staking *L1StakingFilterer) WatchGasLimitRemoveStakersUpdated(opts *bind.WatchOpts, sink chan<- *L1StakingGasLimitRemoveStakersUpdated) (event.Subscription, error) {

	logs, sub, err := _L1Staking.contract.WatchLogs(opts, "GasLimitRemoveStakersUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(L1StakingGasLimitRemoveStakersUpdated)
				if err := _L1Staking.contract.UnpackLog(event, "GasLimitRemoveStakersUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseGasLimitRemoveStakersUpdated is a log parse operation binding the contract event 0xdd4b37d1f14888147fe4be2cfaedcbf148fd07ececc856d0433241b8b6e4a7f7.
//
// Solidity: event GasLimitRemoveStakersUpdated(uint256 oldGasLimit, uint256 newGasLimit)
func (_L1Staking *L1StakingFilterer) ParseGasLimitRemoveStakersUpdated(log types.Log) (*L1StakingGasLimitRemoveStakersUpdated, error) {
	event := new(L1StakingGasLimitRemoveStakersUpdated)
	if err := _L1Staking.contract.UnpackLog(event, "GasLimitRemoveStakersUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// L1StakingInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the L1Staking contract.
type L1StakingInitializedIterator struct {
	Event *L1StakingInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *L1StakingInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(L1StakingInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(L1StakingInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *L1StakingInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *L1StakingInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// L1StakingInitialized represents a Initialized event raised by the L1Staking contract.
type L1StakingInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_L1Staking *L1StakingFilterer) FilterInitialized(opts *bind.FilterOpts) (*L1StakingInitializedIterator, error) {

	logs, sub, err := _L1Staking.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &L1StakingInitializedIterator{contract: _L1Staking.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_L1Staking *L1StakingFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *L1StakingInitialized) (event.Subscription, error) {

	logs, sub, err := _L1Staking.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(L1StakingInitialized)
				if err := _L1Staking.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_L1Staking *L1StakingFilterer) ParseInitialized(log types.Log) (*L1StakingInitialized, error) {
	event := new(L1StakingInitialized)
	if err := _L1Staking.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// L1StakingOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the L1Staking contract.
type L1StakingOwnershipTransferredIterator struct {
	Event *L1StakingOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *L1StakingOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(L1StakingOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(L1StakingOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *L1StakingOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *L1StakingOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// L1StakingOwnershipTransferred represents a OwnershipTransferred event raised by the L1Staking contract.
type L1StakingOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_L1Staking *L1StakingFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*L1StakingOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _L1Staking.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &L1StakingOwnershipTransferredIterator{contract: _L1Staking.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_L1Staking *L1StakingFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *L1StakingOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _L1Staking.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(L1StakingOwnershipTransferred)
				if err := _L1Staking.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_L1Staking *L1StakingFilterer) ParseOwnershipTransferred(log types.Log) (*L1StakingOwnershipTransferred, error) {
	event := new(L1StakingOwnershipTransferred)
	if err := _L1Staking.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// L1StakingRegisteredIterator is returned from FilterRegistered and is used to iterate over the raw logs and unpacked data for Registered events raised by the L1Staking contract.
type L1StakingRegisteredIterator struct {
	Event *L1StakingRegistered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *L1StakingRegisteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(L1StakingRegistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(L1StakingRegistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *L1StakingRegisteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *L1StakingRegisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// L1StakingRegistered represents a Registered event raised by the L1Staking contract.
type L1StakingRegistered struct {
	Addr   common.Address
	TmKey  [32]byte
	BlsKey []byte
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterRegistered is a free log retrieval operation binding the contract event 0xb9c7babb56df9f2da4a30811a6c778e4e68af88b72712d56cf62c5516e20e199.
//
// Solidity: event Registered(address addr, bytes32 tmKey, bytes blsKey)
func (_L1Staking *L1StakingFilterer) FilterRegistered(opts *bind.FilterOpts) (*L1StakingRegisteredIterator, error) {

	logs, sub, err := _L1Staking.contract.FilterLogs(opts, "Registered")
	if err != nil {
		return nil, err
	}
	return &L1StakingRegisteredIterator{contract: _L1Staking.contract, event: "Registered", logs: logs, sub: sub}, nil
}

// WatchRegistered is a free log subscription operation binding the contract event 0xb9c7babb56df9f2da4a30811a6c778e4e68af88b72712d56cf62c5516e20e199.
//
// Solidity: event Registered(address addr, bytes32 tmKey, bytes blsKey)
func (_L1Staking *L1StakingFilterer) WatchRegistered(opts *bind.WatchOpts, sink chan<- *L1StakingRegistered) (event.Subscription, error) {

	logs, sub, err := _L1Staking.contract.WatchLogs(opts, "Registered")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(L1StakingRegistered)
				if err := _L1Staking.contract.UnpackLog(event, "Registered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRegistered is a log parse operation binding the contract event 0xb9c7babb56df9f2da4a30811a6c778e4e68af88b72712d56cf62c5516e20e199.
//
// Solidity: event Registered(address addr, bytes32 tmKey, bytes blsKey)
func (_L1Staking *L1StakingFilterer) ParseRegistered(log types.Log) (*L1StakingRegistered, error) {
	event := new(L1StakingRegistered)
	if err := _L1Staking.contract.UnpackLog(event, "Registered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// L1StakingRewardPercentageUpdatedIterator is returned from FilterRewardPercentageUpdated and is used to iterate over the raw logs and unpacked data for RewardPercentageUpdated events raised by the L1Staking contract.
type L1StakingRewardPercentageUpdatedIterator struct {
	Event *L1StakingRewardPercentageUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *L1StakingRewardPercentageUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(L1StakingRewardPercentageUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(L1StakingRewardPercentageUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *L1StakingRewardPercentageUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *L1StakingRewardPercentageUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// L1StakingRewardPercentageUpdated represents a RewardPercentageUpdated event raised by the L1Staking contract.
type L1StakingRewardPercentageUpdated struct {
	OldPercentage *big.Int
	NewPercentage *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterRewardPercentageUpdated is a free log retrieval operation binding the contract event 0xa46de936426e045703b2d34a292a19fde92b329018db8e0da750033876b655ba.
//
// Solidity: event RewardPercentageUpdated(uint256 oldPercentage, uint256 newPercentage)
func (_L1Staking *L1StakingFilterer) FilterRewardPercentageUpdated(opts *bind.FilterOpts) (*L1StakingRewardPercentageUpdatedIterator, error) {

	logs, sub, err := _L1Staking.contract.FilterLogs(opts, "RewardPercentageUpdated")
	if err != nil {
		return nil, err
	}
	return &L1StakingRewardPercentageUpdatedIterator{contract: _L1Staking.contract, event: "RewardPercentageUpdated", logs: logs, sub: sub}, nil
}

// WatchRewardPercentageUpdated is a free log subscription operation binding the contract event 0xa46de936426e045703b2d34a292a19fde92b329018db8e0da750033876b655ba.
//
// Solidity: event RewardPercentageUpdated(uint256 oldPercentage, uint256 newPercentage)
func (_L1Staking *L1StakingFilterer) WatchRewardPercentageUpdated(opts *bind.WatchOpts, sink chan<- *L1StakingRewardPercentageUpdated) (event.Subscription, error) {

	logs, sub, err := _L1Staking.contract.WatchLogs(opts, "RewardPercentageUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(L1StakingRewardPercentageUpdated)
				if err := _L1Staking.contract.UnpackLog(event, "RewardPercentageUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRewardPercentageUpdated is a log parse operation binding the contract event 0xa46de936426e045703b2d34a292a19fde92b329018db8e0da750033876b655ba.
//
// Solidity: event RewardPercentageUpdated(uint256 oldPercentage, uint256 newPercentage)
func (_L1Staking *L1StakingFilterer) ParseRewardPercentageUpdated(log types.Log) (*L1StakingRewardPercentageUpdated, error) {
	event := new(L1StakingRewardPercentageUpdated)
	if err := _L1Staking.contract.UnpackLog(event, "RewardPercentageUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// L1StakingSlashRemainingClaimedIterator is returned from FilterSlashRemainingClaimed and is used to iterate over the raw logs and unpacked data for SlashRemainingClaimed events raised by the L1Staking contract.
type L1StakingSlashRemainingClaimedIterator struct {
	Event *L1StakingSlashRemainingClaimed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *L1StakingSlashRemainingClaimedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(L1StakingSlashRemainingClaimed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(L1StakingSlashRemainingClaimed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *L1StakingSlashRemainingClaimedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *L1StakingSlashRemainingClaimedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// L1StakingSlashRemainingClaimed represents a SlashRemainingClaimed event raised by the L1Staking contract.
type L1StakingSlashRemainingClaimed struct {
	Receiver common.Address
	Amount   *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterSlashRemainingClaimed is a free log retrieval operation binding the contract event 0xa1fefb6c5328a92a416e321ed50997303fe7135fd88c28b0592b21ce42b5cdd9.
//
// Solidity: event SlashRemainingClaimed(address receiver, uint256 amount)
func (_L1Staking *L1StakingFilterer) FilterSlashRemainingClaimed(opts *bind.FilterOpts) (*L1StakingSlashRemainingClaimedIterator, error) {

	logs, sub, err := _L1Staking.contract.FilterLogs(opts, "SlashRemainingClaimed")
	if err != nil {
		return nil, err
	}
	return &L1StakingSlashRemainingClaimedIterator{contract: _L1Staking.contract, event: "SlashRemainingClaimed", logs: logs, sub: sub}, nil
}

// WatchSlashRemainingClaimed is a free log subscription operation binding the contract event 0xa1fefb6c5328a92a416e321ed50997303fe7135fd88c28b0592b21ce42b5cdd9.
//
// Solidity: event SlashRemainingClaimed(address receiver, uint256 amount)
func (_L1Staking *L1StakingFilterer) WatchSlashRemainingClaimed(opts *bind.WatchOpts, sink chan<- *L1StakingSlashRemainingClaimed) (event.Subscription, error) {

	logs, sub, err := _L1Staking.contract.WatchLogs(opts, "SlashRemainingClaimed")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(L1StakingSlashRemainingClaimed)
				if err := _L1Staking.contract.UnpackLog(event, "SlashRemainingClaimed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSlashRemainingClaimed is a log parse operation binding the contract event 0xa1fefb6c5328a92a416e321ed50997303fe7135fd88c28b0592b21ce42b5cdd9.
//
// Solidity: event SlashRemainingClaimed(address receiver, uint256 amount)
func (_L1Staking *L1StakingFilterer) ParseSlashRemainingClaimed(log types.Log) (*L1StakingSlashRemainingClaimed, error) {
	event := new(L1StakingSlashRemainingClaimed)
	if err := _L1Staking.contract.UnpackLog(event, "SlashRemainingClaimed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// L1StakingSlashedIterator is returned from FilterSlashed and is used to iterate over the raw logs and unpacked data for Slashed events raised by the L1Staking contract.
type L1StakingSlashedIterator struct {
	Event *L1StakingSlashed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *L1StakingSlashedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(L1StakingSlashed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(L1StakingSlashed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *L1StakingSlashedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *L1StakingSlashedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// L1StakingSlashed represents a Slashed event raised by the L1Staking contract.
type L1StakingSlashed struct {
	Stakers []common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterSlashed is a free log retrieval operation binding the contract event 0x654f4a61849f1b3ad10abb283d27f02d5fece7b820acc5a3b874713b58748b5a.
//
// Solidity: event Slashed(address[] stakers)
func (_L1Staking *L1StakingFilterer) FilterSlashed(opts *bind.FilterOpts) (*L1StakingSlashedIterator, error) {

	logs, sub, err := _L1Staking.contract.FilterLogs(opts, "Slashed")
	if err != nil {
		return nil, err
	}
	return &L1StakingSlashedIterator{contract: _L1Staking.contract, event: "Slashed", logs: logs, sub: sub}, nil
}

// WatchSlashed is a free log subscription operation binding the contract event 0x654f4a61849f1b3ad10abb283d27f02d5fece7b820acc5a3b874713b58748b5a.
//
// Solidity: event Slashed(address[] stakers)
func (_L1Staking *L1StakingFilterer) WatchSlashed(opts *bind.WatchOpts, sink chan<- *L1StakingSlashed) (event.Subscription, error) {

	logs, sub, err := _L1Staking.contract.WatchLogs(opts, "Slashed")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(L1StakingSlashed)
				if err := _L1Staking.contract.UnpackLog(event, "Slashed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSlashed is a log parse operation binding the contract event 0x654f4a61849f1b3ad10abb283d27f02d5fece7b820acc5a3b874713b58748b5a.
//
// Solidity: event Slashed(address[] stakers)
func (_L1Staking *L1StakingFilterer) ParseSlashed(log types.Log) (*L1StakingSlashed, error) {
	event := new(L1StakingSlashed)
	if err := _L1Staking.contract.UnpackLog(event, "Slashed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// L1StakingStakersRemovedIterator is returned from FilterStakersRemoved and is used to iterate over the raw logs and unpacked data for StakersRemoved events raised by the L1Staking contract.
type L1StakingStakersRemovedIterator struct {
	Event *L1StakingStakersRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *L1StakingStakersRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(L1StakingStakersRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(L1StakingStakersRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *L1StakingStakersRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *L1StakingStakersRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// L1StakingStakersRemoved represents a StakersRemoved event raised by the L1Staking contract.
type L1StakingStakersRemoved struct {
	Stakers []common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterStakersRemoved is a free log retrieval operation binding the contract event 0x3f446646c03e618be8238a586960d6d625f35c653cdca1ef59609993e8ed2c84.
//
// Solidity: event StakersRemoved(address[] stakers)
func (_L1Staking *L1StakingFilterer) FilterStakersRemoved(opts *bind.FilterOpts) (*L1StakingStakersRemovedIterator, error) {

	logs, sub, err := _L1Staking.contract.FilterLogs(opts, "StakersRemoved")
	if err != nil {
		return nil, err
	}
	return &L1StakingStakersRemovedIterator{contract: _L1Staking.contract, event: "StakersRemoved", logs: logs, sub: sub}, nil
}

// WatchStakersRemoved is a free log subscription operation binding the contract event 0x3f446646c03e618be8238a586960d6d625f35c653cdca1ef59609993e8ed2c84.
//
// Solidity: event StakersRemoved(address[] stakers)
func (_L1Staking *L1StakingFilterer) WatchStakersRemoved(opts *bind.WatchOpts, sink chan<- *L1StakingStakersRemoved) (event.Subscription, error) {

	logs, sub, err := _L1Staking.contract.WatchLogs(opts, "StakersRemoved")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(L1StakingStakersRemoved)
				if err := _L1Staking.contract.UnpackLog(event, "StakersRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStakersRemoved is a log parse operation binding the contract event 0x3f446646c03e618be8238a586960d6d625f35c653cdca1ef59609993e8ed2c84.
//
// Solidity: event StakersRemoved(address[] stakers)
func (_L1Staking *L1StakingFilterer) ParseStakersRemoved(log types.Log) (*L1StakingStakersRemoved, error) {
	event := new(L1StakingStakersRemoved)
	if err := _L1Staking.contract.UnpackLog(event, "StakersRemoved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// L1StakingWhitelistUpdatedIterator is returned from FilterWhitelistUpdated and is used to iterate over the raw logs and unpacked data for WhitelistUpdated events raised by the L1Staking contract.
type L1StakingWhitelistUpdatedIterator struct {
	Event *L1StakingWhitelistUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *L1StakingWhitelistUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(L1StakingWhitelistUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(L1StakingWhitelistUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *L1StakingWhitelistUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *L1StakingWhitelistUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// L1StakingWhitelistUpdated represents a WhitelistUpdated event raised by the L1Staking contract.
type L1StakingWhitelistUpdated struct {
	Add    []common.Address
	Remove []common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterWhitelistUpdated is a free log retrieval operation binding the contract event 0xe375867e538b40218c1b3db2ccceaf875eb073e38b510449e6088c1539ac8622.
//
// Solidity: event WhitelistUpdated(address[] add, address[] remove)
func (_L1Staking *L1StakingFilterer) FilterWhitelistUpdated(opts *bind.FilterOpts) (*L1StakingWhitelistUpdatedIterator, error) {

	logs, sub, err := _L1Staking.contract.FilterLogs(opts, "WhitelistUpdated")
	if err != nil {
		return nil, err
	}
	return &L1StakingWhitelistUpdatedIterator{contract: _L1Staking.contract, event: "WhitelistUpdated", logs: logs, sub: sub}, nil
}

// WatchWhitelistUpdated is a free log subscription operation binding the contract event 0xe375867e538b40218c1b3db2ccceaf875eb073e38b510449e6088c1539ac8622.
//
// Solidity: event WhitelistUpdated(address[] add, address[] remove)
func (_L1Staking *L1StakingFilterer) WatchWhitelistUpdated(opts *bind.WatchOpts, sink chan<- *L1StakingWhitelistUpdated) (event.Subscription, error) {

	logs, sub, err := _L1Staking.contract.WatchLogs(opts, "WhitelistUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(L1StakingWhitelistUpdated)
				if err := _L1Staking.contract.UnpackLog(event, "WhitelistUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWhitelistUpdated is a log parse operation binding the contract event 0xe375867e538b40218c1b3db2ccceaf875eb073e38b510449e6088c1539ac8622.
//
// Solidity: event WhitelistUpdated(address[] add, address[] remove)
func (_L1Staking *L1StakingFilterer) ParseWhitelistUpdated(log types.Log) (*L1StakingWhitelistUpdated, error) {
	event := new(L1StakingWhitelistUpdated)
	if err := _L1Staking.contract.UnpackLog(event, "WhitelistUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// L1StakingWithdrawnIterator is returned from FilterWithdrawn and is used to iterate over the raw logs and unpacked data for Withdrawn events raised by the L1Staking contract.
type L1StakingWithdrawnIterator struct {
	Event *L1StakingWithdrawn // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *L1StakingWithdrawnIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(L1StakingWithdrawn)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(L1StakingWithdrawn)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *L1StakingWithdrawnIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *L1StakingWithdrawnIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// L1StakingWithdrawn represents a Withdrawn event raised by the L1Staking contract.
type L1StakingWithdrawn struct {
	Addr         common.Address
	UnlockHeight *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterWithdrawn is a free log retrieval operation binding the contract event 0x7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5.
//
// Solidity: event Withdrawn(address indexed addr, uint256 unlockHeight)
func (_L1Staking *L1StakingFilterer) FilterWithdrawn(opts *bind.FilterOpts, addr []common.Address) (*L1StakingWithdrawnIterator, error) {

	var addrRule []interface{}
	for _, addrItem := range addr {
		addrRule = append(addrRule, addrItem)
	}

	logs, sub, err := _L1Staking.contract.FilterLogs(opts, "Withdrawn", addrRule)
	if err != nil {
		return nil, err
	}
	return &L1StakingWithdrawnIterator{contract: _L1Staking.contract, event: "Withdrawn", logs: logs, sub: sub}, nil
}

// WatchWithdrawn is a free log subscription operation binding the contract event 0x7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5.
//
// Solidity: event Withdrawn(address indexed addr, uint256 unlockHeight)
func (_L1Staking *L1StakingFilterer) WatchWithdrawn(opts *bind.WatchOpts, sink chan<- *L1StakingWithdrawn, addr []common.Address) (event.Subscription, error) {

	var addrRule []interface{}
	for _, addrItem := range addr {
		addrRule = append(addrRule, addrItem)
	}

	logs, sub, err := _L1Staking.contract.WatchLogs(opts, "Withdrawn", addrRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(L1StakingWithdrawn)
				if err := _L1Staking.contract.UnpackLog(event, "Withdrawn", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdrawn is a log parse operation binding the contract event 0x7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5.
//
// Solidity: event Withdrawn(address indexed addr, uint256 unlockHeight)
func (_L1Staking *L1StakingFilterer) ParseWithdrawn(log types.Log) (*L1StakingWithdrawn, error) {
	event := new(L1StakingWithdrawn)
	if err := _L1Staking.contract.UnpackLog(event, "Withdrawn", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
