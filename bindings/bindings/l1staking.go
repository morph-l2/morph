// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package bindings

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/morph-l2/go-ethereum"
	"github.com/morph-l2/go-ethereum/accounts/abi"
	"github.com/morph-l2/go-ethereum/accounts/abi/bind"
	"github.com/morph-l2/go-ethereum/common"
	"github.com/morph-l2/go-ethereum/core/types"
	"github.com/morph-l2/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// L1StakingMetaData contains all meta data concerning the L1Staking contract.
var L1StakingMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"_messenger\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldChallengeDeposit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newChallengeDeposit\",\"type\":\"uint256\"}],\"name\":\"ChallengeDepositUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldGasLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newGasLimit\",\"type\":\"uint256\"}],\"name\":\"GasLimitAddStakerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldGasLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newGasLimit\",\"type\":\"uint256\"}],\"name\":\"GasLimitRemoveStakersUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"tmKey\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"blsKey\",\"type\":\"bytes\"}],\"name\":\"Registered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPercentage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPercentage\",\"type\":\"uint256\"}],\"name\":\"RewardPercentageUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SlashRemainingClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"stakers\",\"type\":\"address[]\"}],\"name\":\"Slashed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"stakers\",\"type\":\"address[]\"}],\"name\":\"StakersRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"add\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"remove\",\"type\":\"address[]\"}],\"name\":\"WhitelistUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unlockHeight\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MESSENGER\",\"outputs\":[{\"internalType\":\"contractICrossDomainMessenger\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OTHER_STAKING\",\"outputs\":[{\"internalType\":\"contractStaking\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"blsPubkey\",\"type\":\"bytes\"}],\"name\":\"blsKeys\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"challengeDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"claimSlashRemaining\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"claimWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cleanStakerStore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"deleteList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"deleteableHeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasLimitAddStaker\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasLimitRemoveStakers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"}],\"name\":\"getStakerBitmap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bitmap\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakers\",\"outputs\":[{\"internalType\":\"address[255]\",\"name\":\"\",\"type\":\"address[255]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_stakers\",\"type\":\"address[]\"}],\"name\":\"getStakersBitmap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bitmap\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bitmap\",\"type\":\"uint256\"}],\"name\":\"getStakersFromBitmap\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"stakerAddrs\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rollupContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stakingValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_challengeDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockBlocks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_gasLimitAdd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_gasLimitRemove\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isActiveStaker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isStaker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isStakerInDeleteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"messenger\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"tmKey\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"blsKey\",\"type\":\"bytes\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_stakers\",\"type\":\"address[]\"}],\"name\":\"removeStaker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"removedList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollupContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sequencersBitmap\",\"type\":\"uint256\"}],\"name\":\"slash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slashRemaining\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakerIndexes\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakerSet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"tmKey\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"blsKey\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"tmPubkey\",\"type\":\"bytes32\"}],\"name\":\"tmKeys\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_challengeDeposit\",\"type\":\"uint256\"}],\"name\":\"updateChallengeDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gasLimitAdd\",\"type\":\"uint256\"}],\"name\":\"updateGasLimitAddStaker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gasLimitRemove\",\"type\":\"uint256\"}],\"name\":\"updateGasLimitRemoveStakers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardPercentage\",\"type\":\"uint256\"}],\"name\":\"updateRewardPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"add\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"remove\",\"type\":\"address[]\"}],\"name\":\"updateWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"verifySignature\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalLockBlocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"withdrawals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60c060405234801562000010575f80fd5b5060405162003a6338038062003a6383398101604081905262000033916200005d565b6001600160a01b031660805273530000000000000000000000000000000000001560a0526200008c565b5f602082840312156200006e575f80fd5b81516001600160a01b038116811462000085575f80fd5b9392505050565b60805160a051613992620000d15f395f818161064e0152818161297e0152612bf201525f8181610426015281816106eb0152818161294f0152612bc301526139925ff3fe6080604052600436106102e2575f3560e01c80637a4e87c311610186578063a4f209b0116100dc578063d096c3c611610087578063df15503311610062578063df155033146108ab578063e2a6ad5f146108e2578063f2fde38b14610901575f80fd5b8063d096c3c614610836578063d51c90a914610855578063dd4785f51461086a575f80fd5b8063bfa02ba9116100b7578063bfa02ba9146107d9578063c7cd469a146107f8578063cde4cd1114610817575f80fd5b8063a4f209b014610786578063ab8c53dc146107a5578063ae81de53146107ba575f80fd5b80638da5cb5b1161013c5780639b19251a116101175780639b19251a1461070d5780639d48f4171461073b578063a3066aab14610767575f80fd5b80638da5cb5b1461068f5780639168ae72146106ac578063927ede2d146106da575f80fd5b80638142951a1161016c5780638142951a1461061e578063831cfb581461063d5780638a565ac314610670575f80fd5b80637a4e87c3146105b75780637a9262a2146105f2575f80fd5b806341de239b1161023b57806368015791116101f1578063715018a6116101cc578063715018a61461055e57806374fe27b714610572578063797adbde14610598575f80fd5b806368015791146104f1578063692c565b146105105780636f1e85331461053f575f80fd5b806345bc4d101161022157806345bc4d10146104a85780634d64903a146104c757806352d472eb146104dc575f80fd5b806341de239b1461047257806343352d6114610487575f80fd5b8063320ff8601161029b5780633cb747bf116102765780633cb747bf146104185780633ccfd60b1461044a5780633ee2a1f91461045e575f80fd5b8063320ff8601461039c57806335928991146103bb5780633a9bbede146103da575f80fd5b80632a28e5a3116102cb5780632a28e5a3146103245780632e407a6f14610339578063303afb9e14610365575f80fd5b80630d13fd7b146102e65780632108db351461030f575b5f80fd5b3480156102f1575f80fd5b506102fc6101a65481565b6040519081526020015b60405180910390f35b34801561031a575f80fd5b506102fc609c5481565b61033761033236600461316c565b610920565b005b348015610344575f80fd5b506102fc6103533660046131c6565b6101a16020525f908152604090205481565b348015610370575f80fd5b5061038461037f3660046131e6565b610d1b565b6040516001600160a01b039091168152602001610306565b3480156103a7575f80fd5b506103376103b63660046131fd565b610d3a565b3480156103c6575f80fd5b506103376103d53660046131e6565b611055565b3480156103e5575f80fd5b506104086103f43660046131c6565b609f6020525f908152604090205460ff1681565b6040519015158152602001610306565b348015610423575f80fd5b507f0000000000000000000000000000000000000000000000000000000000000000610384565b348015610455575f80fd5b50610337611102565b348015610469575f80fd5b506103376112ce565b34801561047d575f80fd5b506102fc60995481565b348015610492575f80fd5b5061049b611561565b60405161030691906132a5565b3480156104b3575f80fd5b506102fc6104c23660046131e6565b6115a7565b3480156104d2575f80fd5b506102fc60985481565b3480156104e7575f80fd5b506102fc609a5481565b3480156104fc575f80fd5b5061040861050b3660046131c6565b6118ad565b34801561051b575f80fd5b5061040861052a3660046131e6565b6101a46020525f908152604090205460ff1681565b34801561054a575f80fd5b506104086105593660046131c6565b611948565b348015610569575f80fd5b506103376119c1565b34801561057d575f80fd5b5061040861058c366004613327565b60019695505050505050565b3480156105a3575f80fd5b506103846105b23660046131e6565b6119d4565b3480156105c2575f80fd5b506104086105d13660046133cd565b80516020818301810180516101a38252928201919093012091525460ff1681565b3480156105fd575f80fd5b506102fc61060c3660046131c6565b6101a56020525f908152604090205481565b348015610629575f80fd5b50610337610638366004613407565b6119fd565b348015610648575f80fd5b506103847f000000000000000000000000000000000000000000000000000000000000000081565b34801561067b575f80fd5b5061033761068a3660046131e6565b611ebf565b34801561069a575f80fd5b506033546001600160a01b0316610384565b3480156106b7575f80fd5b506106cb6106c63660046131c6565b611f62565b604051610306939291906134a2565b3480156106e5575f80fd5b506103847f000000000000000000000000000000000000000000000000000000000000000081565b348015610718575f80fd5b506104086107273660046131c6565b609e6020525f908152604090205460ff1681565b348015610746575f80fd5b5061075a6107553660046131e6565b612015565b60405161030691906134d2565b348015610772575f80fd5b506103376107813660046131c6565b612129565b348015610791575f80fd5b506103376107a03660046131e6565b6122a4565b3480156107b0575f80fd5b506102fc609d5481565b3480156107c5575f80fd5b506103376107d43660046131e6565b612354565b3480156107e4575f80fd5b50609754610384906001600160a01b031681565b348015610803575f80fd5b5061033761081236600461351e565b6123f7565b348015610822575f80fd5b506103376108313660046131c6565b612598565b348015610841575f80fd5b506102fc6108503660046131c6565b612606565b348015610860575f80fd5b506102fc609b5481565b348015610875575f80fd5b506108996108843660046131c6565b61019f6020525f908152604090205460ff1681565b60405160ff9091168152602001610306565b3480156108b6575f80fd5b506104086108c53660046131c6565b6001600160a01b03165f9081526101a16020526040902054151590565b3480156108ed575f80fd5b506102fc6108fc366004613585565b612680565b34801561090c575f80fd5b5061033761091b3660046131c6565b6127b2565b335f818152609e602052604090205460ff166109835760405162461bcd60e51b815260206004820152601060248201527f6e6f7420696e2077686974656c6973740000000000000000000000000000000060448201526064015b60405180910390fd5b335f9081526101a260205260409020546001600160a01b0316156109e95760405162461bcd60e51b815260206004820152601260248201527f616c726561647920726567697374657265640000000000000000000000000000604482015260640161097a565b8215801590610a0757505f8381526101a4602052604090205460ff16155b610a535760405162461bcd60e51b815260206004820152601960248201527f696e76616c69642074656e6465726d696e74207075626b657900000000000000604482015260640161097a565b8151610100148015610a8657506101a382604051610a7191906135c4565b9081526040519081900360200190205460ff16155b610ad25760405162461bcd60e51b815260206004820152601260248201527f696e76616c696420626c73207075626b65790000000000000000000000000000604482015260640161097a565b6098543414610b235760405162461bcd60e51b815260206004820152601560248201527f696e76616c6964207374616b696e672076616c75650000000000000000000000604482015260640161097a565b6040518060600160405280610b353390565b6001600160a01b03908116825260208083018790526040928301869052335f9081526101a28252839020845181547fffffffffffffffffffffffff00000000000000000000000000000000000000001693169290921782558301516001820155908201516002820190610ba89082613674565b50905050610bbb610bb63390565b61283f565b60016101a383604051610bce91906135c4565b90815260408051918290036020908101909220805493151560ff199485161790555f8681526101a49092529020805490911660011790557fb9c7babb56df9f2da4a30811a6c778e4e68af88b72712d56cf62c5516e20e199610c2d3390565b8484604051610c3e939291906134a2565b60405180910390a1335f9081526101a26020908152604091829020825160608101845281546001600160a01b03168152600182015492810192909252600281018054610d169484019190610c91906135df565b80601f0160208091040260200160405190810160405280929190818152602001828054610cbd906135df565b8015610d085780601f10610cdf57610100808354040283529160200191610d08565b820191905f5260205f20905b815481529060010190602001808311610ceb57829003601f168201915b50505050508152505061294d565b505050565b60a08160ff8110610d2a575f80fd5b01546001600160a01b0316905081565b610d42612a75565b5f5b815181101561101157610d6f828281518110610d6257610d62613772565b60200260200101516118ad565b610de15760405162461bcd60e51b815260206004820152602160248201527f6f6e6c7920616374697665207374616b65722063616e2062652072656d6f766560448201527f6400000000000000000000000000000000000000000000000000000000000000606482015260840161097a565b6101a55f838381518110610df757610df7613772565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020015f20545f14610e6d5760405162461bcd60e51b815260206004820152600b60248201527f7769746864726177696e67000000000000000000000000000000000000000000604482015260640161097a565b609954610e7a90436137cc565b6101a55f848481518110610e9057610e90613772565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020015f2081905550610edd828281518110610ed057610ed0613772565b6020026020010151612acf565b818181518110610eef57610eef613772565b60200260200101516001600160a01b03167f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d56101a55f858581518110610f3757610f37613772565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020015f2054604051610f6e91815260200190565b60405180910390a2609e5f838381518110610f8b57610f8b613772565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020015f205f6101000a81549060ff02191690556001609f5f848481518110610fd857610fd8613772565b6020908102919091018101516001600160a01b031682528101919091526040015f20805460ff1916911515919091179055600101610d44565b507f3f446646c03e618be8238a586960d6d625f35c653cdca1ef59609993e8ed2c848160405161104191906134d2565b60405180910390a161105281612bc1565b50565b61105d612a75565b5f8111801561106f57506101a6548114155b6110bb5760405162461bcd60e51b815260206004820152601f60248201527f696e76616c6964206368616c6c656e6765206465706f7369742076616c756500604482015260640161097a565b6101a680549082905560408051828152602081018490527f36f971a40478225aeb80cfbf5e80306e8cb76d3bf7d56fdc5e490945cddb7d5591015b60405180910390a15050565b61110b336118ad565b6111575760405162461bcd60e51b815260206004820152601260248201527f6f6e6c7920616374697665207374616b65720000000000000000000000000000604482015260640161097a565b335f9081526101a56020526040902054156111b45760405162461bcd60e51b815260206004820152600b60248201527f7769746864726177696e67000000000000000000000000000000000000000000604482015260640161097a565b6099546111c190436137cc565b335f8181526101a560205260409020919091556111dd90612acf565b335f8181526101a560209081526040918290205491519182527f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5910160405180910390a2335f908152609e60209081526040808320805460ff19908116909155609f83528184208054909116600190811790915581518181528083019092529091828101908036833701905050905033815f8151811061127f5761127f613772565b60200260200101906001600160a01b031690816001600160a01b0316815250507f3f446646c03e618be8238a586960d6d625f35c653cdca1ef59609993e8ed2c848160405161104191906134d2565b6112d6612a75565b5f5b6101a05481101561105257436101a15f6101a084815481106112fc576112fc613772565b5f9182526020808320909101546001600160a01b03168352820192909252604001902054116115595760a0600161019f5f6101a0858154811061134157611341613772565b5f9182526020808320909101546001600160a01b03168352820192909252604001902054611372919060ff166137df565b60ff1660ff811061138557611385613772565b0180547fffffffffffffffffffffffff00000000000000000000000000000000000000001690556101a0805461019f915f91849081106113c7576113c7613772565b5f9182526020808320909101546001600160a01b031683528201929092526040018120805460ff191690556101a080546101a19291908490811061140d5761140d613772565b5f9182526020808320909101546001600160a01b031683528201929092526040018120556101a08054611442906001906137f8565b8154811061145257611452613772565b5f918252602090912001546101a080546001600160a01b03909216918390811061147e5761147e613772565b905f5260205f20015f6101000a8154816001600160a01b0302191690836001600160a01b031602179055506101a08054806114bb576114bb61380b565b600190038181905f5260205f20015f6101000a8154906001600160a01b03021916905590556101a25f6101a083815481106114f8576114f8613772565b5f9182526020808320909101546001600160a01b03168352820192909252604001812080547fffffffffffffffffffffffff000000000000000000000000000000000000000016815560018101829055906115566002830182613034565b50505b6001016112d8565b61156961306b565b60408051611fe08101918290529060a09060ff9082845b81546001600160a01b03168152600190910190602001808311611580575050505050905090565b6097545f906001600160a01b0316336001600160a01b03161461160c5760405162461bcd60e51b815260206004820152601460248201527f6f6e6c7920726f6c6c757020636f6e7472616374000000000000000000000000604482015260640161097a565b611614612cb9565b5f61161e83612015565b90505f805b82518110156117d0575f6101a55f85848151811061164357611643613772565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020015f205411156116c6576101a55f84838151811061168757611687613772565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020015f205f9055609854826116bf91906137cc565b91506117c8565b6117008382815181106116db576116db613772565b60200260200101516001600160a01b03165f9081526101a16020526040902054151590565b6117c85760985461171190836137cc565b9150611728838281518110610ed057610ed0613772565b609e5f84838151811061173d5761173d613772565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020015f205f6101000a81549060ff02191690556001609f5f85848151811061178a5761178a613772565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020015f205f6101000a81548160ff0219169083151502179055505b600101611623565b505f6064609a54836117e29190613838565b6117ec919061384f565b90506117f881836137f8565b609d5f82825461180891906137cc565b9091555050609754611823906001600160a01b031682612d12565b7f654f4a61849f1b3ad10abb283d27f02d5fece7b820acc5a3b874713b58748b5a8360405161185291906134d2565b60405180910390a17f3f446646c03e618be8238a586960d6d625f35c653cdca1ef59609993e8ed2c848360405161188991906134d2565b60405180910390a161189a83612bc1565b925050506118a86001606555565b919050565b6001600160a01b0381165f90815261019f602052604081205460ff1681036118d657505f919050565b6001600160a01b0382165f81815261019f602052604090205460a0906119019060019060ff166137df565b60ff1660ff811061191457611914613772565b01546001600160a01b031614801561194257506001600160a01b0382165f9081526101a16020526040902054155b92915050565b6001600160a01b0381165f90815261019f602052604081205460ff16810361197157505f919050565b6001600160a01b0382165f81815261019f602052604090205460a09061199c9060019060ff166137df565b60ff1660ff81106119af576119af613772565b01546001600160a01b03161492915050565b6119c9612a75565b6119d25f612dc2565b565b6101a081815481106119e4575f80fd5b5f918252602090912001546001600160a01b0316905081565b5f54610100900460ff1615808015611a1b57505f54600160ff909116105b80611a345750303b158015611a3457505f5460ff166001145b611aa65760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a6564000000000000000000000000000000000000606482015260840161097a565b5f805460ff191660011790558015611ae4575f80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b6001600160a01b038816611b3a5760405162461bcd60e51b815260206004820152601760248201527f696e76616c696420726f6c6c757020636f6e7472616374000000000000000000604482015260640161097a565b5f8711611b895760405162461bcd60e51b815260206004820152601560248201527f696e76616c6964207374616b696e672076616c75650000000000000000000000604482015260640161097a565b5f8611611bd85760405162461bcd60e51b815260206004820152601f60248201527f696e76616c6964206368616c6c656e6765206465706f7369742076616c756500604482015260640161097a565b5f8511611c275760405162461bcd60e51b815260206004820152601e60248201527f696e76616c6964207769746864726177616c206c6f636b20626c6f636b730000604482015260640161097a565b5f8311611c765760405162461bcd60e51b815260206004820152601c60248201527f696e76616c696420676173206c696d697420616464207374616b657200000000604482015260640161097a565b5f8211611cc55760405162461bcd60e51b815260206004820181905260248201527f696e76616c696420676173206c696d69742072656d6f7665207374616b657273604482015260640161097a565b5f84118015611cd5575060648411155b611d465760405162461bcd60e51b8152602060048201526024808201527f696e76616c6964206368616c6c656e676572207265776172642070657263656e60448201527f7461676500000000000000000000000000000000000000000000000000000000606482015260840161097a565b611d4e612e2b565b611d56612eaf565b609780547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b038a16179055609a84905560988790556101a68690556099859055609b839055609c829055604080515f8152602081018590527f0ef80fb82bf5439b8591744c0fde771f5d93dce7a7970b1e9b7828cdc3970e9c910160405180910390a1604080515f8152602081018490527fdd4b37d1f14888147fe4be2cfaedcbf148fd07ececc856d0433241b8b6e4a7f7910160405180910390a1604080515f8152602081018690527fa46de936426e045703b2d34a292a19fde92b329018db8e0da750033876b655ba910160405180910390a18015611eb5575f80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050505050565b611ec7612a75565b5f81118015611ed85750609c548114155b611f245760405162461bcd60e51b815260206004820152601560248201527f696e76616c6964206e657720676173206c696d69740000000000000000000000604482015260640161097a565b609c80549082905560408051828152602081018490527fdd4b37d1f14888147fe4be2cfaedcbf148fd07ececc856d0433241b8b6e4a7f791016110f6565b6101a26020525f90815260409020805460018201546002830180546001600160a01b03909316939192611f94906135df565b80601f0160208091040260200160405190810160405280929190818152602001828054611fc0906135df565b801561200b5780601f10611fe25761010080835404028352916020019161200b565b820191905f5260205f20905b815481529060010190602001808311611fee57829003601f168201915b5050505050905083565b6060600182901c5f5b81156120455761202f8160016137cc565b905061203c6001836137f8565b8216915061201e565b8067ffffffffffffffff81111561205e5761205e6130a2565b604051908082528060200260200182016040528015612087578160200160208202803683370190505b5092505f60015b60ff8160ff16101561212057600160ff82161b8616156121185760a06120b56001836137df565b60ff1660ff81106120c8576120c8613772565b015485516001600160a01b03909116908690849081106120ea576120ea613772565b6001600160a01b039092166020928302919091019091015261210d8260016137cc565b915082821015612120575b60010161208e565b50505050919050565b612131612cb9565b335f9081526101a5602052604090205461218d5760405162461bcd60e51b815260206004820152601460248201527f7769746864726177616c206e6f74206578697374000000000000000000000000604482015260640161097a565b335f9081526101a5602052604090205443116121eb5760405162461bcd60e51b815260206004820152601160248201527f7769746864726177616c206c6f636b6564000000000000000000000000000000604482015260640161097a565b335f9081526101a5602090815260408083208390556101a2909152812080547fffffffffffffffffffffffff000000000000000000000000000000000000000016815560018101829055906122436002830182613034565b505061224c3390565b6040516001600160a01b03838116825291909116907f89309c9b2aeaffbdce717113df9427298b20448c05919bf889e05f8c3094254b9060200160405180910390a261229a81609854612d12565b6110526001606555565b6122ac612a75565b5f811180156122bc575060648111155b80156122ca5750609a548114155b6123165760405162461bcd60e51b815260206004820152601960248201527f696e76616c6964207265776172642070657263656e7461676500000000000000604482015260640161097a565b609a80549082905560408051828152602081018490527fa46de936426e045703b2d34a292a19fde92b329018db8e0da750033876b655ba91016110f6565b61235c612a75565b5f8111801561236d5750609b548114155b6123b95760405162461bcd60e51b815260206004820152601560248201527f696e76616c6964206e657720676173206c696d69740000000000000000000000604482015260640161097a565b609b80549082905560408051828152602081018490527f0ef80fb82bf5439b8591744c0fde771f5d93dce7a7970b1e9b7828cdc3970e9c91016110f6565b6123ff612a75565b5f5b838110156124f757609f5f86868481811061241e5761241e613772565b905060200201602081019061243391906131c6565b6001600160a01b0316815260208101919091526040015f205460ff161561249c5760405162461bcd60e51b815260206004820152600f60248201527f696e2072656d6f766564206c6973740000000000000000000000000000000000604482015260640161097a565b6001609e5f8787858181106124b3576124b3613772565b90506020020160208101906124c891906131c6565b6001600160a01b0316815260208101919091526040015f20805460ff1916911515919091179055600101612401565b505f5b8181101561255457609e5f84848481811061251757612517613772565b905060200201602081019061252c91906131c6565b6001600160a01b0316815260208101919091526040015f20805460ff191690556001016124fa565b507fe375867e538b40218c1b3db2ccceaf875eb073e38b510449e6088c1539ac86228484848460405161258a94939291906138cc565b60405180910390a150505050565b6125a0612a75565b6125a8612cb9565b609d546125b58282612d12565b5f609d55604080516001600160a01b0384168152602081018390527fa1fefb6c5328a92a416e321ed50997303fe7135fd88c28b0592b21ce42b5cdd9910160405180910390a1506110526001606555565b5f61261082611948565b61265c5760405162461bcd60e51b815260206004820152600e60248201527f696e76616c6964207374616b6572000000000000000000000000000000000000604482015260640161097a565b506001600160a01b03165f90815261019f6020526040902054600160ff9091161b90565b5f60ff8211156126d25760405162461bcd60e51b815260206004820152601c60248201527f7374616b657273206c656e677468206f7574206f6620626f756e647300000000604482015260640161097a565b5f5b828110156127ab576127068484838181106126f1576126f1613772565b905060200201602081019061055991906131c6565b6127525760405162461bcd60e51b815260206004820152600e60248201527f696e76616c6964207374616b6572000000000000000000000000000000000000604482015260640161097a565b61019f5f85858481811061276857612768613772565b905060200201602081019061277d91906131c6565b6001600160a01b0316815260208101919091526040015f2054600160ff90911681901b9290921791016126d4565b5092915050565b6127ba612a75565b6001600160a01b0381166128365760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161097a565b61105281612dc2565b5f5b60ff8160ff161015612904575f60a060ff80841690811061286457612864613772565b01546001600160a01b0316036128fc578160a08260ff1660ff811061288b5761288b613772565b0180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03929092169190911790556128cd8160016138fd565b6001600160a01b03929092165f90815261019f60205260409020805460ff191660ff9093169290921790915550565b600101612841565b5060405162461bcd60e51b815260206004820152600960248201527f736c6f742066756c6c0000000000000000000000000000000000000000000000604482015260640161097a565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b2267a7b7f00000000000000000000000000000000000000000000000000000000000000005f846040516024016129af9190613916565b60408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f6d454d5100000000000000000000000000000000000000000000000000000000179052609b5490517fffffffff0000000000000000000000000000000000000000000000000000000060e087901b168152612a45949392919060040161394d565b5f604051808303815f87803b158015612a5c575f80fd5b505af1158015612a6e573d5f803e3d5ffd5b5050505050565b6033546001600160a01b031633146119d25760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161097a565b6001600160a01b0381165f9081526101a1602052604090205415612b355760405162461bcd60e51b815260206004820152601560248201527f616c726561647920696e2064656c6574654c6973740000000000000000000000604482015260640161097a565b6101a080546001810182555f919091527f7980fe0f714a613298681d64b7b8ffa7b148338dd52429f307d72798d5c317c40180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b038316179055609954612ba590436137cc565b6001600160a01b039091165f9081526101a16020526040902055565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b2267a7b7f00000000000000000000000000000000000000000000000000000000000000005f84604051602401612c2391906134d2565b60408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f0be67fcc00000000000000000000000000000000000000000000000000000000179052609c5490517fffffffff0000000000000000000000000000000000000000000000000000000060e087901b168152612a45949392919060040161394d565b600260655403612d0b5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161097a565b6002606555565b8015612db7575f826001600160a01b0316826040515f6040518083038185875af1925050503d805f8114612d61576040519150601f19603f3d011682016040523d82523d5f602084013e612d66565b606091505b5050905080610d165760405162461bcd60e51b815260206004820152601b60248201527f526f6c6c75703a20455448207472616e73666572206661696c65640000000000604482015260640161097a565b5050565b6001606555565b603380546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35050565b5f54610100900460ff16612ea75760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161097a565b6119d2612f33565b5f54610100900460ff16612f2b5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161097a565b6119d2612fb8565b5f54610100900460ff16612faf5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161097a565b6119d233612dc2565b5f54610100900460ff16612dbb5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161097a565b508054613040906135df565b5f825580601f1061304f575050565b601f0160209004905f5260205f2090810190611052919061308a565b60405180611fe0016040528060ff906020820280368337509192915050565b5b8082111561309e575f815560010161308b565b5090565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b604051601f8201601f1916810167ffffffffffffffff811182821017156130f8576130f86130a2565b604052919050565b5f82601f83011261310f575f80fd5b813567ffffffffffffffff811115613129576131296130a2565b61313c6020601f19601f840116016130cf565b818152846020838601011115613150575f80fd5b816020850160208301375f918101602001919091529392505050565b5f806040838503121561317d575f80fd5b82359150602083013567ffffffffffffffff81111561319a575f80fd5b6131a685828601613100565b9150509250929050565b80356001600160a01b03811681146118a8575f80fd5b5f602082840312156131d6575f80fd5b6131df826131b0565b9392505050565b5f602082840312156131f6575f80fd5b5035919050565b5f602080838503121561320e575f80fd5b823567ffffffffffffffff80821115613225575f80fd5b818501915085601f830112613238575f80fd5b81358181111561324a5761324a6130a2565b8060051b915061325b8483016130cf565b8181529183018401918481019088841115613274575f80fd5b938501935b838510156132995761328a856131b0565b82529385019390850190613279565b98975050505050505050565b611fe0810181835f5b60ff8110156132d65781516001600160a01b03168352602092830192909101906001016132ae565b50505092915050565b5f8083601f8401126132ef575f80fd5b50813567ffffffffffffffff811115613306575f80fd5b6020830191508360208260051b8501011115613320575f80fd5b9250929050565b5f805f805f806080878903121561333c575f80fd5b86359550602087013567ffffffffffffffff8082111561335a575f80fd5b6133668a838b016132df565b9097509550604089013594506060890135915080821115613385575f80fd5b818901915089601f830112613398575f80fd5b8135818111156133a6575f80fd5b8a60208285010111156133b7575f80fd5b6020830194508093505050509295509295509295565b5f602082840312156133dd575f80fd5b813567ffffffffffffffff8111156133f3575f80fd5b6133ff84828501613100565b949350505050565b5f805f805f805f60e0888a03121561341d575f80fd5b613426886131b0565b9960208901359950604089013598606081013598506080810135975060a0810135965060c00135945092505050565b5f5b8381101561346f578181015183820152602001613457565b50505f910152565b5f815180845261348e816020860160208601613455565b601f01601f19169290920160200192915050565b6001600160a01b0384168152826020820152606060408201525f6134c96060830184613477565b95945050505050565b602080825282518282018190525f9190848201906040850190845b818110156135125783516001600160a01b0316835292840192918401916001016134ed565b50909695505050505050565b5f805f8060408587031215613531575f80fd5b843567ffffffffffffffff80821115613548575f80fd5b613554888389016132df565b9096509450602087013591508082111561356c575f80fd5b50613579878288016132df565b95989497509550505050565b5f8060208385031215613596575f80fd5b823567ffffffffffffffff8111156135ac575f80fd5b6135b8858286016132df565b90969095509350505050565b5f82516135d5818460208701613455565b9190910192915050565b600181811c908216806135f357607f821691505b60208210810361362a577f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b50919050565b601f821115610d1657805f5260205f20601f840160051c810160208510156136555750805b601f840160051c820191505b81811015612a6e575f8155600101613661565b815167ffffffffffffffff81111561368e5761368e6130a2565b6136a28161369c84546135df565b84613630565b602080601f8311600181146136f4575f84156136be5750858301515b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600386901b1c1916600185901b17855561376a565b5f85815260208120601f198616915b8281101561372257888601518255948401946001909101908401613703565b508582101561375e57878501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600388901b60f8161c191681555b505060018460011b0185555b505050505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b808201808211156119425761194261379f565b60ff82811682821603908111156119425761194261379f565b818103818111156119425761194261379f565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603160045260245ffd5b80820281158282048414176119425761194261379f565b5f82613882577f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b500490565b8183525f60208085019450825f5b858110156138c1576001600160a01b036138ae836131b0565b1687529582019590820190600101613895565b509495945050505050565b604081525f6138df604083018688613887565b82810360208401526138f2818587613887565b979650505050505050565b60ff81811683821601908111156119425761194261379f565b602081526001600160a01b038251166020820152602082015160408201525f60408301516060808401526133ff6080840182613477565b6001600160a01b0385168152836020820152608060408201525f6139746080830185613477565b90508260608301529594505050505056fea164736f6c6343000818000a",
}

// L1StakingABI is the input ABI used to generate the binding from.
// Deprecated: Use L1StakingMetaData.ABI instead.
var L1StakingABI = L1StakingMetaData.ABI

// L1StakingBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use L1StakingMetaData.Bin instead.
var L1StakingBin = L1StakingMetaData.Bin

// DeployL1Staking deploys a new Ethereum contract, binding an instance of L1Staking to it.
func DeployL1Staking(auth *bind.TransactOpts, backend bind.ContractBackend, _messenger common.Address) (common.Address, *types.Transaction, *L1Staking, error) {
	parsed, err := L1StakingMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(L1StakingBin), backend, _messenger)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &L1Staking{L1StakingCaller: L1StakingCaller{contract: contract}, L1StakingTransactor: L1StakingTransactor{contract: contract}, L1StakingFilterer: L1StakingFilterer{contract: contract}}, nil
}

// L1Staking is an auto generated Go binding around an Ethereum contract.
type L1Staking struct {
	L1StakingCaller     // Read-only binding to the contract
	L1StakingTransactor // Write-only binding to the contract
	L1StakingFilterer   // Log filterer for contract events
}

// L1StakingCaller is an auto generated read-only Go binding around an Ethereum contract.
type L1StakingCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// L1StakingTransactor is an auto generated write-only Go binding around an Ethereum contract.
type L1StakingTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// L1StakingFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type L1StakingFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// L1StakingSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type L1StakingSession struct {
	Contract     *L1Staking        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// L1StakingCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type L1StakingCallerSession struct {
	Contract *L1StakingCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// L1StakingTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type L1StakingTransactorSession struct {
	Contract     *L1StakingTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// L1StakingRaw is an auto generated low-level Go binding around an Ethereum contract.
type L1StakingRaw struct {
	Contract *L1Staking // Generic contract binding to access the raw methods on
}

// L1StakingCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type L1StakingCallerRaw struct {
	Contract *L1StakingCaller // Generic read-only contract binding to access the raw methods on
}

// L1StakingTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type L1StakingTransactorRaw struct {
	Contract *L1StakingTransactor // Generic write-only contract binding to access the raw methods on
}

// NewL1Staking creates a new instance of L1Staking, bound to a specific deployed contract.
func NewL1Staking(address common.Address, backend bind.ContractBackend) (*L1Staking, error) {
	contract, err := bindL1Staking(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &L1Staking{L1StakingCaller: L1StakingCaller{contract: contract}, L1StakingTransactor: L1StakingTransactor{contract: contract}, L1StakingFilterer: L1StakingFilterer{contract: contract}}, nil
}

// NewL1StakingCaller creates a new read-only instance of L1Staking, bound to a specific deployed contract.
func NewL1StakingCaller(address common.Address, caller bind.ContractCaller) (*L1StakingCaller, error) {
	contract, err := bindL1Staking(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &L1StakingCaller{contract: contract}, nil
}

// NewL1StakingTransactor creates a new write-only instance of L1Staking, bound to a specific deployed contract.
func NewL1StakingTransactor(address common.Address, transactor bind.ContractTransactor) (*L1StakingTransactor, error) {
	contract, err := bindL1Staking(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &L1StakingTransactor{contract: contract}, nil
}

// NewL1StakingFilterer creates a new log filterer instance of L1Staking, bound to a specific deployed contract.
func NewL1StakingFilterer(address common.Address, filterer bind.ContractFilterer) (*L1StakingFilterer, error) {
	contract, err := bindL1Staking(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &L1StakingFilterer{contract: contract}, nil
}

// bindL1Staking binds a generic wrapper to an already deployed contract.
func bindL1Staking(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := L1StakingMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_L1Staking *L1StakingRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _L1Staking.Contract.L1StakingCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_L1Staking *L1StakingRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _L1Staking.Contract.L1StakingTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_L1Staking *L1StakingRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _L1Staking.Contract.L1StakingTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_L1Staking *L1StakingCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _L1Staking.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_L1Staking *L1StakingTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _L1Staking.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_L1Staking *L1StakingTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _L1Staking.Contract.contract.Transact(opts, method, params...)
}

// MESSENGER is a free data retrieval call binding the contract method 0x927ede2d.
//
// Solidity: function MESSENGER() view returns(address)
func (_L1Staking *L1StakingCaller) MESSENGER(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _L1Staking.contract.Call(opts, &out, "MESSENGER")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// MESSENGER is a free data retrieval call binding the contract method 0x927ede2d.
//
// Solidity: function MESSENGER() view returns(address)
func (_L1Staking *L1StakingSession) MESSENGER() (common.Address, error) {
	return _L1Staking.Contract.MESSENGER(&_L1Staking.CallOpts)
}

// MESSENGER is a free data retrieval call binding the contract method 0x927ede2d.
//
// Solidity: function MESSENGER() view returns(address)
func (_L1Staking *L1StakingCallerSession) MESSENGER() (common.Address, error) {
	return _L1Staking.Contract.MESSENGER(&_L1Staking.CallOpts)
}

// OTHERSTAKING is a free data retrieval call binding the contract method 0x831cfb58.
//
// Solidity: function OTHER_STAKING() view returns(address)
func (_L1Staking *L1StakingCaller) OTHERSTAKING(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _L1Staking.contract.Call(opts, &out, "OTHER_STAKING")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OTHERSTAKING is a free data retrieval call binding the contract method 0x831cfb58.
//
// Solidity: function OTHER_STAKING() view returns(address)
func (_L1Staking *L1StakingSession) OTHERSTAKING() (common.Address, error) {
	return _L1Staking.Contract.OTHERSTAKING(&_L1Staking.CallOpts)
}

// OTHERSTAKING is a free data retrieval call binding the contract method 0x831cfb58.
//
// Solidity: function OTHER_STAKING() view returns(address)
func (_L1Staking *L1StakingCallerSession) OTHERSTAKING() (common.Address, error) {
	return _L1Staking.Contract.OTHERSTAKING(&_L1Staking.CallOpts)
}

// BlsKeys is a free data retrieval call binding the contract method 0x7a4e87c3.
//
// Solidity: function blsKeys(bytes blsPubkey) view returns(bool)
func (_L1Staking *L1StakingCaller) BlsKeys(opts *bind.CallOpts, blsPubkey []byte) (bool, error) {
	var out []interface{}
	err := _L1Staking.contract.Call(opts, &out, "blsKeys", blsPubkey)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// BlsKeys is a free data retrieval call binding the contract method 0x7a4e87c3.
//
// Solidity: function blsKeys(bytes blsPubkey) view returns(bool)
func (_L1Staking *L1StakingSession) BlsKeys(blsPubkey []byte) (bool, error) {
	return _L1Staking.Contract.BlsKeys(&_L1Staking.CallOpts, blsPubkey)
}

// BlsKeys is a free data retrieval call binding the contract method 0x7a4e87c3.
//
// Solidity: function blsKeys(bytes blsPubkey) view returns(bool)
func (_L1Staking *L1StakingCallerSession) BlsKeys(blsPubkey []byte) (bool, error) {
	return _L1Staking.Contract.BlsKeys(&_L1Staking.CallOpts, blsPubkey)
}

// ChallengeDeposit is a free data retrieval call binding the contract method 0x0d13fd7b.
//
// Solidity: function challengeDeposit() view returns(uint256)
func (_L1Staking *L1StakingCaller) ChallengeDeposit(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _L1Staking.contract.Call(opts, &out, "challengeDeposit")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ChallengeDeposit is a free data retrieval call binding the contract method 0x0d13fd7b.
//
// Solidity: function challengeDeposit() view returns(uint256)
func (_L1Staking *L1StakingSession) ChallengeDeposit() (*big.Int, error) {
	return _L1Staking.Contract.ChallengeDeposit(&_L1Staking.CallOpts)
}

// ChallengeDeposit is a free data retrieval call binding the contract method 0x0d13fd7b.
//
// Solidity: function challengeDeposit() view returns(uint256)
func (_L1Staking *L1StakingCallerSession) ChallengeDeposit() (*big.Int, error) {
	return _L1Staking.Contract.ChallengeDeposit(&_L1Staking.CallOpts)
}

// DeleteList is a free data retrieval call binding the contract method 0x797adbde.
//
// Solidity: function deleteList(uint256 ) view returns(address)
func (_L1Staking *L1StakingCaller) DeleteList(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _L1Staking.contract.Call(opts, &out, "deleteList", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// DeleteList is a free data retrieval call binding the contract method 0x797adbde.
//
// Solidity: function deleteList(uint256 ) view returns(address)
func (_L1Staking *L1StakingSession) DeleteList(arg0 *big.Int) (common.Address, error) {
	return _L1Staking.Contract.DeleteList(&_L1Staking.CallOpts, arg0)
}

// DeleteList is a free data retrieval call binding the contract method 0x797adbde.
//
// Solidity: function deleteList(uint256 ) view returns(address)
func (_L1Staking *L1StakingCallerSession) DeleteList(arg0 *big.Int) (common.Address, error) {
	return _L1Staking.Contract.DeleteList(&_L1Staking.CallOpts, arg0)
}

// DeleteableHeight is a free data retrieval call binding the contract method 0x2e407a6f.
//
// Solidity: function deleteableHeight(address ) view returns(uint256)
func (_L1Staking *L1StakingCaller) DeleteableHeight(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _L1Staking.contract.Call(opts, &out, "deleteableHeight", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// DeleteableHeight is a free data retrieval call binding the contract method 0x2e407a6f.
//
// Solidity: function deleteableHeight(address ) view returns(uint256)
func (_L1Staking *L1StakingSession) DeleteableHeight(arg0 common.Address) (*big.Int, error) {
	return _L1Staking.Contract.DeleteableHeight(&_L1Staking.CallOpts, arg0)
}

// DeleteableHeight is a free data retrieval call binding the contract method 0x2e407a6f.
//
// Solidity: function deleteableHeight(address ) view returns(uint256)
func (_L1Staking *L1StakingCallerSession) DeleteableHeight(arg0 common.Address) (*big.Int, error) {
	return _L1Staking.Contract.DeleteableHeight(&_L1Staking.CallOpts, arg0)
}

// GasLimitAddStaker is a free data retrieval call binding the contract method 0xd51c90a9.
//
// Solidity: function gasLimitAddStaker() view returns(uint256)
func (_L1Staking *L1StakingCaller) GasLimitAddStaker(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _L1Staking.contract.Call(opts, &out, "gasLimitAddStaker")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GasLimitAddStaker is a free data retrieval call binding the contract method 0xd51c90a9.
//
// Solidity: function gasLimitAddStaker() view returns(uint256)
func (_L1Staking *L1StakingSession) GasLimitAddStaker() (*big.Int, error) {
	return _L1Staking.Contract.GasLimitAddStaker(&_L1Staking.CallOpts)
}

// GasLimitAddStaker is a free data retrieval call binding the contract method 0xd51c90a9.
//
// Solidity: function gasLimitAddStaker() view returns(uint256)
func (_L1Staking *L1StakingCallerSession) GasLimitAddStaker() (*big.Int, error) {
	return _L1Staking.Contract.GasLimitAddStaker(&_L1Staking.CallOpts)
}

// GasLimitRemoveStakers is a free data retrieval call binding the contract method 0x2108db35.
//
// Solidity: function gasLimitRemoveStakers() view returns(uint256)
func (_L1Staking *L1StakingCaller) GasLimitRemoveStakers(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _L1Staking.contract.Call(opts, &out, "gasLimitRemoveStakers")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GasLimitRemoveStakers is a free data retrieval call binding the contract method 0x2108db35.
//
// Solidity: function gasLimitRemoveStakers() view returns(uint256)
func (_L1Staking *L1StakingSession) GasLimitRemoveStakers() (*big.Int, error) {
	return _L1Staking.Contract.GasLimitRemoveStakers(&_L1Staking.CallOpts)
}

// GasLimitRemoveStakers is a free data retrieval call binding the contract method 0x2108db35.
//
// Solidity: function gasLimitRemoveStakers() view returns(uint256)
func (_L1Staking *L1StakingCallerSession) GasLimitRemoveStakers() (*big.Int, error) {
	return _L1Staking.Contract.GasLimitRemoveStakers(&_L1Staking.CallOpts)
}

// GetStakerBitmap is a free data retrieval call binding the contract method 0xd096c3c6.
//
// Solidity: function getStakerBitmap(address _staker) view returns(uint256 bitmap)
func (_L1Staking *L1StakingCaller) GetStakerBitmap(opts *bind.CallOpts, _staker common.Address) (*big.Int, error) {
	var out []interface{}
	err := _L1Staking.contract.Call(opts, &out, "getStakerBitmap", _staker)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetStakerBitmap is a free data retrieval call binding the contract method 0xd096c3c6.
//
// Solidity: function getStakerBitmap(address _staker) view returns(uint256 bitmap)
func (_L1Staking *L1StakingSession) GetStakerBitmap(_staker common.Address) (*big.Int, error) {
	return _L1Staking.Contract.GetStakerBitmap(&_L1Staking.CallOpts, _staker)
}

// GetStakerBitmap is a free data retrieval call binding the contract method 0xd096c3c6.
//
// Solidity: function getStakerBitmap(address _staker) view returns(uint256 bitmap)
func (_L1Staking *L1StakingCallerSession) GetStakerBitmap(_staker common.Address) (*big.Int, error) {
	return _L1Staking.Contract.GetStakerBitmap(&_L1Staking.CallOpts, _staker)
}

// GetStakers is a free data retrieval call binding the contract method 0x43352d61.
//
// Solidity: function getStakers() view returns(address[255])
func (_L1Staking *L1StakingCaller) GetStakers(opts *bind.CallOpts) ([255]common.Address, error) {
	var out []interface{}
	err := _L1Staking.contract.Call(opts, &out, "getStakers")

	if err != nil {
		return *new([255]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([255]common.Address)).(*[255]common.Address)

	return out0, err

}

// GetStakers is a free data retrieval call binding the contract method 0x43352d61.
//
// Solidity: function getStakers() view returns(address[255])
func (_L1Staking *L1StakingSession) GetStakers() ([255]common.Address, error) {
	return _L1Staking.Contract.GetStakers(&_L1Staking.CallOpts)
}

// GetStakers is a free data retrieval call binding the contract method 0x43352d61.
//
// Solidity: function getStakers() view returns(address[255])
func (_L1Staking *L1StakingCallerSession) GetStakers() ([255]common.Address, error) {
	return _L1Staking.Contract.GetStakers(&_L1Staking.CallOpts)
}

// GetStakersBitmap is a free data retrieval call binding the contract method 0xe2a6ad5f.
//
// Solidity: function getStakersBitmap(address[] _stakers) view returns(uint256 bitmap)
func (_L1Staking *L1StakingCaller) GetStakersBitmap(opts *bind.CallOpts, _stakers []common.Address) (*big.Int, error) {
	var out []interface{}
	err := _L1Staking.contract.Call(opts, &out, "getStakersBitmap", _stakers)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetStakersBitmap is a free data retrieval call binding the contract method 0xe2a6ad5f.
//
// Solidity: function getStakersBitmap(address[] _stakers) view returns(uint256 bitmap)
func (_L1Staking *L1StakingSession) GetStakersBitmap(_stakers []common.Address) (*big.Int, error) {
	return _L1Staking.Contract.GetStakersBitmap(&_L1Staking.CallOpts, _stakers)
}

// GetStakersBitmap is a free data retrieval call binding the contract method 0xe2a6ad5f.
//
// Solidity: function getStakersBitmap(address[] _stakers) view returns(uint256 bitmap)
func (_L1Staking *L1StakingCallerSession) GetStakersBitmap(_stakers []common.Address) (*big.Int, error) {
	return _L1Staking.Contract.GetStakersBitmap(&_L1Staking.CallOpts, _stakers)
}

// GetStakersFromBitmap is a free data retrieval call binding the contract method 0x9d48f417.
//
// Solidity: function getStakersFromBitmap(uint256 bitmap) view returns(address[] stakerAddrs)
func (_L1Staking *L1StakingCaller) GetStakersFromBitmap(opts *bind.CallOpts, bitmap *big.Int) ([]common.Address, error) {
	var out []interface{}
	err := _L1Staking.contract.Call(opts, &out, "getStakersFromBitmap", bitmap)

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetStakersFromBitmap is a free data retrieval call binding the contract method 0x9d48f417.
//
// Solidity: function getStakersFromBitmap(uint256 bitmap) view returns(address[] stakerAddrs)
func (_L1Staking *L1StakingSession) GetStakersFromBitmap(bitmap *big.Int) ([]common.Address, error) {
	return _L1Staking.Contract.GetStakersFromBitmap(&_L1Staking.CallOpts, bitmap)
}

// GetStakersFromBitmap is a free data retrieval call binding the contract method 0x9d48f417.
//
// Solidity: function getStakersFromBitmap(uint256 bitmap) view returns(address[] stakerAddrs)
func (_L1Staking *L1StakingCallerSession) GetStakersFromBitmap(bitmap *big.Int) ([]common.Address, error) {
	return _L1Staking.Contract.GetStakersFromBitmap(&_L1Staking.CallOpts, bitmap)
}

// IsActiveStaker is a free data retrieval call binding the contract method 0x68015791.
//
// Solidity: function isActiveStaker(address addr) view returns(bool)
func (_L1Staking *L1StakingCaller) IsActiveStaker(opts *bind.CallOpts, addr common.Address) (bool, error) {
	var out []interface{}
	err := _L1Staking.contract.Call(opts, &out, "isActiveStaker", addr)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsActiveStaker is a free data retrieval call binding the contract method 0x68015791.
//
// Solidity: function isActiveStaker(address addr) view returns(bool)
func (_L1Staking *L1StakingSession) IsActiveStaker(addr common.Address) (bool, error) {
	return _L1Staking.Contract.IsActiveStaker(&_L1Staking.CallOpts, addr)
}

// IsActiveStaker is a free data retrieval call binding the contract method 0x68015791.
//
// Solidity: function isActiveStaker(address addr) view returns(bool)
func (_L1Staking *L1StakingCallerSession) IsActiveStaker(addr common.Address) (bool, error) {
	return _L1Staking.Contract.IsActiveStaker(&_L1Staking.CallOpts, addr)
}

// IsStaker is a free data retrieval call binding the contract method 0x6f1e8533.
//
// Solidity: function isStaker(address addr) view returns(bool)
func (_L1Staking *L1StakingCaller) IsStaker(opts *bind.CallOpts, addr common.Address) (bool, error) {
	var out []interface{}
	err := _L1Staking.contract.Call(opts, &out, "isStaker", addr)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsStaker is a free data retrieval call binding the contract method 0x6f1e8533.
//
// Solidity: function isStaker(address addr) view returns(bool)
func (_L1Staking *L1StakingSession) IsStaker(addr common.Address) (bool, error) {
	return _L1Staking.Contract.IsStaker(&_L1Staking.CallOpts, addr)
}

// IsStaker is a free data retrieval call binding the contract method 0x6f1e8533.
//
// Solidity: function isStaker(address addr) view returns(bool)
func (_L1Staking *L1StakingCallerSession) IsStaker(addr common.Address) (bool, error) {
	return _L1Staking.Contract.IsStaker(&_L1Staking.CallOpts, addr)
}

// IsStakerInDeleteList is a free data retrieval call binding the contract method 0xdf155033.
//
// Solidity: function isStakerInDeleteList(address addr) view returns(bool)
func (_L1Staking *L1StakingCaller) IsStakerInDeleteList(opts *bind.CallOpts, addr common.Address) (bool, error) {
	var out []interface{}
	err := _L1Staking.contract.Call(opts, &out, "isStakerInDeleteList", addr)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsStakerInDeleteList is a free data retrieval call binding the contract method 0xdf155033.
//
// Solidity: function isStakerInDeleteList(address addr) view returns(bool)
func (_L1Staking *L1StakingSession) IsStakerInDeleteList(addr common.Address) (bool, error) {
	return _L1Staking.Contract.IsStakerInDeleteList(&_L1Staking.CallOpts, addr)
}

// IsStakerInDeleteList is a free data retrieval call binding the contract method 0xdf155033.
//
// Solidity: function isStakerInDeleteList(address addr) view returns(bool)
func (_L1Staking *L1StakingCallerSession) IsStakerInDeleteList(addr common.Address) (bool, error) {
	return _L1Staking.Contract.IsStakerInDeleteList(&_L1Staking.CallOpts, addr)
}

// Messenger is a free data retrieval call binding the contract method 0x3cb747bf.
//
// Solidity: function messenger() view returns(address)
func (_L1Staking *L1StakingCaller) Messenger(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _L1Staking.contract.Call(opts, &out, "messenger")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Messenger is a free data retrieval call binding the contract method 0x3cb747bf.
//
// Solidity: function messenger() view returns(address)
func (_L1Staking *L1StakingSession) Messenger() (common.Address, error) {
	return _L1Staking.Contract.Messenger(&_L1Staking.CallOpts)
}

// Messenger is a free data retrieval call binding the contract method 0x3cb747bf.
//
// Solidity: function messenger() view returns(address)
func (_L1Staking *L1StakingCallerSession) Messenger() (common.Address, error) {
	return _L1Staking.Contract.Messenger(&_L1Staking.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_L1Staking *L1StakingCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _L1Staking.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_L1Staking *L1StakingSession) Owner() (common.Address, error) {
	return _L1Staking.Contract.Owner(&_L1Staking.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_L1Staking *L1StakingCallerSession) Owner() (common.Address, error) {
	return _L1Staking.Contract.Owner(&_L1Staking.CallOpts)
}

// RemovedList is a free data retrieval call binding the contract method 0x3a9bbede.
//
// Solidity: function removedList(address ) view returns(bool)
func (_L1Staking *L1StakingCaller) RemovedList(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _L1Staking.contract.Call(opts, &out, "removedList", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// RemovedList is a free data retrieval call binding the contract method 0x3a9bbede.
//
// Solidity: function removedList(address ) view returns(bool)
func (_L1Staking *L1StakingSession) RemovedList(arg0 common.Address) (bool, error) {
	return _L1Staking.Contract.RemovedList(&_L1Staking.CallOpts, arg0)
}

// RemovedList is a free data retrieval call binding the contract method 0x3a9bbede.
//
// Solidity: function removedList(address ) view returns(bool)
func (_L1Staking *L1StakingCallerSession) RemovedList(arg0 common.Address) (bool, error) {
	return _L1Staking.Contract.RemovedList(&_L1Staking.CallOpts, arg0)
}

// RewardPercentage is a free data retrieval call binding the contract method 0x52d472eb.
//
// Solidity: function rewardPercentage() view returns(uint256)
func (_L1Staking *L1StakingCaller) RewardPercentage(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _L1Staking.contract.Call(opts, &out, "rewardPercentage")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RewardPercentage is a free data retrieval call binding the contract method 0x52d472eb.
//
// Solidity: function rewardPercentage() view returns(uint256)
func (_L1Staking *L1StakingSession) RewardPercentage() (*big.Int, error) {
	return _L1Staking.Contract.RewardPercentage(&_L1Staking.CallOpts)
}

// RewardPercentage is a free data retrieval call binding the contract method 0x52d472eb.
//
// Solidity: function rewardPercentage() view returns(uint256)
func (_L1Staking *L1StakingCallerSession) RewardPercentage() (*big.Int, error) {
	return _L1Staking.Contract.RewardPercentage(&_L1Staking.CallOpts)
}

// RollupContract is a free data retrieval call binding the contract method 0xbfa02ba9.
//
// Solidity: function rollupContract() view returns(address)
func (_L1Staking *L1StakingCaller) RollupContract(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _L1Staking.contract.Call(opts, &out, "rollupContract")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RollupContract is a free data retrieval call binding the contract method 0xbfa02ba9.
//
// Solidity: function rollupContract() view returns(address)
func (_L1Staking *L1StakingSession) RollupContract() (common.Address, error) {
	return _L1Staking.Contract.RollupContract(&_L1Staking.CallOpts)
}

// RollupContract is a free data retrieval call binding the contract method 0xbfa02ba9.
//
// Solidity: function rollupContract() view returns(address)
func (_L1Staking *L1StakingCallerSession) RollupContract() (common.Address, error) {
	return _L1Staking.Contract.RollupContract(&_L1Staking.CallOpts)
}

// SlashRemaining is a free data retrieval call binding the contract method 0xab8c53dc.
//
// Solidity: function slashRemaining() view returns(uint256)
func (_L1Staking *L1StakingCaller) SlashRemaining(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _L1Staking.contract.Call(opts, &out, "slashRemaining")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SlashRemaining is a free data retrieval call binding the contract method 0xab8c53dc.
//
// Solidity: function slashRemaining() view returns(uint256)
func (_L1Staking *L1StakingSession) SlashRemaining() (*big.Int, error) {
	return _L1Staking.Contract.SlashRemaining(&_L1Staking.CallOpts)
}

// SlashRemaining is a free data retrieval call binding the contract method 0xab8c53dc.
//
// Solidity: function slashRemaining() view returns(uint256)
func (_L1Staking *L1StakingCallerSession) SlashRemaining() (*big.Int, error) {
	return _L1Staking.Contract.SlashRemaining(&_L1Staking.CallOpts)
}

// StakerIndexes is a free data retrieval call binding the contract method 0xdd4785f5.
//
// Solidity: function stakerIndexes(address ) view returns(uint8)
func (_L1Staking *L1StakingCaller) StakerIndexes(opts *bind.CallOpts, arg0 common.Address) (uint8, error) {
	var out []interface{}
	err := _L1Staking.contract.Call(opts, &out, "stakerIndexes", arg0)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// StakerIndexes is a free data retrieval call binding the contract method 0xdd4785f5.
//
// Solidity: function stakerIndexes(address ) view returns(uint8)
func (_L1Staking *L1StakingSession) StakerIndexes(arg0 common.Address) (uint8, error) {
	return _L1Staking.Contract.StakerIndexes(&_L1Staking.CallOpts, arg0)
}

// StakerIndexes is a free data retrieval call binding the contract method 0xdd4785f5.
//
// Solidity: function stakerIndexes(address ) view returns(uint8)
func (_L1Staking *L1StakingCallerSession) StakerIndexes(arg0 common.Address) (uint8, error) {
	return _L1Staking.Contract.StakerIndexes(&_L1Staking.CallOpts, arg0)
}

// StakerSet is a free data retrieval call binding the contract method 0x303afb9e.
//
// Solidity: function stakerSet(uint256 ) view returns(address)
func (_L1Staking *L1StakingCaller) StakerSet(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _L1Staking.contract.Call(opts, &out, "stakerSet", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// StakerSet is a free data retrieval call binding the contract method 0x303afb9e.
//
// Solidity: function stakerSet(uint256 ) view returns(address)
func (_L1Staking *L1StakingSession) StakerSet(arg0 *big.Int) (common.Address, error) {
	return _L1Staking.Contract.StakerSet(&_L1Staking.CallOpts, arg0)
}

// StakerSet is a free data retrieval call binding the contract method 0x303afb9e.
//
// Solidity: function stakerSet(uint256 ) view returns(address)
func (_L1Staking *L1StakingCallerSession) StakerSet(arg0 *big.Int) (common.Address, error) {
	return _L1Staking.Contract.StakerSet(&_L1Staking.CallOpts, arg0)
}

// Stakers is a free data retrieval call binding the contract method 0x9168ae72.
//
// Solidity: function stakers(address ) view returns(address addr, bytes32 tmKey, bytes blsKey)
func (_L1Staking *L1StakingCaller) Stakers(opts *bind.CallOpts, arg0 common.Address) (struct {
	Addr   common.Address
	TmKey  [32]byte
	BlsKey []byte
}, error) {
	var out []interface{}
	err := _L1Staking.contract.Call(opts, &out, "stakers", arg0)

	outstruct := new(struct {
		Addr   common.Address
		TmKey  [32]byte
		BlsKey []byte
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Addr = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.TmKey = *abi.ConvertType(out[1], new([32]byte)).(*[32]byte)
	outstruct.BlsKey = *abi.ConvertType(out[2], new([]byte)).(*[]byte)

	return *outstruct, err

}

// Stakers is a free data retrieval call binding the contract method 0x9168ae72.
//
// Solidity: function stakers(address ) view returns(address addr, bytes32 tmKey, bytes blsKey)
func (_L1Staking *L1StakingSession) Stakers(arg0 common.Address) (struct {
	Addr   common.Address
	TmKey  [32]byte
	BlsKey []byte
}, error) {
	return _L1Staking.Contract.Stakers(&_L1Staking.CallOpts, arg0)
}

// Stakers is a free data retrieval call binding the contract method 0x9168ae72.
//
// Solidity: function stakers(address ) view returns(address addr, bytes32 tmKey, bytes blsKey)
func (_L1Staking *L1StakingCallerSession) Stakers(arg0 common.Address) (struct {
	Addr   common.Address
	TmKey  [32]byte
	BlsKey []byte
}, error) {
	return _L1Staking.Contract.Stakers(&_L1Staking.CallOpts, arg0)
}

// StakingValue is a free data retrieval call binding the contract method 0x4d64903a.
//
// Solidity: function stakingValue() view returns(uint256)
func (_L1Staking *L1StakingCaller) StakingValue(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _L1Staking.contract.Call(opts, &out, "stakingValue")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// StakingValue is a free data retrieval call binding the contract method 0x4d64903a.
//
// Solidity: function stakingValue() view returns(uint256)
func (_L1Staking *L1StakingSession) StakingValue() (*big.Int, error) {
	return _L1Staking.Contract.StakingValue(&_L1Staking.CallOpts)
}

// StakingValue is a free data retrieval call binding the contract method 0x4d64903a.
//
// Solidity: function stakingValue() view returns(uint256)
func (_L1Staking *L1StakingCallerSession) StakingValue() (*big.Int, error) {
	return _L1Staking.Contract.StakingValue(&_L1Staking.CallOpts)
}

// TmKeys is a free data retrieval call binding the contract method 0x692c565b.
//
// Solidity: function tmKeys(bytes32 tmPubkey) view returns(bool)
func (_L1Staking *L1StakingCaller) TmKeys(opts *bind.CallOpts, tmPubkey [32]byte) (bool, error) {
	var out []interface{}
	err := _L1Staking.contract.Call(opts, &out, "tmKeys", tmPubkey)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// TmKeys is a free data retrieval call binding the contract method 0x692c565b.
//
// Solidity: function tmKeys(bytes32 tmPubkey) view returns(bool)
func (_L1Staking *L1StakingSession) TmKeys(tmPubkey [32]byte) (bool, error) {
	return _L1Staking.Contract.TmKeys(&_L1Staking.CallOpts, tmPubkey)
}

// TmKeys is a free data retrieval call binding the contract method 0x692c565b.
//
// Solidity: function tmKeys(bytes32 tmPubkey) view returns(bool)
func (_L1Staking *L1StakingCallerSession) TmKeys(tmPubkey [32]byte) (bool, error) {
	return _L1Staking.Contract.TmKeys(&_L1Staking.CallOpts, tmPubkey)
}

// VerifySignature is a free data retrieval call binding the contract method 0x74fe27b7.
//
// Solidity: function verifySignature(uint256 , address[] , bytes32 , bytes ) pure returns(bool)
func (_L1Staking *L1StakingCaller) VerifySignature(opts *bind.CallOpts, arg0 *big.Int, arg1 []common.Address, arg2 [32]byte, arg3 []byte) (bool, error) {
	var out []interface{}
	err := _L1Staking.contract.Call(opts, &out, "verifySignature", arg0, arg1, arg2, arg3)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// VerifySignature is a free data retrieval call binding the contract method 0x74fe27b7.
//
// Solidity: function verifySignature(uint256 , address[] , bytes32 , bytes ) pure returns(bool)
func (_L1Staking *L1StakingSession) VerifySignature(arg0 *big.Int, arg1 []common.Address, arg2 [32]byte, arg3 []byte) (bool, error) {
	return _L1Staking.Contract.VerifySignature(&_L1Staking.CallOpts, arg0, arg1, arg2, arg3)
}

// VerifySignature is a free data retrieval call binding the contract method 0x74fe27b7.
//
// Solidity: function verifySignature(uint256 , address[] , bytes32 , bytes ) pure returns(bool)
func (_L1Staking *L1StakingCallerSession) VerifySignature(arg0 *big.Int, arg1 []common.Address, arg2 [32]byte, arg3 []byte) (bool, error) {
	return _L1Staking.Contract.VerifySignature(&_L1Staking.CallOpts, arg0, arg1, arg2, arg3)
}

// Whitelist is a free data retrieval call binding the contract method 0x9b19251a.
//
// Solidity: function whitelist(address ) view returns(bool)
func (_L1Staking *L1StakingCaller) Whitelist(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _L1Staking.contract.Call(opts, &out, "whitelist", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Whitelist is a free data retrieval call binding the contract method 0x9b19251a.
//
// Solidity: function whitelist(address ) view returns(bool)
func (_L1Staking *L1StakingSession) Whitelist(arg0 common.Address) (bool, error) {
	return _L1Staking.Contract.Whitelist(&_L1Staking.CallOpts, arg0)
}

// Whitelist is a free data retrieval call binding the contract method 0x9b19251a.
//
// Solidity: function whitelist(address ) view returns(bool)
func (_L1Staking *L1StakingCallerSession) Whitelist(arg0 common.Address) (bool, error) {
	return _L1Staking.Contract.Whitelist(&_L1Staking.CallOpts, arg0)
}

// WithdrawalLockBlocks is a free data retrieval call binding the contract method 0x41de239b.
//
// Solidity: function withdrawalLockBlocks() view returns(uint256)
func (_L1Staking *L1StakingCaller) WithdrawalLockBlocks(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _L1Staking.contract.Call(opts, &out, "withdrawalLockBlocks")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// WithdrawalLockBlocks is a free data retrieval call binding the contract method 0x41de239b.
//
// Solidity: function withdrawalLockBlocks() view returns(uint256)
func (_L1Staking *L1StakingSession) WithdrawalLockBlocks() (*big.Int, error) {
	return _L1Staking.Contract.WithdrawalLockBlocks(&_L1Staking.CallOpts)
}

// WithdrawalLockBlocks is a free data retrieval call binding the contract method 0x41de239b.
//
// Solidity: function withdrawalLockBlocks() view returns(uint256)
func (_L1Staking *L1StakingCallerSession) WithdrawalLockBlocks() (*big.Int, error) {
	return _L1Staking.Contract.WithdrawalLockBlocks(&_L1Staking.CallOpts)
}

// Withdrawals is a free data retrieval call binding the contract method 0x7a9262a2.
//
// Solidity: function withdrawals(address staker) view returns(uint256)
func (_L1Staking *L1StakingCaller) Withdrawals(opts *bind.CallOpts, staker common.Address) (*big.Int, error) {
	var out []interface{}
	err := _L1Staking.contract.Call(opts, &out, "withdrawals", staker)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Withdrawals is a free data retrieval call binding the contract method 0x7a9262a2.
//
// Solidity: function withdrawals(address staker) view returns(uint256)
func (_L1Staking *L1StakingSession) Withdrawals(staker common.Address) (*big.Int, error) {
	return _L1Staking.Contract.Withdrawals(&_L1Staking.CallOpts, staker)
}

// Withdrawals is a free data retrieval call binding the contract method 0x7a9262a2.
//
// Solidity: function withdrawals(address staker) view returns(uint256)
func (_L1Staking *L1StakingCallerSession) Withdrawals(staker common.Address) (*big.Int, error) {
	return _L1Staking.Contract.Withdrawals(&_L1Staking.CallOpts, staker)
}

// ClaimSlashRemaining is a paid mutator transaction binding the contract method 0xcde4cd11.
//
// Solidity: function claimSlashRemaining(address receiver) returns()
func (_L1Staking *L1StakingTransactor) ClaimSlashRemaining(opts *bind.TransactOpts, receiver common.Address) (*types.Transaction, error) {
	return _L1Staking.contract.Transact(opts, "claimSlashRemaining", receiver)
}

// ClaimSlashRemaining is a paid mutator transaction binding the contract method 0xcde4cd11.
//
// Solidity: function claimSlashRemaining(address receiver) returns()
func (_L1Staking *L1StakingSession) ClaimSlashRemaining(receiver common.Address) (*types.Transaction, error) {
	return _L1Staking.Contract.ClaimSlashRemaining(&_L1Staking.TransactOpts, receiver)
}

// ClaimSlashRemaining is a paid mutator transaction binding the contract method 0xcde4cd11.
//
// Solidity: function claimSlashRemaining(address receiver) returns()
func (_L1Staking *L1StakingTransactorSession) ClaimSlashRemaining(receiver common.Address) (*types.Transaction, error) {
	return _L1Staking.Contract.ClaimSlashRemaining(&_L1Staking.TransactOpts, receiver)
}

// ClaimWithdrawal is a paid mutator transaction binding the contract method 0xa3066aab.
//
// Solidity: function claimWithdrawal(address receiver) returns()
func (_L1Staking *L1StakingTransactor) ClaimWithdrawal(opts *bind.TransactOpts, receiver common.Address) (*types.Transaction, error) {
	return _L1Staking.contract.Transact(opts, "claimWithdrawal", receiver)
}

// ClaimWithdrawal is a paid mutator transaction binding the contract method 0xa3066aab.
//
// Solidity: function claimWithdrawal(address receiver) returns()
func (_L1Staking *L1StakingSession) ClaimWithdrawal(receiver common.Address) (*types.Transaction, error) {
	return _L1Staking.Contract.ClaimWithdrawal(&_L1Staking.TransactOpts, receiver)
}

// ClaimWithdrawal is a paid mutator transaction binding the contract method 0xa3066aab.
//
// Solidity: function claimWithdrawal(address receiver) returns()
func (_L1Staking *L1StakingTransactorSession) ClaimWithdrawal(receiver common.Address) (*types.Transaction, error) {
	return _L1Staking.Contract.ClaimWithdrawal(&_L1Staking.TransactOpts, receiver)
}

// CleanStakerStore is a paid mutator transaction binding the contract method 0x3ee2a1f9.
//
// Solidity: function cleanStakerStore() returns()
func (_L1Staking *L1StakingTransactor) CleanStakerStore(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _L1Staking.contract.Transact(opts, "cleanStakerStore")
}

// CleanStakerStore is a paid mutator transaction binding the contract method 0x3ee2a1f9.
//
// Solidity: function cleanStakerStore() returns()
func (_L1Staking *L1StakingSession) CleanStakerStore() (*types.Transaction, error) {
	return _L1Staking.Contract.CleanStakerStore(&_L1Staking.TransactOpts)
}

// CleanStakerStore is a paid mutator transaction binding the contract method 0x3ee2a1f9.
//
// Solidity: function cleanStakerStore() returns()
func (_L1Staking *L1StakingTransactorSession) CleanStakerStore() (*types.Transaction, error) {
	return _L1Staking.Contract.CleanStakerStore(&_L1Staking.TransactOpts)
}

// Initialize is a paid mutator transaction binding the contract method 0x8142951a.
//
// Solidity: function initialize(address _rollupContract, uint256 _stakingValue, uint256 _challengeDeposit, uint256 _lockBlocks, uint256 _rewardPercentage, uint256 _gasLimitAdd, uint256 _gasLimitRemove) returns()
func (_L1Staking *L1StakingTransactor) Initialize(opts *bind.TransactOpts, _rollupContract common.Address, _stakingValue *big.Int, _challengeDeposit *big.Int, _lockBlocks *big.Int, _rewardPercentage *big.Int, _gasLimitAdd *big.Int, _gasLimitRemove *big.Int) (*types.Transaction, error) {
	return _L1Staking.contract.Transact(opts, "initialize", _rollupContract, _stakingValue, _challengeDeposit, _lockBlocks, _rewardPercentage, _gasLimitAdd, _gasLimitRemove)
}

// Initialize is a paid mutator transaction binding the contract method 0x8142951a.
//
// Solidity: function initialize(address _rollupContract, uint256 _stakingValue, uint256 _challengeDeposit, uint256 _lockBlocks, uint256 _rewardPercentage, uint256 _gasLimitAdd, uint256 _gasLimitRemove) returns()
func (_L1Staking *L1StakingSession) Initialize(_rollupContract common.Address, _stakingValue *big.Int, _challengeDeposit *big.Int, _lockBlocks *big.Int, _rewardPercentage *big.Int, _gasLimitAdd *big.Int, _gasLimitRemove *big.Int) (*types.Transaction, error) {
	return _L1Staking.Contract.Initialize(&_L1Staking.TransactOpts, _rollupContract, _stakingValue, _challengeDeposit, _lockBlocks, _rewardPercentage, _gasLimitAdd, _gasLimitRemove)
}

// Initialize is a paid mutator transaction binding the contract method 0x8142951a.
//
// Solidity: function initialize(address _rollupContract, uint256 _stakingValue, uint256 _challengeDeposit, uint256 _lockBlocks, uint256 _rewardPercentage, uint256 _gasLimitAdd, uint256 _gasLimitRemove) returns()
func (_L1Staking *L1StakingTransactorSession) Initialize(_rollupContract common.Address, _stakingValue *big.Int, _challengeDeposit *big.Int, _lockBlocks *big.Int, _rewardPercentage *big.Int, _gasLimitAdd *big.Int, _gasLimitRemove *big.Int) (*types.Transaction, error) {
	return _L1Staking.Contract.Initialize(&_L1Staking.TransactOpts, _rollupContract, _stakingValue, _challengeDeposit, _lockBlocks, _rewardPercentage, _gasLimitAdd, _gasLimitRemove)
}

// Register is a paid mutator transaction binding the contract method 0x2a28e5a3.
//
// Solidity: function register(bytes32 tmKey, bytes blsKey) payable returns()
func (_L1Staking *L1StakingTransactor) Register(opts *bind.TransactOpts, tmKey [32]byte, blsKey []byte) (*types.Transaction, error) {
	return _L1Staking.contract.Transact(opts, "register", tmKey, blsKey)
}

// Register is a paid mutator transaction binding the contract method 0x2a28e5a3.
//
// Solidity: function register(bytes32 tmKey, bytes blsKey) payable returns()
func (_L1Staking *L1StakingSession) Register(tmKey [32]byte, blsKey []byte) (*types.Transaction, error) {
	return _L1Staking.Contract.Register(&_L1Staking.TransactOpts, tmKey, blsKey)
}

// Register is a paid mutator transaction binding the contract method 0x2a28e5a3.
//
// Solidity: function register(bytes32 tmKey, bytes blsKey) payable returns()
func (_L1Staking *L1StakingTransactorSession) Register(tmKey [32]byte, blsKey []byte) (*types.Transaction, error) {
	return _L1Staking.Contract.Register(&_L1Staking.TransactOpts, tmKey, blsKey)
}

// RemoveStaker is a paid mutator transaction binding the contract method 0x320ff860.
//
// Solidity: function removeStaker(address[] _stakers) returns()
func (_L1Staking *L1StakingTransactor) RemoveStaker(opts *bind.TransactOpts, _stakers []common.Address) (*types.Transaction, error) {
	return _L1Staking.contract.Transact(opts, "removeStaker", _stakers)
}

// RemoveStaker is a paid mutator transaction binding the contract method 0x320ff860.
//
// Solidity: function removeStaker(address[] _stakers) returns()
func (_L1Staking *L1StakingSession) RemoveStaker(_stakers []common.Address) (*types.Transaction, error) {
	return _L1Staking.Contract.RemoveStaker(&_L1Staking.TransactOpts, _stakers)
}

// RemoveStaker is a paid mutator transaction binding the contract method 0x320ff860.
//
// Solidity: function removeStaker(address[] _stakers) returns()
func (_L1Staking *L1StakingTransactorSession) RemoveStaker(_stakers []common.Address) (*types.Transaction, error) {
	return _L1Staking.Contract.RemoveStaker(&_L1Staking.TransactOpts, _stakers)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_L1Staking *L1StakingTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _L1Staking.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_L1Staking *L1StakingSession) RenounceOwnership() (*types.Transaction, error) {
	return _L1Staking.Contract.RenounceOwnership(&_L1Staking.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_L1Staking *L1StakingTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _L1Staking.Contract.RenounceOwnership(&_L1Staking.TransactOpts)
}

// Slash is a paid mutator transaction binding the contract method 0x45bc4d10.
//
// Solidity: function slash(uint256 sequencersBitmap) returns(uint256)
func (_L1Staking *L1StakingTransactor) Slash(opts *bind.TransactOpts, sequencersBitmap *big.Int) (*types.Transaction, error) {
	return _L1Staking.contract.Transact(opts, "slash", sequencersBitmap)
}

// Slash is a paid mutator transaction binding the contract method 0x45bc4d10.
//
// Solidity: function slash(uint256 sequencersBitmap) returns(uint256)
func (_L1Staking *L1StakingSession) Slash(sequencersBitmap *big.Int) (*types.Transaction, error) {
	return _L1Staking.Contract.Slash(&_L1Staking.TransactOpts, sequencersBitmap)
}

// Slash is a paid mutator transaction binding the contract method 0x45bc4d10.
//
// Solidity: function slash(uint256 sequencersBitmap) returns(uint256)
func (_L1Staking *L1StakingTransactorSession) Slash(sequencersBitmap *big.Int) (*types.Transaction, error) {
	return _L1Staking.Contract.Slash(&_L1Staking.TransactOpts, sequencersBitmap)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_L1Staking *L1StakingTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _L1Staking.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_L1Staking *L1StakingSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _L1Staking.Contract.TransferOwnership(&_L1Staking.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_L1Staking *L1StakingTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _L1Staking.Contract.TransferOwnership(&_L1Staking.TransactOpts, newOwner)
}

// UpdateChallengeDeposit is a paid mutator transaction binding the contract method 0x35928991.
//
// Solidity: function updateChallengeDeposit(uint256 _challengeDeposit) returns()
func (_L1Staking *L1StakingTransactor) UpdateChallengeDeposit(opts *bind.TransactOpts, _challengeDeposit *big.Int) (*types.Transaction, error) {
	return _L1Staking.contract.Transact(opts, "updateChallengeDeposit", _challengeDeposit)
}

// UpdateChallengeDeposit is a paid mutator transaction binding the contract method 0x35928991.
//
// Solidity: function updateChallengeDeposit(uint256 _challengeDeposit) returns()
func (_L1Staking *L1StakingSession) UpdateChallengeDeposit(_challengeDeposit *big.Int) (*types.Transaction, error) {
	return _L1Staking.Contract.UpdateChallengeDeposit(&_L1Staking.TransactOpts, _challengeDeposit)
}

// UpdateChallengeDeposit is a paid mutator transaction binding the contract method 0x35928991.
//
// Solidity: function updateChallengeDeposit(uint256 _challengeDeposit) returns()
func (_L1Staking *L1StakingTransactorSession) UpdateChallengeDeposit(_challengeDeposit *big.Int) (*types.Transaction, error) {
	return _L1Staking.Contract.UpdateChallengeDeposit(&_L1Staking.TransactOpts, _challengeDeposit)
}

// UpdateGasLimitAddStaker is a paid mutator transaction binding the contract method 0xae81de53.
//
// Solidity: function updateGasLimitAddStaker(uint256 _gasLimitAdd) returns()
func (_L1Staking *L1StakingTransactor) UpdateGasLimitAddStaker(opts *bind.TransactOpts, _gasLimitAdd *big.Int) (*types.Transaction, error) {
	return _L1Staking.contract.Transact(opts, "updateGasLimitAddStaker", _gasLimitAdd)
}

// UpdateGasLimitAddStaker is a paid mutator transaction binding the contract method 0xae81de53.
//
// Solidity: function updateGasLimitAddStaker(uint256 _gasLimitAdd) returns()
func (_L1Staking *L1StakingSession) UpdateGasLimitAddStaker(_gasLimitAdd *big.Int) (*types.Transaction, error) {
	return _L1Staking.Contract.UpdateGasLimitAddStaker(&_L1Staking.TransactOpts, _gasLimitAdd)
}

// UpdateGasLimitAddStaker is a paid mutator transaction binding the contract method 0xae81de53.
//
// Solidity: function updateGasLimitAddStaker(uint256 _gasLimitAdd) returns()
func (_L1Staking *L1StakingTransactorSession) UpdateGasLimitAddStaker(_gasLimitAdd *big.Int) (*types.Transaction, error) {
	return _L1Staking.Contract.UpdateGasLimitAddStaker(&_L1Staking.TransactOpts, _gasLimitAdd)
}

// UpdateGasLimitRemoveStakers is a paid mutator transaction binding the contract method 0x8a565ac3.
//
// Solidity: function updateGasLimitRemoveStakers(uint256 _gasLimitRemove) returns()
func (_L1Staking *L1StakingTransactor) UpdateGasLimitRemoveStakers(opts *bind.TransactOpts, _gasLimitRemove *big.Int) (*types.Transaction, error) {
	return _L1Staking.contract.Transact(opts, "updateGasLimitRemoveStakers", _gasLimitRemove)
}

// UpdateGasLimitRemoveStakers is a paid mutator transaction binding the contract method 0x8a565ac3.
//
// Solidity: function updateGasLimitRemoveStakers(uint256 _gasLimitRemove) returns()
func (_L1Staking *L1StakingSession) UpdateGasLimitRemoveStakers(_gasLimitRemove *big.Int) (*types.Transaction, error) {
	return _L1Staking.Contract.UpdateGasLimitRemoveStakers(&_L1Staking.TransactOpts, _gasLimitRemove)
}

// UpdateGasLimitRemoveStakers is a paid mutator transaction binding the contract method 0x8a565ac3.
//
// Solidity: function updateGasLimitRemoveStakers(uint256 _gasLimitRemove) returns()
func (_L1Staking *L1StakingTransactorSession) UpdateGasLimitRemoveStakers(_gasLimitRemove *big.Int) (*types.Transaction, error) {
	return _L1Staking.Contract.UpdateGasLimitRemoveStakers(&_L1Staking.TransactOpts, _gasLimitRemove)
}

// UpdateRewardPercentage is a paid mutator transaction binding the contract method 0xa4f209b0.
//
// Solidity: function updateRewardPercentage(uint256 _rewardPercentage) returns()
func (_L1Staking *L1StakingTransactor) UpdateRewardPercentage(opts *bind.TransactOpts, _rewardPercentage *big.Int) (*types.Transaction, error) {
	return _L1Staking.contract.Transact(opts, "updateRewardPercentage", _rewardPercentage)
}

// UpdateRewardPercentage is a paid mutator transaction binding the contract method 0xa4f209b0.
//
// Solidity: function updateRewardPercentage(uint256 _rewardPercentage) returns()
func (_L1Staking *L1StakingSession) UpdateRewardPercentage(_rewardPercentage *big.Int) (*types.Transaction, error) {
	return _L1Staking.Contract.UpdateRewardPercentage(&_L1Staking.TransactOpts, _rewardPercentage)
}

// UpdateRewardPercentage is a paid mutator transaction binding the contract method 0xa4f209b0.
//
// Solidity: function updateRewardPercentage(uint256 _rewardPercentage) returns()
func (_L1Staking *L1StakingTransactorSession) UpdateRewardPercentage(_rewardPercentage *big.Int) (*types.Transaction, error) {
	return _L1Staking.Contract.UpdateRewardPercentage(&_L1Staking.TransactOpts, _rewardPercentage)
}

// UpdateWhitelist is a paid mutator transaction binding the contract method 0xc7cd469a.
//
// Solidity: function updateWhitelist(address[] add, address[] remove) returns()
func (_L1Staking *L1StakingTransactor) UpdateWhitelist(opts *bind.TransactOpts, add []common.Address, remove []common.Address) (*types.Transaction, error) {
	return _L1Staking.contract.Transact(opts, "updateWhitelist", add, remove)
}

// UpdateWhitelist is a paid mutator transaction binding the contract method 0xc7cd469a.
//
// Solidity: function updateWhitelist(address[] add, address[] remove) returns()
func (_L1Staking *L1StakingSession) UpdateWhitelist(add []common.Address, remove []common.Address) (*types.Transaction, error) {
	return _L1Staking.Contract.UpdateWhitelist(&_L1Staking.TransactOpts, add, remove)
}

// UpdateWhitelist is a paid mutator transaction binding the contract method 0xc7cd469a.
//
// Solidity: function updateWhitelist(address[] add, address[] remove) returns()
func (_L1Staking *L1StakingTransactorSession) UpdateWhitelist(add []common.Address, remove []common.Address) (*types.Transaction, error) {
	return _L1Staking.Contract.UpdateWhitelist(&_L1Staking.TransactOpts, add, remove)
}

// Withdraw is a paid mutator transaction binding the contract method 0x3ccfd60b.
//
// Solidity: function withdraw() returns()
func (_L1Staking *L1StakingTransactor) Withdraw(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _L1Staking.contract.Transact(opts, "withdraw")
}

// Withdraw is a paid mutator transaction binding the contract method 0x3ccfd60b.
//
// Solidity: function withdraw() returns()
func (_L1Staking *L1StakingSession) Withdraw() (*types.Transaction, error) {
	return _L1Staking.Contract.Withdraw(&_L1Staking.TransactOpts)
}

// Withdraw is a paid mutator transaction binding the contract method 0x3ccfd60b.
//
// Solidity: function withdraw() returns()
func (_L1Staking *L1StakingTransactorSession) Withdraw() (*types.Transaction, error) {
	return _L1Staking.Contract.Withdraw(&_L1Staking.TransactOpts)
}

// L1StakingChallengeDepositUpdatedIterator is returned from FilterChallengeDepositUpdated and is used to iterate over the raw logs and unpacked data for ChallengeDepositUpdated events raised by the L1Staking contract.
type L1StakingChallengeDepositUpdatedIterator struct {
	Event *L1StakingChallengeDepositUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *L1StakingChallengeDepositUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(L1StakingChallengeDepositUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(L1StakingChallengeDepositUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *L1StakingChallengeDepositUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *L1StakingChallengeDepositUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// L1StakingChallengeDepositUpdated represents a ChallengeDepositUpdated event raised by the L1Staking contract.
type L1StakingChallengeDepositUpdated struct {
	OldChallengeDeposit *big.Int
	NewChallengeDeposit *big.Int
	Raw                 types.Log // Blockchain specific contextual infos
}

// FilterChallengeDepositUpdated is a free log retrieval operation binding the contract event 0x36f971a40478225aeb80cfbf5e80306e8cb76d3bf7d56fdc5e490945cddb7d55.
//
// Solidity: event ChallengeDepositUpdated(uint256 oldChallengeDeposit, uint256 newChallengeDeposit)
func (_L1Staking *L1StakingFilterer) FilterChallengeDepositUpdated(opts *bind.FilterOpts) (*L1StakingChallengeDepositUpdatedIterator, error) {

	logs, sub, err := _L1Staking.contract.FilterLogs(opts, "ChallengeDepositUpdated")
	if err != nil {
		return nil, err
	}
	return &L1StakingChallengeDepositUpdatedIterator{contract: _L1Staking.contract, event: "ChallengeDepositUpdated", logs: logs, sub: sub}, nil
}

// WatchChallengeDepositUpdated is a free log subscription operation binding the contract event 0x36f971a40478225aeb80cfbf5e80306e8cb76d3bf7d56fdc5e490945cddb7d55.
//
// Solidity: event ChallengeDepositUpdated(uint256 oldChallengeDeposit, uint256 newChallengeDeposit)
func (_L1Staking *L1StakingFilterer) WatchChallengeDepositUpdated(opts *bind.WatchOpts, sink chan<- *L1StakingChallengeDepositUpdated) (event.Subscription, error) {

	logs, sub, err := _L1Staking.contract.WatchLogs(opts, "ChallengeDepositUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(L1StakingChallengeDepositUpdated)
				if err := _L1Staking.contract.UnpackLog(event, "ChallengeDepositUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseChallengeDepositUpdated is a log parse operation binding the contract event 0x36f971a40478225aeb80cfbf5e80306e8cb76d3bf7d56fdc5e490945cddb7d55.
//
// Solidity: event ChallengeDepositUpdated(uint256 oldChallengeDeposit, uint256 newChallengeDeposit)
func (_L1Staking *L1StakingFilterer) ParseChallengeDepositUpdated(log types.Log) (*L1StakingChallengeDepositUpdated, error) {
	event := new(L1StakingChallengeDepositUpdated)
	if err := _L1Staking.contract.UnpackLog(event, "ChallengeDepositUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// L1StakingClaimedIterator is returned from FilterClaimed and is used to iterate over the raw logs and unpacked data for Claimed events raised by the L1Staking contract.
type L1StakingClaimedIterator struct {
	Event *L1StakingClaimed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *L1StakingClaimedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(L1StakingClaimed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(L1StakingClaimed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *L1StakingClaimedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *L1StakingClaimedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// L1StakingClaimed represents a Claimed event raised by the L1Staking contract.
type L1StakingClaimed struct {
	Staker   common.Address
	Receiver common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterClaimed is a free log retrieval operation binding the contract event 0x89309c9b2aeaffbdce717113df9427298b20448c05919bf889e05f8c3094254b.
//
// Solidity: event Claimed(address indexed staker, address receiver)
func (_L1Staking *L1StakingFilterer) FilterClaimed(opts *bind.FilterOpts, staker []common.Address) (*L1StakingClaimedIterator, error) {

	var stakerRule []interface{}
	for _, stakerItem := range staker {
		stakerRule = append(stakerRule, stakerItem)
	}

	logs, sub, err := _L1Staking.contract.FilterLogs(opts, "Claimed", stakerRule)
	if err != nil {
		return nil, err
	}
	return &L1StakingClaimedIterator{contract: _L1Staking.contract, event: "Claimed", logs: logs, sub: sub}, nil
}

// WatchClaimed is a free log subscription operation binding the contract event 0x89309c9b2aeaffbdce717113df9427298b20448c05919bf889e05f8c3094254b.
//
// Solidity: event Claimed(address indexed staker, address receiver)
func (_L1Staking *L1StakingFilterer) WatchClaimed(opts *bind.WatchOpts, sink chan<- *L1StakingClaimed, staker []common.Address) (event.Subscription, error) {

	var stakerRule []interface{}
	for _, stakerItem := range staker {
		stakerRule = append(stakerRule, stakerItem)
	}

	logs, sub, err := _L1Staking.contract.WatchLogs(opts, "Claimed", stakerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(L1StakingClaimed)
				if err := _L1Staking.contract.UnpackLog(event, "Claimed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseClaimed is a log parse operation binding the contract event 0x89309c9b2aeaffbdce717113df9427298b20448c05919bf889e05f8c3094254b.
//
// Solidity: event Claimed(address indexed staker, address receiver)
func (_L1Staking *L1StakingFilterer) ParseClaimed(log types.Log) (*L1StakingClaimed, error) {
	event := new(L1StakingClaimed)
	if err := _L1Staking.contract.UnpackLog(event, "Claimed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// L1StakingGasLimitAddStakerUpdatedIterator is returned from FilterGasLimitAddStakerUpdated and is used to iterate over the raw logs and unpacked data for GasLimitAddStakerUpdated events raised by the L1Staking contract.
type L1StakingGasLimitAddStakerUpdatedIterator struct {
	Event *L1StakingGasLimitAddStakerUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *L1StakingGasLimitAddStakerUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(L1StakingGasLimitAddStakerUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(L1StakingGasLimitAddStakerUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *L1StakingGasLimitAddStakerUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *L1StakingGasLimitAddStakerUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// L1StakingGasLimitAddStakerUpdated represents a GasLimitAddStakerUpdated event raised by the L1Staking contract.
type L1StakingGasLimitAddStakerUpdated struct {
	OldGasLimit *big.Int
	NewGasLimit *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterGasLimitAddStakerUpdated is a free log retrieval operation binding the contract event 0x0ef80fb82bf5439b8591744c0fde771f5d93dce7a7970b1e9b7828cdc3970e9c.
//
// Solidity: event GasLimitAddStakerUpdated(uint256 oldGasLimit, uint256 newGasLimit)
func (_L1Staking *L1StakingFilterer) FilterGasLimitAddStakerUpdated(opts *bind.FilterOpts) (*L1StakingGasLimitAddStakerUpdatedIterator, error) {

	logs, sub, err := _L1Staking.contract.FilterLogs(opts, "GasLimitAddStakerUpdated")
	if err != nil {
		return nil, err
	}
	return &L1StakingGasLimitAddStakerUpdatedIterator{contract: _L1Staking.contract, event: "GasLimitAddStakerUpdated", logs: logs, sub: sub}, nil
}

// WatchGasLimitAddStakerUpdated is a free log subscription operation binding the contract event 0x0ef80fb82bf5439b8591744c0fde771f5d93dce7a7970b1e9b7828cdc3970e9c.
//
// Solidity: event GasLimitAddStakerUpdated(uint256 oldGasLimit, uint256 newGasLimit)
func (_L1Staking *L1StakingFilterer) WatchGasLimitAddStakerUpdated(opts *bind.WatchOpts, sink chan<- *L1StakingGasLimitAddStakerUpdated) (event.Subscription, error) {

	logs, sub, err := _L1Staking.contract.WatchLogs(opts, "GasLimitAddStakerUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(L1StakingGasLimitAddStakerUpdated)
				if err := _L1Staking.contract.UnpackLog(event, "GasLimitAddStakerUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseGasLimitAddStakerUpdated is a log parse operation binding the contract event 0x0ef80fb82bf5439b8591744c0fde771f5d93dce7a7970b1e9b7828cdc3970e9c.
//
// Solidity: event GasLimitAddStakerUpdated(uint256 oldGasLimit, uint256 newGasLimit)
func (_L1Staking *L1StakingFilterer) ParseGasLimitAddStakerUpdated(log types.Log) (*L1StakingGasLimitAddStakerUpdated, error) {
	event := new(L1StakingGasLimitAddStakerUpdated)
	if err := _L1Staking.contract.UnpackLog(event, "GasLimitAddStakerUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// L1StakingGasLimitRemoveStakersUpdatedIterator is returned from FilterGasLimitRemoveStakersUpdated and is used to iterate over the raw logs and unpacked data for GasLimitRemoveStakersUpdated events raised by the L1Staking contract.
type L1StakingGasLimitRemoveStakersUpdatedIterator struct {
	Event *L1StakingGasLimitRemoveStakersUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *L1StakingGasLimitRemoveStakersUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(L1StakingGasLimitRemoveStakersUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(L1StakingGasLimitRemoveStakersUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *L1StakingGasLimitRemoveStakersUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *L1StakingGasLimitRemoveStakersUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// L1StakingGasLimitRemoveStakersUpdated represents a GasLimitRemoveStakersUpdated event raised by the L1Staking contract.
type L1StakingGasLimitRemoveStakersUpdated struct {
	OldGasLimit *big.Int
	NewGasLimit *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterGasLimitRemoveStakersUpdated is a free log retrieval operation binding the contract event 0xdd4b37d1f14888147fe4be2cfaedcbf148fd07ececc856d0433241b8b6e4a7f7.
//
// Solidity: event GasLimitRemoveStakersUpdated(uint256 oldGasLimit, uint256 newGasLimit)
func (_L1Staking *L1StakingFilterer) FilterGasLimitRemoveStakersUpdated(opts *bind.FilterOpts) (*L1StakingGasLimitRemoveStakersUpdatedIterator, error) {

	logs, sub, err := _L1Staking.contract.FilterLogs(opts, "GasLimitRemoveStakersUpdated")
	if err != nil {
		return nil, err
	}
	return &L1StakingGasLimitRemoveStakersUpdatedIterator{contract: _L1Staking.contract, event: "GasLimitRemoveStakersUpdated", logs: logs, sub: sub}, nil
}

// WatchGasLimitRemoveStakersUpdated is a free log subscription operation binding the contract event 0xdd4b37d1f14888147fe4be2cfaedcbf148fd07ececc856d0433241b8b6e4a7f7.
//
// Solidity: event GasLimitRemoveStakersUpdated(uint256 oldGasLimit, uint256 newGasLimit)
func (_L1Staking *L1StakingFilterer) WatchGasLimitRemoveStakersUpdated(opts *bind.WatchOpts, sink chan<- *L1StakingGasLimitRemoveStakersUpdated) (event.Subscription, error) {

	logs, sub, err := _L1Staking.contract.WatchLogs(opts, "GasLimitRemoveStakersUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(L1StakingGasLimitRemoveStakersUpdated)
				if err := _L1Staking.contract.UnpackLog(event, "GasLimitRemoveStakersUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseGasLimitRemoveStakersUpdated is a log parse operation binding the contract event 0xdd4b37d1f14888147fe4be2cfaedcbf148fd07ececc856d0433241b8b6e4a7f7.
//
// Solidity: event GasLimitRemoveStakersUpdated(uint256 oldGasLimit, uint256 newGasLimit)
func (_L1Staking *L1StakingFilterer) ParseGasLimitRemoveStakersUpdated(log types.Log) (*L1StakingGasLimitRemoveStakersUpdated, error) {
	event := new(L1StakingGasLimitRemoveStakersUpdated)
	if err := _L1Staking.contract.UnpackLog(event, "GasLimitRemoveStakersUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// L1StakingInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the L1Staking contract.
type L1StakingInitializedIterator struct {
	Event *L1StakingInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *L1StakingInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(L1StakingInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(L1StakingInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *L1StakingInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *L1StakingInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// L1StakingInitialized represents a Initialized event raised by the L1Staking contract.
type L1StakingInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_L1Staking *L1StakingFilterer) FilterInitialized(opts *bind.FilterOpts) (*L1StakingInitializedIterator, error) {

	logs, sub, err := _L1Staking.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &L1StakingInitializedIterator{contract: _L1Staking.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_L1Staking *L1StakingFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *L1StakingInitialized) (event.Subscription, error) {

	logs, sub, err := _L1Staking.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(L1StakingInitialized)
				if err := _L1Staking.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_L1Staking *L1StakingFilterer) ParseInitialized(log types.Log) (*L1StakingInitialized, error) {
	event := new(L1StakingInitialized)
	if err := _L1Staking.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// L1StakingOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the L1Staking contract.
type L1StakingOwnershipTransferredIterator struct {
	Event *L1StakingOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *L1StakingOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(L1StakingOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(L1StakingOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *L1StakingOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *L1StakingOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// L1StakingOwnershipTransferred represents a OwnershipTransferred event raised by the L1Staking contract.
type L1StakingOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_L1Staking *L1StakingFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*L1StakingOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _L1Staking.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &L1StakingOwnershipTransferredIterator{contract: _L1Staking.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_L1Staking *L1StakingFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *L1StakingOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _L1Staking.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(L1StakingOwnershipTransferred)
				if err := _L1Staking.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_L1Staking *L1StakingFilterer) ParseOwnershipTransferred(log types.Log) (*L1StakingOwnershipTransferred, error) {
	event := new(L1StakingOwnershipTransferred)
	if err := _L1Staking.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// L1StakingRegisteredIterator is returned from FilterRegistered and is used to iterate over the raw logs and unpacked data for Registered events raised by the L1Staking contract.
type L1StakingRegisteredIterator struct {
	Event *L1StakingRegistered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *L1StakingRegisteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(L1StakingRegistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(L1StakingRegistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *L1StakingRegisteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *L1StakingRegisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// L1StakingRegistered represents a Registered event raised by the L1Staking contract.
type L1StakingRegistered struct {
	Addr   common.Address
	TmKey  [32]byte
	BlsKey []byte
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterRegistered is a free log retrieval operation binding the contract event 0xb9c7babb56df9f2da4a30811a6c778e4e68af88b72712d56cf62c5516e20e199.
//
// Solidity: event Registered(address addr, bytes32 tmKey, bytes blsKey)
func (_L1Staking *L1StakingFilterer) FilterRegistered(opts *bind.FilterOpts) (*L1StakingRegisteredIterator, error) {

	logs, sub, err := _L1Staking.contract.FilterLogs(opts, "Registered")
	if err != nil {
		return nil, err
	}
	return &L1StakingRegisteredIterator{contract: _L1Staking.contract, event: "Registered", logs: logs, sub: sub}, nil
}

// WatchRegistered is a free log subscription operation binding the contract event 0xb9c7babb56df9f2da4a30811a6c778e4e68af88b72712d56cf62c5516e20e199.
//
// Solidity: event Registered(address addr, bytes32 tmKey, bytes blsKey)
func (_L1Staking *L1StakingFilterer) WatchRegistered(opts *bind.WatchOpts, sink chan<- *L1StakingRegistered) (event.Subscription, error) {

	logs, sub, err := _L1Staking.contract.WatchLogs(opts, "Registered")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(L1StakingRegistered)
				if err := _L1Staking.contract.UnpackLog(event, "Registered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRegistered is a log parse operation binding the contract event 0xb9c7babb56df9f2da4a30811a6c778e4e68af88b72712d56cf62c5516e20e199.
//
// Solidity: event Registered(address addr, bytes32 tmKey, bytes blsKey)
func (_L1Staking *L1StakingFilterer) ParseRegistered(log types.Log) (*L1StakingRegistered, error) {
	event := new(L1StakingRegistered)
	if err := _L1Staking.contract.UnpackLog(event, "Registered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// L1StakingRewardPercentageUpdatedIterator is returned from FilterRewardPercentageUpdated and is used to iterate over the raw logs and unpacked data for RewardPercentageUpdated events raised by the L1Staking contract.
type L1StakingRewardPercentageUpdatedIterator struct {
	Event *L1StakingRewardPercentageUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *L1StakingRewardPercentageUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(L1StakingRewardPercentageUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(L1StakingRewardPercentageUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *L1StakingRewardPercentageUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *L1StakingRewardPercentageUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// L1StakingRewardPercentageUpdated represents a RewardPercentageUpdated event raised by the L1Staking contract.
type L1StakingRewardPercentageUpdated struct {
	OldPercentage *big.Int
	NewPercentage *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterRewardPercentageUpdated is a free log retrieval operation binding the contract event 0xa46de936426e045703b2d34a292a19fde92b329018db8e0da750033876b655ba.
//
// Solidity: event RewardPercentageUpdated(uint256 oldPercentage, uint256 newPercentage)
func (_L1Staking *L1StakingFilterer) FilterRewardPercentageUpdated(opts *bind.FilterOpts) (*L1StakingRewardPercentageUpdatedIterator, error) {

	logs, sub, err := _L1Staking.contract.FilterLogs(opts, "RewardPercentageUpdated")
	if err != nil {
		return nil, err
	}
	return &L1StakingRewardPercentageUpdatedIterator{contract: _L1Staking.contract, event: "RewardPercentageUpdated", logs: logs, sub: sub}, nil
}

// WatchRewardPercentageUpdated is a free log subscription operation binding the contract event 0xa46de936426e045703b2d34a292a19fde92b329018db8e0da750033876b655ba.
//
// Solidity: event RewardPercentageUpdated(uint256 oldPercentage, uint256 newPercentage)
func (_L1Staking *L1StakingFilterer) WatchRewardPercentageUpdated(opts *bind.WatchOpts, sink chan<- *L1StakingRewardPercentageUpdated) (event.Subscription, error) {

	logs, sub, err := _L1Staking.contract.WatchLogs(opts, "RewardPercentageUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(L1StakingRewardPercentageUpdated)
				if err := _L1Staking.contract.UnpackLog(event, "RewardPercentageUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRewardPercentageUpdated is a log parse operation binding the contract event 0xa46de936426e045703b2d34a292a19fde92b329018db8e0da750033876b655ba.
//
// Solidity: event RewardPercentageUpdated(uint256 oldPercentage, uint256 newPercentage)
func (_L1Staking *L1StakingFilterer) ParseRewardPercentageUpdated(log types.Log) (*L1StakingRewardPercentageUpdated, error) {
	event := new(L1StakingRewardPercentageUpdated)
	if err := _L1Staking.contract.UnpackLog(event, "RewardPercentageUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// L1StakingSlashRemainingClaimedIterator is returned from FilterSlashRemainingClaimed and is used to iterate over the raw logs and unpacked data for SlashRemainingClaimed events raised by the L1Staking contract.
type L1StakingSlashRemainingClaimedIterator struct {
	Event *L1StakingSlashRemainingClaimed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *L1StakingSlashRemainingClaimedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(L1StakingSlashRemainingClaimed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(L1StakingSlashRemainingClaimed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *L1StakingSlashRemainingClaimedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *L1StakingSlashRemainingClaimedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// L1StakingSlashRemainingClaimed represents a SlashRemainingClaimed event raised by the L1Staking contract.
type L1StakingSlashRemainingClaimed struct {
	Receiver common.Address
	Amount   *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterSlashRemainingClaimed is a free log retrieval operation binding the contract event 0xa1fefb6c5328a92a416e321ed50997303fe7135fd88c28b0592b21ce42b5cdd9.
//
// Solidity: event SlashRemainingClaimed(address receiver, uint256 amount)
func (_L1Staking *L1StakingFilterer) FilterSlashRemainingClaimed(opts *bind.FilterOpts) (*L1StakingSlashRemainingClaimedIterator, error) {

	logs, sub, err := _L1Staking.contract.FilterLogs(opts, "SlashRemainingClaimed")
	if err != nil {
		return nil, err
	}
	return &L1StakingSlashRemainingClaimedIterator{contract: _L1Staking.contract, event: "SlashRemainingClaimed", logs: logs, sub: sub}, nil
}

// WatchSlashRemainingClaimed is a free log subscription operation binding the contract event 0xa1fefb6c5328a92a416e321ed50997303fe7135fd88c28b0592b21ce42b5cdd9.
//
// Solidity: event SlashRemainingClaimed(address receiver, uint256 amount)
func (_L1Staking *L1StakingFilterer) WatchSlashRemainingClaimed(opts *bind.WatchOpts, sink chan<- *L1StakingSlashRemainingClaimed) (event.Subscription, error) {

	logs, sub, err := _L1Staking.contract.WatchLogs(opts, "SlashRemainingClaimed")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(L1StakingSlashRemainingClaimed)
				if err := _L1Staking.contract.UnpackLog(event, "SlashRemainingClaimed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSlashRemainingClaimed is a log parse operation binding the contract event 0xa1fefb6c5328a92a416e321ed50997303fe7135fd88c28b0592b21ce42b5cdd9.
//
// Solidity: event SlashRemainingClaimed(address receiver, uint256 amount)
func (_L1Staking *L1StakingFilterer) ParseSlashRemainingClaimed(log types.Log) (*L1StakingSlashRemainingClaimed, error) {
	event := new(L1StakingSlashRemainingClaimed)
	if err := _L1Staking.contract.UnpackLog(event, "SlashRemainingClaimed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// L1StakingSlashedIterator is returned from FilterSlashed and is used to iterate over the raw logs and unpacked data for Slashed events raised by the L1Staking contract.
type L1StakingSlashedIterator struct {
	Event *L1StakingSlashed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *L1StakingSlashedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(L1StakingSlashed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(L1StakingSlashed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *L1StakingSlashedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *L1StakingSlashedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// L1StakingSlashed represents a Slashed event raised by the L1Staking contract.
type L1StakingSlashed struct {
	Stakers []common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterSlashed is a free log retrieval operation binding the contract event 0x654f4a61849f1b3ad10abb283d27f02d5fece7b820acc5a3b874713b58748b5a.
//
// Solidity: event Slashed(address[] stakers)
func (_L1Staking *L1StakingFilterer) FilterSlashed(opts *bind.FilterOpts) (*L1StakingSlashedIterator, error) {

	logs, sub, err := _L1Staking.contract.FilterLogs(opts, "Slashed")
	if err != nil {
		return nil, err
	}
	return &L1StakingSlashedIterator{contract: _L1Staking.contract, event: "Slashed", logs: logs, sub: sub}, nil
}

// WatchSlashed is a free log subscription operation binding the contract event 0x654f4a61849f1b3ad10abb283d27f02d5fece7b820acc5a3b874713b58748b5a.
//
// Solidity: event Slashed(address[] stakers)
func (_L1Staking *L1StakingFilterer) WatchSlashed(opts *bind.WatchOpts, sink chan<- *L1StakingSlashed) (event.Subscription, error) {

	logs, sub, err := _L1Staking.contract.WatchLogs(opts, "Slashed")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(L1StakingSlashed)
				if err := _L1Staking.contract.UnpackLog(event, "Slashed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSlashed is a log parse operation binding the contract event 0x654f4a61849f1b3ad10abb283d27f02d5fece7b820acc5a3b874713b58748b5a.
//
// Solidity: event Slashed(address[] stakers)
func (_L1Staking *L1StakingFilterer) ParseSlashed(log types.Log) (*L1StakingSlashed, error) {
	event := new(L1StakingSlashed)
	if err := _L1Staking.contract.UnpackLog(event, "Slashed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// L1StakingStakersRemovedIterator is returned from FilterStakersRemoved and is used to iterate over the raw logs and unpacked data for StakersRemoved events raised by the L1Staking contract.
type L1StakingStakersRemovedIterator struct {
	Event *L1StakingStakersRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *L1StakingStakersRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(L1StakingStakersRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(L1StakingStakersRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *L1StakingStakersRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *L1StakingStakersRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// L1StakingStakersRemoved represents a StakersRemoved event raised by the L1Staking contract.
type L1StakingStakersRemoved struct {
	Stakers []common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterStakersRemoved is a free log retrieval operation binding the contract event 0x3f446646c03e618be8238a586960d6d625f35c653cdca1ef59609993e8ed2c84.
//
// Solidity: event StakersRemoved(address[] stakers)
func (_L1Staking *L1StakingFilterer) FilterStakersRemoved(opts *bind.FilterOpts) (*L1StakingStakersRemovedIterator, error) {

	logs, sub, err := _L1Staking.contract.FilterLogs(opts, "StakersRemoved")
	if err != nil {
		return nil, err
	}
	return &L1StakingStakersRemovedIterator{contract: _L1Staking.contract, event: "StakersRemoved", logs: logs, sub: sub}, nil
}

// WatchStakersRemoved is a free log subscription operation binding the contract event 0x3f446646c03e618be8238a586960d6d625f35c653cdca1ef59609993e8ed2c84.
//
// Solidity: event StakersRemoved(address[] stakers)
func (_L1Staking *L1StakingFilterer) WatchStakersRemoved(opts *bind.WatchOpts, sink chan<- *L1StakingStakersRemoved) (event.Subscription, error) {

	logs, sub, err := _L1Staking.contract.WatchLogs(opts, "StakersRemoved")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(L1StakingStakersRemoved)
				if err := _L1Staking.contract.UnpackLog(event, "StakersRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStakersRemoved is a log parse operation binding the contract event 0x3f446646c03e618be8238a586960d6d625f35c653cdca1ef59609993e8ed2c84.
//
// Solidity: event StakersRemoved(address[] stakers)
func (_L1Staking *L1StakingFilterer) ParseStakersRemoved(log types.Log) (*L1StakingStakersRemoved, error) {
	event := new(L1StakingStakersRemoved)
	if err := _L1Staking.contract.UnpackLog(event, "StakersRemoved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// L1StakingWhitelistUpdatedIterator is returned from FilterWhitelistUpdated and is used to iterate over the raw logs and unpacked data for WhitelistUpdated events raised by the L1Staking contract.
type L1StakingWhitelistUpdatedIterator struct {
	Event *L1StakingWhitelistUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *L1StakingWhitelistUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(L1StakingWhitelistUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(L1StakingWhitelistUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *L1StakingWhitelistUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *L1StakingWhitelistUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// L1StakingWhitelistUpdated represents a WhitelistUpdated event raised by the L1Staking contract.
type L1StakingWhitelistUpdated struct {
	Add    []common.Address
	Remove []common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterWhitelistUpdated is a free log retrieval operation binding the contract event 0xe375867e538b40218c1b3db2ccceaf875eb073e38b510449e6088c1539ac8622.
//
// Solidity: event WhitelistUpdated(address[] add, address[] remove)
func (_L1Staking *L1StakingFilterer) FilterWhitelistUpdated(opts *bind.FilterOpts) (*L1StakingWhitelistUpdatedIterator, error) {

	logs, sub, err := _L1Staking.contract.FilterLogs(opts, "WhitelistUpdated")
	if err != nil {
		return nil, err
	}
	return &L1StakingWhitelistUpdatedIterator{contract: _L1Staking.contract, event: "WhitelistUpdated", logs: logs, sub: sub}, nil
}

// WatchWhitelistUpdated is a free log subscription operation binding the contract event 0xe375867e538b40218c1b3db2ccceaf875eb073e38b510449e6088c1539ac8622.
//
// Solidity: event WhitelistUpdated(address[] add, address[] remove)
func (_L1Staking *L1StakingFilterer) WatchWhitelistUpdated(opts *bind.WatchOpts, sink chan<- *L1StakingWhitelistUpdated) (event.Subscription, error) {

	logs, sub, err := _L1Staking.contract.WatchLogs(opts, "WhitelistUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(L1StakingWhitelistUpdated)
				if err := _L1Staking.contract.UnpackLog(event, "WhitelistUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWhitelistUpdated is a log parse operation binding the contract event 0xe375867e538b40218c1b3db2ccceaf875eb073e38b510449e6088c1539ac8622.
//
// Solidity: event WhitelistUpdated(address[] add, address[] remove)
func (_L1Staking *L1StakingFilterer) ParseWhitelistUpdated(log types.Log) (*L1StakingWhitelistUpdated, error) {
	event := new(L1StakingWhitelistUpdated)
	if err := _L1Staking.contract.UnpackLog(event, "WhitelistUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// L1StakingWithdrawnIterator is returned from FilterWithdrawn and is used to iterate over the raw logs and unpacked data for Withdrawn events raised by the L1Staking contract.
type L1StakingWithdrawnIterator struct {
	Event *L1StakingWithdrawn // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *L1StakingWithdrawnIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(L1StakingWithdrawn)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(L1StakingWithdrawn)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *L1StakingWithdrawnIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *L1StakingWithdrawnIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// L1StakingWithdrawn represents a Withdrawn event raised by the L1Staking contract.
type L1StakingWithdrawn struct {
	Addr         common.Address
	UnlockHeight *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterWithdrawn is a free log retrieval operation binding the contract event 0x7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5.
//
// Solidity: event Withdrawn(address indexed addr, uint256 unlockHeight)
func (_L1Staking *L1StakingFilterer) FilterWithdrawn(opts *bind.FilterOpts, addr []common.Address) (*L1StakingWithdrawnIterator, error) {

	var addrRule []interface{}
	for _, addrItem := range addr {
		addrRule = append(addrRule, addrItem)
	}

	logs, sub, err := _L1Staking.contract.FilterLogs(opts, "Withdrawn", addrRule)
	if err != nil {
		return nil, err
	}
	return &L1StakingWithdrawnIterator{contract: _L1Staking.contract, event: "Withdrawn", logs: logs, sub: sub}, nil
}

// WatchWithdrawn is a free log subscription operation binding the contract event 0x7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5.
//
// Solidity: event Withdrawn(address indexed addr, uint256 unlockHeight)
func (_L1Staking *L1StakingFilterer) WatchWithdrawn(opts *bind.WatchOpts, sink chan<- *L1StakingWithdrawn, addr []common.Address) (event.Subscription, error) {

	var addrRule []interface{}
	for _, addrItem := range addr {
		addrRule = append(addrRule, addrItem)
	}

	logs, sub, err := _L1Staking.contract.WatchLogs(opts, "Withdrawn", addrRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(L1StakingWithdrawn)
				if err := _L1Staking.contract.UnpackLog(event, "Withdrawn", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdrawn is a log parse operation binding the contract event 0x7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5.
//
// Solidity: event Withdrawn(address indexed addr, uint256 unlockHeight)
func (_L1Staking *L1StakingFilterer) ParseWithdrawn(log types.Log) (*L1StakingWithdrawn, error) {
	event := new(L1StakingWithdrawn)
	if err := _L1Staking.contract.UnpackLog(event, "Withdrawn", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
