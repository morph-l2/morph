// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package bindings

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/scroll-tech/go-ethereum"
	"github.com/scroll-tech/go-ethereum/accounts/abi"
	"github.com/scroll-tech/go-ethereum/accounts/abi/bind"
	"github.com/scroll-tech/go-ethereum/common"
	"github.com/scroll-tech/go-ethereum/core/types"
	"github.com/scroll-tech/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// StakingMetaData contains all meta data concerning the Staking contract.
var StakingMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"tmKey\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"blsKey\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"Registered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"sequencersAddr\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"bytes[]\",\"name\":\"sequencersBLS\",\"type\":\"bytes[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"}],\"name\":\"SequencerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"Withdrawed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"claimETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sequencerContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_sequencersSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lock\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"tmKey\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"blsKey\",\"type\":\"bytes\"},{\"internalType\":\"uint32\",\"name\":\"_minGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_gasFee\",\"type\":\"uint256\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sequencerContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sequencersAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sequencersBLS\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sequencersSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"sequencers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"sequencerIndex\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_minGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_gasFee\",\"type\":\"uint256\"}],\"name\":\"slash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_minGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_gasFee\",\"type\":\"uint256\"}],\"name\":\"stakeETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakersNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakings\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"tmKey\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"blsKey\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enanble\",\"type\":\"bool\"}],\"name\":\"toggleSlash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sequencersSize\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_minGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_gasFee\",\"type\":\"uint256\"}],\"name\":\"updateParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"add\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"remove\",\"type\":\"address[]\"}],\"name\":\"updateWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_minGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_gasFee\",\"type\":\"uint256\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlock\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"exit\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x6080604052606c805460ff191690555f606d5534801561001d575f80fd5b50612f6f8061002b5f395ff3fe608060405260043610610178575f3560e01c8063a4d66daf116100d1578063d13f90b41161007c578063f2fde38b11610057578063f2fde38b14610431578063f83d08ba14610450578063fd5e6dd114610465575f80fd5b8063d13f90b4146103c4578063d3710ec5146103e3578063dc6e13e114610402575f80fd5b8063c7cd469a116100ac578063c7cd469a14610372578063c95a6bf214610391578063cbd679cb146103b0575f80fd5b8063a4d66daf1461031b578063a70448361461033e578063b21452801461035d575f80fd5b80636e1a7a1f116101315780638da5cb5b1161010c5780638da5cb5b146102995780639131f724146102ca5780639b19251a146102dd575f80fd5b80636e1a7a1f1461020c578063715018a61461022b5780637a9262a21461023f575f80fd5b8063399b8b3911610161578063399b8b39146101a457806359e93d1e146101d957806367272999146101f8575f80fd5b80631b9346ed1461017c5780632222276014610191575b5f80fd5b61018f61018a366004612518565b610484565b005b61018f61019f3660046125c8565b610c0b565b3480156101af575f80fd5b506101c36101be3660046125f0565b610ff3565b6040516101d0919061264a565b60405180910390f35b3480156101e4575f80fd5b5061018f6101f3366004612663565b611099565b348015610203575f80fd5b5061018f6110b4565b348015610217575f80fd5b5061018f610226366004612727565b6111ec565b348015610236575f80fd5b5061018f61142c565b34801561024a575f80fd5b5061027c610259366004612808565b606b6020525f908152604090208054600182015460029092015490919060ff1683565b6040805193845260208401929092521515908201526060016101d0565b3480156102a4575f80fd5b506033546001600160a01b03165b6040516001600160a01b0390911681526020016101d0565b61018f6102d83660046125c8565b61143f565b3480156102e8575f80fd5b5061030b6102f7366004612808565b60686020525f908152604090205460ff1681565b60405190151581526020016101d0565b348015610326575f80fd5b5061033060665481565b6040519081526020016101d0565b348015610349575f80fd5b506065546102b2906001600160a01b031681565b348015610368575f80fd5b50610330606d5481565b34801561037d575f80fd5b5061018f61038c366004612869565b611703565b34801561039c575f80fd5b5061018f6103ab3660046128d0565b6117d5565b3480156103bb575f80fd5b50606954610330565b3480156103cf575f80fd5b5061018f6103de366004612902565b61186f565b3480156103ee575f80fd5b506102b26103fd3660046125f0565b611b4a565b34801561040d575f80fd5b5061042161041c366004612808565b611b72565b6040516101d0949392919061294b565b34801561043c575f80fd5b5061018f61044b366004612808565b611c2a565b34801561045b575f80fd5b5061033060675481565b348015610470575f80fd5b506102b261047f3660046125f0565b611cba565b335f9081526068602052604090205460ff166104e75760405162461bcd60e51b815260206004820152601060248201527f6e6f7420696e2077686974656c6973740000000000000000000000000000000060448201526064015b60405180910390fd5b5f805b60695481101561053b57336001600160a01b03166069828154811061051157610511612983565b5f918252602090912001546001600160a01b031603610533576001915061053b565b6001016104ea565b50801561058a5760405162461bcd60e51b815260206004820152601260248201527f616c72656164792072656769737465726564000000000000000000000000000060448201526064016104de565b335f908152606b602052604090206002015460ff16156105ec5760405162461bcd60e51b815260206004820152601060248201527f7374616b6572206973206578697465640000000000000000000000000000000060448201526064016104de565b5f606d54116106635760405162461bcd60e51b815260206004820152602260248201527f73657175656e6365727353697a65206d7573742067726561746572207468616e60448201527f203000000000000000000000000000000000000000000000000000000000000060648201526084016104de565b5f8590036106b35760405162461bcd60e51b815260206004820152601960248201527f696e76616c69642074656e6465726d696e74207075626b65790000000000000060448201526064016104de565b8351610100146107055760405162461bcd60e51b815260206004820152601260248201527f696e76616c696420626c73207075626b6579000000000000000000000000000060448201526064016104de565b60665461071290836129dd565b3410156107615760405162461bcd60e51b815260206004820152601b60248201527f7374616b696e672076616c7565206973206e6f7420656e6f756768000000000060448201526064016104de565b5f61076c83346129f6565b90505f5b6069548110156108b55786606a5f6069848154811061079157610791612983565b5f9182526020808320909101546001600160a01b03168352820192909252604001902060010154036108055760405162461bcd60e51b815260206004820152601860248201527f746d4b657920616c72656164792072656769737465726564000000000000000060448201526064016104de565b8580519060200120606a5f6069848154811061082357610823612983565b5f9182526020808320909101546001600160a01b03168352820192909252604090810190912090516108589160020190612a5a565b6040518091039020036108ad5760405162461bcd60e51b815260206004820152601960248201527f626c734b657920616c726561647920726567697374657265640000000000000060448201526064016104de565b600101610770565b50604080516080810182523380825260208083018a81528385018a8152606085018790525f938452606a90925293909120825181547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03909116178155925160018401555190919060028201906109349082612b10565b5060609190910151600390910155606980546001810182555f919091527f7fb4302e8e91f9110a6554c2c0a24601252c2a42c2220ca988efcfe3999143080180547fffffffffffffffffffffffff000000000000000000000000000000000000000016339081179091556040517fb7f230b53b0f914ccf820ab0618ac8320e984eeb0fb6a740785cf7fdc3b5cee3916109d29189908990869061294b565b60405180910390a16069545f906109eb906001906129f6565b90505b8015610b9857606a5f6069610a046001856129f6565b81548110610a1457610a14612983565b905f5260205f20015f9054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020019081526020015f2060030154606a5f60698481548110610a6857610a68612983565b5f9182526020808320909101546001600160a01b031683528201929092526040019020600301541115610b81575f6069610aa36001846129f6565b81548110610ab357610ab3612983565b5f91825260209091200154606980546001600160a01b0390921692509083908110610ae057610ae0612983565b5f918252602090912001546001600160a01b03166069610b016001856129f6565b81548110610b1157610b11612983565b905f5260205f20015f6101000a8154816001600160a01b0302191690836001600160a01b031602179055508060698381548110610b5057610b50612983565b905f5260205f20015f6101000a8154816001600160a01b0302191690836001600160a01b0316021790555050610b86565b610b98565b80610b9081612bcc565b9150506109ee565b606c5460ff16158015610bae5750606d54606954145b15610bd157606c805460ff19166001179055610bca8585611cc9565b5050610c04565b606c5460ff168015610bf25750606d54606954111580610bf25750606d5481105b15610c0157610c018585611cc9565b50505b5050505050565b335f9081526068602052604090205460ff16610c695760405162461bcd60e51b815260206004820152601060248201527f6e6f7420696e2077686974656c6973740000000000000000000000000000000060448201526064016104de565b5f805b606954811015610cbd57336001600160a01b031660698281548110610c9357610c93612983565b5f918252602090912001546001600160a01b031603610cb55760019150610cbd565b600101610c6c565b5080610d0b5760405162461bcd60e51b815260206004820152601060248201527f7374616b6572206e6f742065786973740000000000000000000000000000000060448201526064016104de565b5f34118015610d375750606654335f908152606a6020526040902060030154610d359034906129dd565b115b610d835760405162461bcd60e51b815260206004820152601860248201527f7374616b696e672076616c7565206e6f7420656e6f756768000000000000000060448201526064016104de565b335f908152606a602052604081206003018054349290610da49084906129dd565b9091555050335f818152606a6020908152604091829020600301548251938452908301527f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d910160405180910390a15f610dfd336121ff565b6069549091505f90610e11906001906129f6565b90505b8015610fb557606a5f6069610e2a6001856129f6565b81548110610e3a57610e3a612983565b905f5260205f20015f9054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020019081526020015f2060030154606a5f60698481548110610e8e57610e8e612983565b5f9182526020808320909101546001600160a01b031683528201929092526040019020600301541115610fa3575f6069610ec96001846129f6565b81548110610ed957610ed9612983565b5f91825260209091200154606980546001600160a01b0390921692509083908110610f0657610f06612983565b5f918252602090912001546001600160a01b03166069610f276001856129f6565b81548110610f3757610f37612983565b905f5260205f20015f6101000a8154816001600160a01b0302191690836001600160a01b031602179055508060698381548110610f7657610f76612983565b905f5260205f20015f6101000a8154816001600160a01b0302191690836001600160a01b03160217905550505b80610fad81612bcc565b915050610e14565b505f610fc0336121ff565b606c5490915060ff168015610fd75750606d548210155b8015610fe45750606d5481105b15610c0457610c048585611cc9565b606f8181548110611002575f80fd5b905f5260205f20015f91509050805461101a90612a09565b80601f016020809104026020016040519081016040528092919081815260200182805461104690612a09565b80156110915780601f1061106857610100808354040283529160200191611091565b820191905f5260205f20905b81548152906001019060200180831161107457829003601f168201915b505050505081565b6110a1612299565b6070805460ff1916911515919091179055565b335f908152606b602052604090206002015460ff1680156110e25750335f908152606b602052604090205415155b80156110fe5750335f908152606b602052604090206001015443115b61114a5760405162461bcd60e51b815260206004820152601260248201527f696e76616c6964207769746864726177616c000000000000000000000000000060448201526064016104de565b335f818152606b602052604080822054905181156108fc0292818181858888f1935050505015801561117e573d5f803e3d5ffd5b50335f818152606b6020908152604091829020548251938452908301527fd8138f8a3f377c5259ca548e70e4c2de94f129f5a11036a15b69513cba2b426a910160405180910390a1335f908152606b602052604081208181556001810191909155600201805460ff19169055565b6065546001600160a01b031633146112465760405162461bcd60e51b815260206004820152601760248201527f6f6e6c792073657175656e63657220636f6e747261637400000000000000000060448201526064016104de565b60705460ff1615610c04575f805b855181101561140f575f8787838151811061127157611271612983565b60200260200101518151811061128957611289612983565b60200260200101519050606a5f826001600160a01b03166001600160a01b031681526020019081526020015f2060030154836112c591906129dd565b92505f6112d1826121ff565b9050805b6069546112e4906001906129f6565b81101561137b5760696112f88260016129dd565b8154811061130857611308612983565b5f91825260209091200154606980546001600160a01b03909216918390811061133357611333612983565b5f91825260209091200180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03929092169190911790556001016112d5565b50606980548061138d5761138d612be1565b5f828152602080822083015f1990810180547fffffffffffffffffffffffff000000000000000000000000000000000000000090811690915593019093556001600160a01b0385168152606a909252604082208054909116815560018101829055906113fc6002830182612401565b505f600391909101555050600101611254565b5061141a8383611cc9565b61142484826122f3565b505050505050565b611434612299565b61143d5f612398565b565b335f908152606b602052604090206002015460ff16156114a15760405162461bcd60e51b815260206004820152601060248201527f7374616b6572206973206578697465640000000000000000000000000000000060448201526064016104de565b5f6114ab336121ff565b60408051606081018252335f908152606a602090815292902060030154815260675492935091908201906114df90436129dd565b815260016020918201819052335f818152606b845260409081902085518082558686015194820194909455948101516002909501805460ff1916951515959095179094558351908152918201527f6cca423c6ffc06e62a0acc433965e074b11c28479b0449250ce3ff65ac9e39fe910160405180910390a1805b606954611568906001906129f6565b8110156115ff57606961157c8260016129dd565b8154811061158c5761158c612983565b5f91825260209091200154606980546001600160a01b0390921691839081106115b7576115b7612983565b5f91825260209091200180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055600101611559565b50606980548061161157611611612be1565b5f828152602080822083015f1990810180547fffffffffffffffffffffffff00000000000000000000000000000000000000009081169091559301909355338152606a909252604082208054909116815560018101829055906116776002830182612401565b505f60039190910181905560695490036116e95760655f9054906101000a90046001600160a01b03166001600160a01b0316638456cb596040518163ffffffff1660e01b81526004015f604051808303815f87803b1580156116d7575f80fd5b505af1158015610c01573d5f803e3d5ffd5b606d548110156116fd576116fd8383611cc9565b505b5050565b61170b612299565b5f5b8381101561177057600160685f87878581811061172c5761172c612983565b90506020020160208101906117419190612808565b6001600160a01b0316815260208101919091526040015f20805460ff191691151591909117905560010161170d565b505f5b81811015610c04575f60685f85858581811061179157611791612983565b90506020020160208101906117a69190612808565b6001600160a01b0316815260208101919091526040015f20805460ff1916911515919091179055600101611773565b6117dd612299565b606d5483141580156117f157506069548310155b80156117fc57505f83115b6118485760405162461bcd60e51b815260206004820152601b60248201527f696e76616c6964206e65772073657175656e636572732073697a65000000000060448201526064016104de565b606954606d54101561186857606d8390556118638282611cc9565b6116fd565b5050606d55565b5f54610100900460ff161580801561188d57505f54600160ff909116105b806118a65750303b1580156118a657505f5460ff166001145b6119185760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016104de565b5f805460ff191660011790558015611956575f80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b6001600160a01b0385166119ac5760405162461bcd60e51b815260206004820152601a60248201527f696e76616c69642073657175656e63657220636f6e747261637400000000000060448201526064016104de565b5f8411611a215760405162461bcd60e51b815260206004820152602260248201527f73657175656e6365727353697a65206d7573742067726561746572207468616e60448201527f203000000000000000000000000000000000000000000000000000000000000060648201526084016104de565b5f8311611a965760405162461bcd60e51b815260206004820152602160248201527f7374616b696e67206c696d6974206d7573742067726561746572207468616e2060448201527f300000000000000000000000000000000000000000000000000000000000000060648201526084016104de565b606580547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b038716179055606d84905560668390556067829055611ae186612398565b8015611424575f80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a1505050505050565b606e8181548110611b59575f80fd5b5f918252602090912001546001600160a01b0316905081565b606a6020525f90815260409020805460018201546002830180546001600160a01b03909316939192611ba390612a09565b80601f0160208091040260200160405190810160405280929190818152602001828054611bcf90612a09565b8015611c1a5780601f10611bf157610100808354040283529160200191611c1a565b820191905f5260205f20905b815481529060010190602001808311611bfd57829003601f168201915b5050505050908060030154905084565b611c32612299565b6001600160a01b038116611cae5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016104de565b611cb781612398565b50565b60698181548110611b59575f80fd5b611cd4606e5f612438565b611cdf606f5f612453565b606d54606954811115611cf157506069545b5f8167ffffffffffffffff811115611d0b57611d0b6124a2565b604051908082528060200260200182016040528015611d5757816020015b60408051606080820183525f808352602083015291810191909152815260200190600190039081611d295790505b5090505f5b82811015611fde57606e606a5f60698481548110611d7c57611d7c612983565b5f9182526020808320909101546001600160a01b039081168452838201949094526040909201812054845460018101865594825291812090930180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169190921617905560698054606f92606a92909185908110611dfd57611dfd612983565b5f9182526020808320909101546001600160a01b031683528281019390935260409091018120835460018101855593825291902090910190611e429060020182612c0e565b506040518060600160405280606a5f60698581548110611e6457611e64612983565b5f9182526020808320909101546001600160a01b0390811684528382019490945260409092018120549092168352606980549390910192606a92919086908110611eb057611eb0612983565b905f5260205f20015f9054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020019081526020015f20600101548152602001606a5f60698581548110611f0957611f09612983565b5f9182526020808320909101546001600160a01b0316835282019290925260400190206002018054611f3a90612a09565b80601f0160208091040260200160405190810160405280929190818152602001828054611f6690612a09565b8015611fb15780601f10611f8857610100808354040283529160200191611fb1565b820191905f5260205f20905b815481529060010190602001808311611f9457829003601f168201915b5050505050815250828281518110611fcb57611fcb612983565b6020908102919091010152600101611d5c565b505f63ad01732f60e01b60655f9054906101000a90046001600160a01b03166001600160a01b03166373452a926040518163ffffffff1660e01b8152600401602060405180830381865afa158015612038573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061205c9190612cd9565b6120679060016129dd565b83604051602401612079929190612cf0565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526065549091506001600160a01b031663e73a6ba88583606e606f8a6120fa3390565b6040518763ffffffff1660e01b815260040161211a959493929190612ea4565b5f604051808303818588803b158015612131575f80fd5b505af1158015612143573d5f803e3d5ffd5b50505050507f3426004122e24543c0ea4a940ddb1b8f7de59b484229ef718fa87e1eeaf62fd2606e606f60655f9054906101000a90046001600160a01b03166001600160a01b03166373452a926040518163ffffffff1660e01b8152600401602060405180830381865afa1580156121bd573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906121e19190612cd9565b6040516121f093929190612f04565b60405180910390a15050505050565b5f805b60695481101561225057826001600160a01b03166069828154811061222957612229612983565b5f918252602090912001546001600160a01b0316036122485792915050565b600101612202565b5060405162461bcd60e51b815260206004820152601060248201527f7374616b6572206e6f742065786973740000000000000000000000000000000060448201526064016104de565b6033546001600160a01b0316331461143d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104de565b80156116ff575f826001600160a01b0316826040515f6040518083038185875af1925050503d805f8114612342576040519150601f19603f3d011682016040523d82523d5f602084013e612347565b606091505b50509050806116fd5760405162461bcd60e51b815260206004820152601b60248201527f526f6c6c75703a20455448207472616e73666572206661696c6564000000000060448201526064016104de565b603380546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35050565b50805461240d90612a09565b5f825580601f1061241c575050565b601f0160209004905f5260205f2090810190611cb7919061246e565b5080545f8255905f5260205f2090810190611cb7919061246e565b5080545f8255905f5260205f2090810190611cb79190612486565b5b80821115612482575f815560010161246f565b5090565b80821115612482575f6124998282612401565b50600101612486565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b604051601f8201601f1916810167ffffffffffffffff811182821017156124f8576124f86124a2565b604052919050565b803563ffffffff81168114612513575f80fd5b919050565b5f805f806080858703121561252b575f80fd5b8435935060208086013567ffffffffffffffff8082111561254a575f80fd5b818801915088601f83011261255d575f80fd5b81358181111561256f5761256f6124a2565b61258184601f19601f840116016124cf565b91508082528984828501011115612596575f80fd5b80848401858401375f848284010152508095505050506125b860408601612500565b9396929550929360600135925050565b5f80604083850312156125d9575f80fd5b6125e283612500565b946020939093013593505050565b5f60208284031215612600575f80fd5b5035919050565b5f81518084525f5b8181101561262b5760208185018101518683018201520161260f565b505f602082860101526020601f19601f83011685010191505092915050565b602081525f61265c6020830184612607565b9392505050565b5f60208284031215612673575f80fd5b8135801515811461265c575f80fd5b5f67ffffffffffffffff82111561269b5761269b6124a2565b5060051b60200190565b80356001600160a01b0381168114612513575f80fd5b5f82601f8301126126ca575f80fd5b813560206126df6126da83612682565b6124cf565b8083825260208201915060208460051b870101935086841115612700575f80fd5b602086015b8481101561271c5780358352918301918301612705565b509695505050505050565b5f805f805f60a0868803121561273b575f80fd5b853567ffffffffffffffff80821115612752575f80fd5b818801915088601f830112612765575f80fd5b813560206127756126da83612682565b82815260059290921b8401810191818101908c841115612793575f80fd5b948201945b838610156127b8576127a9866126a5565b82529482019490820190612798565b995050890135925050808211156127cd575f80fd5b506127da888289016126bb565b9450506127e9604087016126a5565b92506127f760608701612500565b949793965091946080013592915050565b5f60208284031215612818575f80fd5b61265c826126a5565b5f8083601f840112612831575f80fd5b50813567ffffffffffffffff811115612848575f80fd5b6020830191508360208260051b8501011115612862575f80fd5b9250929050565b5f805f806040858703121561287c575f80fd5b843567ffffffffffffffff80821115612893575f80fd5b61289f88838901612821565b909650945060208701359150808211156128b7575f80fd5b506128c487828801612821565b95989497509550505050565b5f805f606084860312156128e2575f80fd5b833592506128f260208501612500565b9150604084013590509250925092565b5f805f805f60a08688031215612916575f80fd5b61291f866126a5565b945061292d602087016126a5565b94979496505050506040830135926060810135926080909101359150565b6001600160a01b0385168152836020820152608060408201525f6129726080830185612607565b905082606083015295945050505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b808201808211156129f0576129f06129b0565b92915050565b818103818111156129f0576129f06129b0565b600181811c90821680612a1d57607f821691505b602082108103612a54577f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b50919050565b5f808354612a6781612a09565b60018281168015612a7f5760018114612a9457612ac0565b60ff1984168752821515830287019450612ac0565b875f526020805f205f5b85811015612ab75781548a820152908401908201612a9e565b50505082870194505b50929695505050505050565b601f8211156116fd57805f5260205f20601f840160051c81016020851015612af15750805b601f840160051c820191505b81811015610c04575f8155600101612afd565b815167ffffffffffffffff811115612b2a57612b2a6124a2565b612b3e81612b388454612a09565b84612acc565b602080601f831160018114612b71575f8415612b5a5750858301515b5f19600386901b1c1916600185901b178555611424565b5f85815260208120601f198616915b82811015612b9f57888601518255948401946001909101908401612b80565b5085821015612bbc57878501515f19600388901b60f8161c191681555b5050505050600190811b01905550565b5f81612bda57612bda6129b0565b505f190190565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603160045260245ffd5b818103612c19575050565b612c238254612a09565b67ffffffffffffffff811115612c3b57612c3b6124a2565b612c4981612b388454612a09565b5f601f821160018114612c7a575f8315612c635750848201545b5f19600385901b1c1916600184901b178455610c04565b5f8581526020808220868352908220601f198616925b83811015612cb05782860154825560019586019590910190602001612c90565b5085831015612bbc579301545f1960f8600387901b161c19169092555050600190811b01905550565b5f60208284031215612ce9575f80fd5b5051919050565b5f604080830185845260206040818601528186518084526060935060608701915060608160051b8801018389015f5b83811015612d8d578983037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa0018552815180516001600160a01b031684528681015187850152880151888401889052612d7a88850182612607565b9587019593505090850190600101612d1f565b50909a9950505050505050505050565b5f815480845260208085019450835f5260205f205f5b83811015612dd85781546001600160a01b031687529582019560019182019101612db3565b509495945050505050565b5f828254808552602080860195506005818360051b850101865f52825f205f5b85811015612e9657601f19878403018a525f8254612e2081612a09565b80865260018281168015612e3b5760018114612e5457612e7f565b60ff1984168a890152898315158a1b8901019450612e7f565b865f52895f205f5b84811015612e775781548a82018d0152908301908b01612e5c565b89018b019550505b509c88019c92955050509190910190600101612e03565b509098975050505050505050565b60a081525f612eb660a0830188612607565b8281036020840152612ec88188612d9d565b90508281036040840152612edc8187612de3565b91505063ffffffff841660608301526001600160a01b03831660808301529695505050505050565b606081525f612f166060830186612d9d565b8281036020840152612f288186612de3565b91505082604083015294935050505056fea2646970667358221220f7e2cbe3ecfcbebd685af85c98bf4f0155e4178edecb0cba14ab5a8a444d63d864736f6c63430008180033",
}

// StakingABI is the input ABI used to generate the binding from.
// Deprecated: Use StakingMetaData.ABI instead.
var StakingABI = StakingMetaData.ABI

// StakingBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use StakingMetaData.Bin instead.
var StakingBin = StakingMetaData.Bin

// DeployStaking deploys a new Ethereum contract, binding an instance of Staking to it.
func DeployStaking(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Staking, error) {
	parsed, err := StakingMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(StakingBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Staking{StakingCaller: StakingCaller{contract: contract}, StakingTransactor: StakingTransactor{contract: contract}, StakingFilterer: StakingFilterer{contract: contract}}, nil
}

// Staking is an auto generated Go binding around an Ethereum contract.
type Staking struct {
	StakingCaller     // Read-only binding to the contract
	StakingTransactor // Write-only binding to the contract
	StakingFilterer   // Log filterer for contract events
}

// StakingCaller is an auto generated read-only Go binding around an Ethereum contract.
type StakingCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakingTransactor is an auto generated write-only Go binding around an Ethereum contract.
type StakingTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakingFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type StakingFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakingSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type StakingSession struct {
	Contract     *Staking          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// StakingCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type StakingCallerSession struct {
	Contract *StakingCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// StakingTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type StakingTransactorSession struct {
	Contract     *StakingTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// StakingRaw is an auto generated low-level Go binding around an Ethereum contract.
type StakingRaw struct {
	Contract *Staking // Generic contract binding to access the raw methods on
}

// StakingCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type StakingCallerRaw struct {
	Contract *StakingCaller // Generic read-only contract binding to access the raw methods on
}

// StakingTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type StakingTransactorRaw struct {
	Contract *StakingTransactor // Generic write-only contract binding to access the raw methods on
}

// NewStaking creates a new instance of Staking, bound to a specific deployed contract.
func NewStaking(address common.Address, backend bind.ContractBackend) (*Staking, error) {
	contract, err := bindStaking(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Staking{StakingCaller: StakingCaller{contract: contract}, StakingTransactor: StakingTransactor{contract: contract}, StakingFilterer: StakingFilterer{contract: contract}}, nil
}

// NewStakingCaller creates a new read-only instance of Staking, bound to a specific deployed contract.
func NewStakingCaller(address common.Address, caller bind.ContractCaller) (*StakingCaller, error) {
	contract, err := bindStaking(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &StakingCaller{contract: contract}, nil
}

// NewStakingTransactor creates a new write-only instance of Staking, bound to a specific deployed contract.
func NewStakingTransactor(address common.Address, transactor bind.ContractTransactor) (*StakingTransactor, error) {
	contract, err := bindStaking(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &StakingTransactor{contract: contract}, nil
}

// NewStakingFilterer creates a new log filterer instance of Staking, bound to a specific deployed contract.
func NewStakingFilterer(address common.Address, filterer bind.ContractFilterer) (*StakingFilterer, error) {
	contract, err := bindStaking(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &StakingFilterer{contract: contract}, nil
}

// bindStaking binds a generic wrapper to an already deployed contract.
func bindStaking(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(StakingABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Staking *StakingRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Staking.Contract.StakingCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Staking *StakingRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Staking.Contract.StakingTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Staking *StakingRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Staking.Contract.StakingTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Staking *StakingCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Staking.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Staking *StakingTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Staking.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Staking *StakingTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Staking.Contract.contract.Transact(opts, method, params...)
}

// Limit is a free data retrieval call binding the contract method 0xa4d66daf.
//
// Solidity: function limit() view returns(uint256)
func (_Staking *StakingCaller) Limit(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "limit")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Limit is a free data retrieval call binding the contract method 0xa4d66daf.
//
// Solidity: function limit() view returns(uint256)
func (_Staking *StakingSession) Limit() (*big.Int, error) {
	return _Staking.Contract.Limit(&_Staking.CallOpts)
}

// Limit is a free data retrieval call binding the contract method 0xa4d66daf.
//
// Solidity: function limit() view returns(uint256)
func (_Staking *StakingCallerSession) Limit() (*big.Int, error) {
	return _Staking.Contract.Limit(&_Staking.CallOpts)
}

// Lock is a free data retrieval call binding the contract method 0xf83d08ba.
//
// Solidity: function lock() view returns(uint256)
func (_Staking *StakingCaller) Lock(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "lock")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Lock is a free data retrieval call binding the contract method 0xf83d08ba.
//
// Solidity: function lock() view returns(uint256)
func (_Staking *StakingSession) Lock() (*big.Int, error) {
	return _Staking.Contract.Lock(&_Staking.CallOpts)
}

// Lock is a free data retrieval call binding the contract method 0xf83d08ba.
//
// Solidity: function lock() view returns(uint256)
func (_Staking *StakingCallerSession) Lock() (*big.Int, error) {
	return _Staking.Contract.Lock(&_Staking.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Staking *StakingCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Staking *StakingSession) Owner() (common.Address, error) {
	return _Staking.Contract.Owner(&_Staking.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Staking *StakingCallerSession) Owner() (common.Address, error) {
	return _Staking.Contract.Owner(&_Staking.CallOpts)
}

// SequencerContract is a free data retrieval call binding the contract method 0xa7044836.
//
// Solidity: function sequencerContract() view returns(address)
func (_Staking *StakingCaller) SequencerContract(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "sequencerContract")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// SequencerContract is a free data retrieval call binding the contract method 0xa7044836.
//
// Solidity: function sequencerContract() view returns(address)
func (_Staking *StakingSession) SequencerContract() (common.Address, error) {
	return _Staking.Contract.SequencerContract(&_Staking.CallOpts)
}

// SequencerContract is a free data retrieval call binding the contract method 0xa7044836.
//
// Solidity: function sequencerContract() view returns(address)
func (_Staking *StakingCallerSession) SequencerContract() (common.Address, error) {
	return _Staking.Contract.SequencerContract(&_Staking.CallOpts)
}

// SequencersAddr is a free data retrieval call binding the contract method 0xd3710ec5.
//
// Solidity: function sequencersAddr(uint256 ) view returns(address)
func (_Staking *StakingCaller) SequencersAddr(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "sequencersAddr", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// SequencersAddr is a free data retrieval call binding the contract method 0xd3710ec5.
//
// Solidity: function sequencersAddr(uint256 ) view returns(address)
func (_Staking *StakingSession) SequencersAddr(arg0 *big.Int) (common.Address, error) {
	return _Staking.Contract.SequencersAddr(&_Staking.CallOpts, arg0)
}

// SequencersAddr is a free data retrieval call binding the contract method 0xd3710ec5.
//
// Solidity: function sequencersAddr(uint256 ) view returns(address)
func (_Staking *StakingCallerSession) SequencersAddr(arg0 *big.Int) (common.Address, error) {
	return _Staking.Contract.SequencersAddr(&_Staking.CallOpts, arg0)
}

// SequencersBLS is a free data retrieval call binding the contract method 0x399b8b39.
//
// Solidity: function sequencersBLS(uint256 ) view returns(bytes)
func (_Staking *StakingCaller) SequencersBLS(opts *bind.CallOpts, arg0 *big.Int) ([]byte, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "sequencersBLS", arg0)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// SequencersBLS is a free data retrieval call binding the contract method 0x399b8b39.
//
// Solidity: function sequencersBLS(uint256 ) view returns(bytes)
func (_Staking *StakingSession) SequencersBLS(arg0 *big.Int) ([]byte, error) {
	return _Staking.Contract.SequencersBLS(&_Staking.CallOpts, arg0)
}

// SequencersBLS is a free data retrieval call binding the contract method 0x399b8b39.
//
// Solidity: function sequencersBLS(uint256 ) view returns(bytes)
func (_Staking *StakingCallerSession) SequencersBLS(arg0 *big.Int) ([]byte, error) {
	return _Staking.Contract.SequencersBLS(&_Staking.CallOpts, arg0)
}

// SequencersSize is a free data retrieval call binding the contract method 0xb2145280.
//
// Solidity: function sequencersSize() view returns(uint256)
func (_Staking *StakingCaller) SequencersSize(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "sequencersSize")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SequencersSize is a free data retrieval call binding the contract method 0xb2145280.
//
// Solidity: function sequencersSize() view returns(uint256)
func (_Staking *StakingSession) SequencersSize() (*big.Int, error) {
	return _Staking.Contract.SequencersSize(&_Staking.CallOpts)
}

// SequencersSize is a free data retrieval call binding the contract method 0xb2145280.
//
// Solidity: function sequencersSize() view returns(uint256)
func (_Staking *StakingCallerSession) SequencersSize() (*big.Int, error) {
	return _Staking.Contract.SequencersSize(&_Staking.CallOpts)
}

// Stakers is a free data retrieval call binding the contract method 0xfd5e6dd1.
//
// Solidity: function stakers(uint256 ) view returns(address)
func (_Staking *StakingCaller) Stakers(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "stakers", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Stakers is a free data retrieval call binding the contract method 0xfd5e6dd1.
//
// Solidity: function stakers(uint256 ) view returns(address)
func (_Staking *StakingSession) Stakers(arg0 *big.Int) (common.Address, error) {
	return _Staking.Contract.Stakers(&_Staking.CallOpts, arg0)
}

// Stakers is a free data retrieval call binding the contract method 0xfd5e6dd1.
//
// Solidity: function stakers(uint256 ) view returns(address)
func (_Staking *StakingCallerSession) Stakers(arg0 *big.Int) (common.Address, error) {
	return _Staking.Contract.Stakers(&_Staking.CallOpts, arg0)
}

// StakersNumber is a free data retrieval call binding the contract method 0xcbd679cb.
//
// Solidity: function stakersNumber() view returns(uint256)
func (_Staking *StakingCaller) StakersNumber(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "stakersNumber")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// StakersNumber is a free data retrieval call binding the contract method 0xcbd679cb.
//
// Solidity: function stakersNumber() view returns(uint256)
func (_Staking *StakingSession) StakersNumber() (*big.Int, error) {
	return _Staking.Contract.StakersNumber(&_Staking.CallOpts)
}

// StakersNumber is a free data retrieval call binding the contract method 0xcbd679cb.
//
// Solidity: function stakersNumber() view returns(uint256)
func (_Staking *StakingCallerSession) StakersNumber() (*big.Int, error) {
	return _Staking.Contract.StakersNumber(&_Staking.CallOpts)
}

// Stakings is a free data retrieval call binding the contract method 0xdc6e13e1.
//
// Solidity: function stakings(address ) view returns(address addr, bytes32 tmKey, bytes blsKey, uint256 balance)
func (_Staking *StakingCaller) Stakings(opts *bind.CallOpts, arg0 common.Address) (struct {
	Addr    common.Address
	TmKey   [32]byte
	BlsKey  []byte
	Balance *big.Int
}, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "stakings", arg0)

	outstruct := new(struct {
		Addr    common.Address
		TmKey   [32]byte
		BlsKey  []byte
		Balance *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Addr = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.TmKey = *abi.ConvertType(out[1], new([32]byte)).(*[32]byte)
	outstruct.BlsKey = *abi.ConvertType(out[2], new([]byte)).(*[]byte)
	outstruct.Balance = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// Stakings is a free data retrieval call binding the contract method 0xdc6e13e1.
//
// Solidity: function stakings(address ) view returns(address addr, bytes32 tmKey, bytes blsKey, uint256 balance)
func (_Staking *StakingSession) Stakings(arg0 common.Address) (struct {
	Addr    common.Address
	TmKey   [32]byte
	BlsKey  []byte
	Balance *big.Int
}, error) {
	return _Staking.Contract.Stakings(&_Staking.CallOpts, arg0)
}

// Stakings is a free data retrieval call binding the contract method 0xdc6e13e1.
//
// Solidity: function stakings(address ) view returns(address addr, bytes32 tmKey, bytes blsKey, uint256 balance)
func (_Staking *StakingCallerSession) Stakings(arg0 common.Address) (struct {
	Addr    common.Address
	TmKey   [32]byte
	BlsKey  []byte
	Balance *big.Int
}, error) {
	return _Staking.Contract.Stakings(&_Staking.CallOpts, arg0)
}

// Whitelist is a free data retrieval call binding the contract method 0x9b19251a.
//
// Solidity: function whitelist(address ) view returns(bool)
func (_Staking *StakingCaller) Whitelist(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "whitelist", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Whitelist is a free data retrieval call binding the contract method 0x9b19251a.
//
// Solidity: function whitelist(address ) view returns(bool)
func (_Staking *StakingSession) Whitelist(arg0 common.Address) (bool, error) {
	return _Staking.Contract.Whitelist(&_Staking.CallOpts, arg0)
}

// Whitelist is a free data retrieval call binding the contract method 0x9b19251a.
//
// Solidity: function whitelist(address ) view returns(bool)
func (_Staking *StakingCallerSession) Whitelist(arg0 common.Address) (bool, error) {
	return _Staking.Contract.Whitelist(&_Staking.CallOpts, arg0)
}

// Withdrawals is a free data retrieval call binding the contract method 0x7a9262a2.
//
// Solidity: function withdrawals(address ) view returns(uint256 balance, uint256 unlock, bool exit)
func (_Staking *StakingCaller) Withdrawals(opts *bind.CallOpts, arg0 common.Address) (struct {
	Balance *big.Int
	Unlock  *big.Int
	Exit    bool
}, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "withdrawals", arg0)

	outstruct := new(struct {
		Balance *big.Int
		Unlock  *big.Int
		Exit    bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Balance = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Unlock = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.Exit = *abi.ConvertType(out[2], new(bool)).(*bool)

	return *outstruct, err

}

// Withdrawals is a free data retrieval call binding the contract method 0x7a9262a2.
//
// Solidity: function withdrawals(address ) view returns(uint256 balance, uint256 unlock, bool exit)
func (_Staking *StakingSession) Withdrawals(arg0 common.Address) (struct {
	Balance *big.Int
	Unlock  *big.Int
	Exit    bool
}, error) {
	return _Staking.Contract.Withdrawals(&_Staking.CallOpts, arg0)
}

// Withdrawals is a free data retrieval call binding the contract method 0x7a9262a2.
//
// Solidity: function withdrawals(address ) view returns(uint256 balance, uint256 unlock, bool exit)
func (_Staking *StakingCallerSession) Withdrawals(arg0 common.Address) (struct {
	Balance *big.Int
	Unlock  *big.Int
	Exit    bool
}, error) {
	return _Staking.Contract.Withdrawals(&_Staking.CallOpts, arg0)
}

// ClaimETH is a paid mutator transaction binding the contract method 0x67272999.
//
// Solidity: function claimETH() returns()
func (_Staking *StakingTransactor) ClaimETH(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "claimETH")
}

// ClaimETH is a paid mutator transaction binding the contract method 0x67272999.
//
// Solidity: function claimETH() returns()
func (_Staking *StakingSession) ClaimETH() (*types.Transaction, error) {
	return _Staking.Contract.ClaimETH(&_Staking.TransactOpts)
}

// ClaimETH is a paid mutator transaction binding the contract method 0x67272999.
//
// Solidity: function claimETH() returns()
func (_Staking *StakingTransactorSession) ClaimETH() (*types.Transaction, error) {
	return _Staking.Contract.ClaimETH(&_Staking.TransactOpts)
}

// Initialize is a paid mutator transaction binding the contract method 0xd13f90b4.
//
// Solidity: function initialize(address _admin, address _sequencerContract, uint256 _sequencersSize, uint256 _limit, uint256 _lock) returns()
func (_Staking *StakingTransactor) Initialize(opts *bind.TransactOpts, _admin common.Address, _sequencerContract common.Address, _sequencersSize *big.Int, _limit *big.Int, _lock *big.Int) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "initialize", _admin, _sequencerContract, _sequencersSize, _limit, _lock)
}

// Initialize is a paid mutator transaction binding the contract method 0xd13f90b4.
//
// Solidity: function initialize(address _admin, address _sequencerContract, uint256 _sequencersSize, uint256 _limit, uint256 _lock) returns()
func (_Staking *StakingSession) Initialize(_admin common.Address, _sequencerContract common.Address, _sequencersSize *big.Int, _limit *big.Int, _lock *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.Initialize(&_Staking.TransactOpts, _admin, _sequencerContract, _sequencersSize, _limit, _lock)
}

// Initialize is a paid mutator transaction binding the contract method 0xd13f90b4.
//
// Solidity: function initialize(address _admin, address _sequencerContract, uint256 _sequencersSize, uint256 _limit, uint256 _lock) returns()
func (_Staking *StakingTransactorSession) Initialize(_admin common.Address, _sequencerContract common.Address, _sequencersSize *big.Int, _limit *big.Int, _lock *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.Initialize(&_Staking.TransactOpts, _admin, _sequencerContract, _sequencersSize, _limit, _lock)
}

// Register is a paid mutator transaction binding the contract method 0x1b9346ed.
//
// Solidity: function register(bytes32 tmKey, bytes blsKey, uint32 _minGasLimit, uint256 _gasFee) payable returns()
func (_Staking *StakingTransactor) Register(opts *bind.TransactOpts, tmKey [32]byte, blsKey []byte, _minGasLimit uint32, _gasFee *big.Int) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "register", tmKey, blsKey, _minGasLimit, _gasFee)
}

// Register is a paid mutator transaction binding the contract method 0x1b9346ed.
//
// Solidity: function register(bytes32 tmKey, bytes blsKey, uint32 _minGasLimit, uint256 _gasFee) payable returns()
func (_Staking *StakingSession) Register(tmKey [32]byte, blsKey []byte, _minGasLimit uint32, _gasFee *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.Register(&_Staking.TransactOpts, tmKey, blsKey, _minGasLimit, _gasFee)
}

// Register is a paid mutator transaction binding the contract method 0x1b9346ed.
//
// Solidity: function register(bytes32 tmKey, bytes blsKey, uint32 _minGasLimit, uint256 _gasFee) payable returns()
func (_Staking *StakingTransactorSession) Register(tmKey [32]byte, blsKey []byte, _minGasLimit uint32, _gasFee *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.Register(&_Staking.TransactOpts, tmKey, blsKey, _minGasLimit, _gasFee)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Staking *StakingTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Staking *StakingSession) RenounceOwnership() (*types.Transaction, error) {
	return _Staking.Contract.RenounceOwnership(&_Staking.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Staking *StakingTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Staking.Contract.RenounceOwnership(&_Staking.TransactOpts)
}

// Slash is a paid mutator transaction binding the contract method 0x6e1a7a1f.
//
// Solidity: function slash(address[] sequencers, uint256[] sequencerIndex, address challenger, uint32 _minGasLimit, uint256 _gasFee) returns()
func (_Staking *StakingTransactor) Slash(opts *bind.TransactOpts, sequencers []common.Address, sequencerIndex []*big.Int, challenger common.Address, _minGasLimit uint32, _gasFee *big.Int) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "slash", sequencers, sequencerIndex, challenger, _minGasLimit, _gasFee)
}

// Slash is a paid mutator transaction binding the contract method 0x6e1a7a1f.
//
// Solidity: function slash(address[] sequencers, uint256[] sequencerIndex, address challenger, uint32 _minGasLimit, uint256 _gasFee) returns()
func (_Staking *StakingSession) Slash(sequencers []common.Address, sequencerIndex []*big.Int, challenger common.Address, _minGasLimit uint32, _gasFee *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.Slash(&_Staking.TransactOpts, sequencers, sequencerIndex, challenger, _minGasLimit, _gasFee)
}

// Slash is a paid mutator transaction binding the contract method 0x6e1a7a1f.
//
// Solidity: function slash(address[] sequencers, uint256[] sequencerIndex, address challenger, uint32 _minGasLimit, uint256 _gasFee) returns()
func (_Staking *StakingTransactorSession) Slash(sequencers []common.Address, sequencerIndex []*big.Int, challenger common.Address, _minGasLimit uint32, _gasFee *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.Slash(&_Staking.TransactOpts, sequencers, sequencerIndex, challenger, _minGasLimit, _gasFee)
}

// StakeETH is a paid mutator transaction binding the contract method 0x22222760.
//
// Solidity: function stakeETH(uint32 _minGasLimit, uint256 _gasFee) payable returns()
func (_Staking *StakingTransactor) StakeETH(opts *bind.TransactOpts, _minGasLimit uint32, _gasFee *big.Int) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "stakeETH", _minGasLimit, _gasFee)
}

// StakeETH is a paid mutator transaction binding the contract method 0x22222760.
//
// Solidity: function stakeETH(uint32 _minGasLimit, uint256 _gasFee) payable returns()
func (_Staking *StakingSession) StakeETH(_minGasLimit uint32, _gasFee *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.StakeETH(&_Staking.TransactOpts, _minGasLimit, _gasFee)
}

// StakeETH is a paid mutator transaction binding the contract method 0x22222760.
//
// Solidity: function stakeETH(uint32 _minGasLimit, uint256 _gasFee) payable returns()
func (_Staking *StakingTransactorSession) StakeETH(_minGasLimit uint32, _gasFee *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.StakeETH(&_Staking.TransactOpts, _minGasLimit, _gasFee)
}

// ToggleSlash is a paid mutator transaction binding the contract method 0x59e93d1e.
//
// Solidity: function toggleSlash(bool enanble) returns()
func (_Staking *StakingTransactor) ToggleSlash(opts *bind.TransactOpts, enanble bool) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "toggleSlash", enanble)
}

// ToggleSlash is a paid mutator transaction binding the contract method 0x59e93d1e.
//
// Solidity: function toggleSlash(bool enanble) returns()
func (_Staking *StakingSession) ToggleSlash(enanble bool) (*types.Transaction, error) {
	return _Staking.Contract.ToggleSlash(&_Staking.TransactOpts, enanble)
}

// ToggleSlash is a paid mutator transaction binding the contract method 0x59e93d1e.
//
// Solidity: function toggleSlash(bool enanble) returns()
func (_Staking *StakingTransactorSession) ToggleSlash(enanble bool) (*types.Transaction, error) {
	return _Staking.Contract.ToggleSlash(&_Staking.TransactOpts, enanble)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Staking *StakingTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Staking *StakingSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Staking.Contract.TransferOwnership(&_Staking.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Staking *StakingTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Staking.Contract.TransferOwnership(&_Staking.TransactOpts, newOwner)
}

// UpdateParams is a paid mutator transaction binding the contract method 0xc95a6bf2.
//
// Solidity: function updateParams(uint256 _sequencersSize, uint32 _minGasLimit, uint256 _gasFee) returns()
func (_Staking *StakingTransactor) UpdateParams(opts *bind.TransactOpts, _sequencersSize *big.Int, _minGasLimit uint32, _gasFee *big.Int) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "updateParams", _sequencersSize, _minGasLimit, _gasFee)
}

// UpdateParams is a paid mutator transaction binding the contract method 0xc95a6bf2.
//
// Solidity: function updateParams(uint256 _sequencersSize, uint32 _minGasLimit, uint256 _gasFee) returns()
func (_Staking *StakingSession) UpdateParams(_sequencersSize *big.Int, _minGasLimit uint32, _gasFee *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.UpdateParams(&_Staking.TransactOpts, _sequencersSize, _minGasLimit, _gasFee)
}

// UpdateParams is a paid mutator transaction binding the contract method 0xc95a6bf2.
//
// Solidity: function updateParams(uint256 _sequencersSize, uint32 _minGasLimit, uint256 _gasFee) returns()
func (_Staking *StakingTransactorSession) UpdateParams(_sequencersSize *big.Int, _minGasLimit uint32, _gasFee *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.UpdateParams(&_Staking.TransactOpts, _sequencersSize, _minGasLimit, _gasFee)
}

// UpdateWhitelist is a paid mutator transaction binding the contract method 0xc7cd469a.
//
// Solidity: function updateWhitelist(address[] add, address[] remove) returns()
func (_Staking *StakingTransactor) UpdateWhitelist(opts *bind.TransactOpts, add []common.Address, remove []common.Address) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "updateWhitelist", add, remove)
}

// UpdateWhitelist is a paid mutator transaction binding the contract method 0xc7cd469a.
//
// Solidity: function updateWhitelist(address[] add, address[] remove) returns()
func (_Staking *StakingSession) UpdateWhitelist(add []common.Address, remove []common.Address) (*types.Transaction, error) {
	return _Staking.Contract.UpdateWhitelist(&_Staking.TransactOpts, add, remove)
}

// UpdateWhitelist is a paid mutator transaction binding the contract method 0xc7cd469a.
//
// Solidity: function updateWhitelist(address[] add, address[] remove) returns()
func (_Staking *StakingTransactorSession) UpdateWhitelist(add []common.Address, remove []common.Address) (*types.Transaction, error) {
	return _Staking.Contract.UpdateWhitelist(&_Staking.TransactOpts, add, remove)
}

// WithdrawETH is a paid mutator transaction binding the contract method 0x9131f724.
//
// Solidity: function withdrawETH(uint32 _minGasLimit, uint256 _gasFee) payable returns()
func (_Staking *StakingTransactor) WithdrawETH(opts *bind.TransactOpts, _minGasLimit uint32, _gasFee *big.Int) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "withdrawETH", _minGasLimit, _gasFee)
}

// WithdrawETH is a paid mutator transaction binding the contract method 0x9131f724.
//
// Solidity: function withdrawETH(uint32 _minGasLimit, uint256 _gasFee) payable returns()
func (_Staking *StakingSession) WithdrawETH(_minGasLimit uint32, _gasFee *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.WithdrawETH(&_Staking.TransactOpts, _minGasLimit, _gasFee)
}

// WithdrawETH is a paid mutator transaction binding the contract method 0x9131f724.
//
// Solidity: function withdrawETH(uint32 _minGasLimit, uint256 _gasFee) payable returns()
func (_Staking *StakingTransactorSession) WithdrawETH(_minGasLimit uint32, _gasFee *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.WithdrawETH(&_Staking.TransactOpts, _minGasLimit, _gasFee)
}

// StakingClaimedIterator is returned from FilterClaimed and is used to iterate over the raw logs and unpacked data for Claimed events raised by the Staking contract.
type StakingClaimedIterator struct {
	Event *StakingClaimed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingClaimedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingClaimed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingClaimed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingClaimedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingClaimedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingClaimed represents a Claimed event raised by the Staking contract.
type StakingClaimed struct {
	Addr    common.Address
	Balance *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterClaimed is a free log retrieval operation binding the contract event 0xd8138f8a3f377c5259ca548e70e4c2de94f129f5a11036a15b69513cba2b426a.
//
// Solidity: event Claimed(address addr, uint256 balance)
func (_Staking *StakingFilterer) FilterClaimed(opts *bind.FilterOpts) (*StakingClaimedIterator, error) {

	logs, sub, err := _Staking.contract.FilterLogs(opts, "Claimed")
	if err != nil {
		return nil, err
	}
	return &StakingClaimedIterator{contract: _Staking.contract, event: "Claimed", logs: logs, sub: sub}, nil
}

// WatchClaimed is a free log subscription operation binding the contract event 0xd8138f8a3f377c5259ca548e70e4c2de94f129f5a11036a15b69513cba2b426a.
//
// Solidity: event Claimed(address addr, uint256 balance)
func (_Staking *StakingFilterer) WatchClaimed(opts *bind.WatchOpts, sink chan<- *StakingClaimed) (event.Subscription, error) {

	logs, sub, err := _Staking.contract.WatchLogs(opts, "Claimed")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingClaimed)
				if err := _Staking.contract.UnpackLog(event, "Claimed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseClaimed is a log parse operation binding the contract event 0xd8138f8a3f377c5259ca548e70e4c2de94f129f5a11036a15b69513cba2b426a.
//
// Solidity: event Claimed(address addr, uint256 balance)
func (_Staking *StakingFilterer) ParseClaimed(log types.Log) (*StakingClaimed, error) {
	event := new(StakingClaimed)
	if err := _Staking.contract.UnpackLog(event, "Claimed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the Staking contract.
type StakingInitializedIterator struct {
	Event *StakingInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingInitialized represents a Initialized event raised by the Staking contract.
type StakingInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Staking *StakingFilterer) FilterInitialized(opts *bind.FilterOpts) (*StakingInitializedIterator, error) {

	logs, sub, err := _Staking.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &StakingInitializedIterator{contract: _Staking.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Staking *StakingFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *StakingInitialized) (event.Subscription, error) {

	logs, sub, err := _Staking.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingInitialized)
				if err := _Staking.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Staking *StakingFilterer) ParseInitialized(log types.Log) (*StakingInitialized, error) {
	event := new(StakingInitialized)
	if err := _Staking.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Staking contract.
type StakingOwnershipTransferredIterator struct {
	Event *StakingOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingOwnershipTransferred represents a OwnershipTransferred event raised by the Staking contract.
type StakingOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Staking *StakingFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*StakingOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Staking.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &StakingOwnershipTransferredIterator{contract: _Staking.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Staking *StakingFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *StakingOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Staking.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingOwnershipTransferred)
				if err := _Staking.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Staking *StakingFilterer) ParseOwnershipTransferred(log types.Log) (*StakingOwnershipTransferred, error) {
	event := new(StakingOwnershipTransferred)
	if err := _Staking.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingRegisteredIterator is returned from FilterRegistered and is used to iterate over the raw logs and unpacked data for Registered events raised by the Staking contract.
type StakingRegisteredIterator struct {
	Event *StakingRegistered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingRegisteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingRegistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingRegistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingRegisteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingRegisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingRegistered represents a Registered event raised by the Staking contract.
type StakingRegistered struct {
	Addr    common.Address
	TmKey   [32]byte
	BlsKey  []byte
	Balance *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRegistered is a free log retrieval operation binding the contract event 0xb7f230b53b0f914ccf820ab0618ac8320e984eeb0fb6a740785cf7fdc3b5cee3.
//
// Solidity: event Registered(address addr, bytes32 tmKey, bytes blsKey, uint256 balance)
func (_Staking *StakingFilterer) FilterRegistered(opts *bind.FilterOpts) (*StakingRegisteredIterator, error) {

	logs, sub, err := _Staking.contract.FilterLogs(opts, "Registered")
	if err != nil {
		return nil, err
	}
	return &StakingRegisteredIterator{contract: _Staking.contract, event: "Registered", logs: logs, sub: sub}, nil
}

// WatchRegistered is a free log subscription operation binding the contract event 0xb7f230b53b0f914ccf820ab0618ac8320e984eeb0fb6a740785cf7fdc3b5cee3.
//
// Solidity: event Registered(address addr, bytes32 tmKey, bytes blsKey, uint256 balance)
func (_Staking *StakingFilterer) WatchRegistered(opts *bind.WatchOpts, sink chan<- *StakingRegistered) (event.Subscription, error) {

	logs, sub, err := _Staking.contract.WatchLogs(opts, "Registered")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingRegistered)
				if err := _Staking.contract.UnpackLog(event, "Registered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRegistered is a log parse operation binding the contract event 0xb7f230b53b0f914ccf820ab0618ac8320e984eeb0fb6a740785cf7fdc3b5cee3.
//
// Solidity: event Registered(address addr, bytes32 tmKey, bytes blsKey, uint256 balance)
func (_Staking *StakingFilterer) ParseRegistered(log types.Log) (*StakingRegistered, error) {
	event := new(StakingRegistered)
	if err := _Staking.contract.UnpackLog(event, "Registered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingSequencerUpdatedIterator is returned from FilterSequencerUpdated and is used to iterate over the raw logs and unpacked data for SequencerUpdated events raised by the Staking contract.
type StakingSequencerUpdatedIterator struct {
	Event *StakingSequencerUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingSequencerUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingSequencerUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingSequencerUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingSequencerUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingSequencerUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingSequencerUpdated represents a SequencerUpdated event raised by the Staking contract.
type StakingSequencerUpdated struct {
	SequencersAddr []common.Address
	SequencersBLS  [][]byte
	Version        *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterSequencerUpdated is a free log retrieval operation binding the contract event 0x3426004122e24543c0ea4a940ddb1b8f7de59b484229ef718fa87e1eeaf62fd2.
//
// Solidity: event SequencerUpdated(address[] sequencersAddr, bytes[] sequencersBLS, uint256 version)
func (_Staking *StakingFilterer) FilterSequencerUpdated(opts *bind.FilterOpts) (*StakingSequencerUpdatedIterator, error) {

	logs, sub, err := _Staking.contract.FilterLogs(opts, "SequencerUpdated")
	if err != nil {
		return nil, err
	}
	return &StakingSequencerUpdatedIterator{contract: _Staking.contract, event: "SequencerUpdated", logs: logs, sub: sub}, nil
}

// WatchSequencerUpdated is a free log subscription operation binding the contract event 0x3426004122e24543c0ea4a940ddb1b8f7de59b484229ef718fa87e1eeaf62fd2.
//
// Solidity: event SequencerUpdated(address[] sequencersAddr, bytes[] sequencersBLS, uint256 version)
func (_Staking *StakingFilterer) WatchSequencerUpdated(opts *bind.WatchOpts, sink chan<- *StakingSequencerUpdated) (event.Subscription, error) {

	logs, sub, err := _Staking.contract.WatchLogs(opts, "SequencerUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingSequencerUpdated)
				if err := _Staking.contract.UnpackLog(event, "SequencerUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSequencerUpdated is a log parse operation binding the contract event 0x3426004122e24543c0ea4a940ddb1b8f7de59b484229ef718fa87e1eeaf62fd2.
//
// Solidity: event SequencerUpdated(address[] sequencersAddr, bytes[] sequencersBLS, uint256 version)
func (_Staking *StakingFilterer) ParseSequencerUpdated(log types.Log) (*StakingSequencerUpdated, error) {
	event := new(StakingSequencerUpdated)
	if err := _Staking.contract.UnpackLog(event, "SequencerUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingStakedIterator is returned from FilterStaked and is used to iterate over the raw logs and unpacked data for Staked events raised by the Staking contract.
type StakingStakedIterator struct {
	Event *StakingStaked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingStakedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingStaked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingStaked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingStakedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingStakedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingStaked represents a Staked event raised by the Staking contract.
type StakingStaked struct {
	Addr    common.Address
	Balance *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterStaked is a free log retrieval operation binding the contract event 0x9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d.
//
// Solidity: event Staked(address addr, uint256 balance)
func (_Staking *StakingFilterer) FilterStaked(opts *bind.FilterOpts) (*StakingStakedIterator, error) {

	logs, sub, err := _Staking.contract.FilterLogs(opts, "Staked")
	if err != nil {
		return nil, err
	}
	return &StakingStakedIterator{contract: _Staking.contract, event: "Staked", logs: logs, sub: sub}, nil
}

// WatchStaked is a free log subscription operation binding the contract event 0x9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d.
//
// Solidity: event Staked(address addr, uint256 balance)
func (_Staking *StakingFilterer) WatchStaked(opts *bind.WatchOpts, sink chan<- *StakingStaked) (event.Subscription, error) {

	logs, sub, err := _Staking.contract.WatchLogs(opts, "Staked")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingStaked)
				if err := _Staking.contract.UnpackLog(event, "Staked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStaked is a log parse operation binding the contract event 0x9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d.
//
// Solidity: event Staked(address addr, uint256 balance)
func (_Staking *StakingFilterer) ParseStaked(log types.Log) (*StakingStaked, error) {
	event := new(StakingStaked)
	if err := _Staking.contract.UnpackLog(event, "Staked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingWithdrawedIterator is returned from FilterWithdrawed and is used to iterate over the raw logs and unpacked data for Withdrawed events raised by the Staking contract.
type StakingWithdrawedIterator struct {
	Event *StakingWithdrawed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingWithdrawedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingWithdrawed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingWithdrawed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingWithdrawedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingWithdrawedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingWithdrawed represents a Withdrawed event raised by the Staking contract.
type StakingWithdrawed struct {
	Addr    common.Address
	Balance *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterWithdrawed is a free log retrieval operation binding the contract event 0x6cca423c6ffc06e62a0acc433965e074b11c28479b0449250ce3ff65ac9e39fe.
//
// Solidity: event Withdrawed(address addr, uint256 balance)
func (_Staking *StakingFilterer) FilterWithdrawed(opts *bind.FilterOpts) (*StakingWithdrawedIterator, error) {

	logs, sub, err := _Staking.contract.FilterLogs(opts, "Withdrawed")
	if err != nil {
		return nil, err
	}
	return &StakingWithdrawedIterator{contract: _Staking.contract, event: "Withdrawed", logs: logs, sub: sub}, nil
}

// WatchWithdrawed is a free log subscription operation binding the contract event 0x6cca423c6ffc06e62a0acc433965e074b11c28479b0449250ce3ff65ac9e39fe.
//
// Solidity: event Withdrawed(address addr, uint256 balance)
func (_Staking *StakingFilterer) WatchWithdrawed(opts *bind.WatchOpts, sink chan<- *StakingWithdrawed) (event.Subscription, error) {

	logs, sub, err := _Staking.contract.WatchLogs(opts, "Withdrawed")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingWithdrawed)
				if err := _Staking.contract.UnpackLog(event, "Withdrawed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdrawed is a log parse operation binding the contract event 0x6cca423c6ffc06e62a0acc433965e074b11c28479b0449250ce3ff65ac9e39fe.
//
// Solidity: event Withdrawed(address addr, uint256 balance)
func (_Staking *StakingFilterer) ParseWithdrawed(log types.Log) (*StakingWithdrawed, error) {
	event := new(StakingWithdrawed)
	if err := _Staking.contract.UnpackLog(event, "Withdrawed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
