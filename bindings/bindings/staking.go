// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package bindings

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/scroll-tech/go-ethereum"
	"github.com/scroll-tech/go-ethereum/accounts/abi"
	"github.com/scroll-tech/go-ethereum/accounts/abi/bind"
	"github.com/scroll-tech/go-ethereum/common"
	"github.com/scroll-tech/go-ethereum/core/types"
	"github.com/scroll-tech/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// StakingMetaData contains all meta data concerning the Staking contract.
var StakingMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"EnableSlash\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_sequencersSize\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_lock\",\"type\":\"uint256\"}],\"name\":\"ParamsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"tmKey\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"blsKey\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"Registered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"add\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"remove\",\"type\":\"address[]\"}],\"name\":\"WhitelistUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"claimETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableSlash\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSequencersAddr\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sequencerContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rollupContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_sequencersSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lock\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"tmKey\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"blsKey\",\"type\":\"bytes\"},{\"internalType\":\"uint32\",\"name\":\"_minGasLimit\",\"type\":\"uint32\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollupContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sequencerContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sequencersAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sequencersBLS\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sequencersSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"sequencers\",\"type\":\"address[]\"},{\"internalType\":\"uint32\",\"name\":\"_minGasLimit\",\"type\":\"uint32\"}],\"name\":\"slash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_minGasLimit\",\"type\":\"uint32\"}],\"name\":\"stakeETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakersNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakings\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"tmKey\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"blsKey\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"toggleSlash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpauseSequencer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sequencersSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lock\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_minGasLimit\",\"type\":\"uint32\"}],\"name\":\"updateParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"add\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"remove\",\"type\":\"address[]\"}],\"name\":\"updateWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_minGasLimit\",\"type\":\"uint32\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlock\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"exit\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x6080604052606d805460ff191690555f606e5534801561001d575f80fd5b506133148061002b5f395ff3fe6080604052600436106101ba575f3560e01c8063a7044836116100f2578063d702d8aa11610092578063f60f539011610062578063f60f539014610501578063f83d08ba14610515578063fc15799d1461052a578063fd5e6dd11461053d575f80fd5b8063d702d8aa1461048c578063dc6e13e11461049f578063ed2fb2e1146104ce578063f2fde38b146104e2575f80fd5b8063c7cd469a116100cd578063c7cd469a1461041b578063cbd679cb1461043a578063d339b9881461044e578063d3710ec51461046d575f80fd5b8063a7044836146103c8578063b2145280146103e7578063bfa02ba9146103fc575f80fd5b8063760b3d3a1161015d5780638da5cb5b116101385780638da5cb5b146103335780639b19251a14610364578063a16e067414610392578063a4d66daf146103a5575f80fd5b8063760b3d3a146102a15780637a3ba4ad146102c05780637a9262a2146102d9575f80fd5b806359e93d1e1161019857806359e93d1e14610239578063672729991461025a578063715018a61461026e578063728cdbca14610282575f80fd5b8063158ef93e146101be578063399b8b39146101ec57806343352d6114610218575b5f80fd5b3480156101c9575f80fd5b50606d546101d79060ff1681565b60405190151581526020015b60405180910390f35b3480156101f7575f80fd5b5061020b61020636600461289c565b61055c565b6040516101e391906128f6565b348015610223575f80fd5b5061022c610602565b6040516101e3919061290f565b348015610244575f80fd5b5061025861025336600461295b565b610662565b005b348015610265575f80fd5b506102586106b7565b348015610279575f80fd5b506102586107bb565b34801561028d575f80fd5b5061025861029c366004612995565b6107ce565b3480156102ac575f80fd5b506102586102bb366004612a03565b610b5d565b3480156102cb575f80fd5b506071546101d79060ff1681565b3480156102e4575f80fd5b506103166102f3366004612a3f565b606c6020525f908152604090208054600182015460029092015490919060ff1683565b6040805193845260208401929092521515908201526060016101e3565b34801561033e575f80fd5b506033546001600160a01b03165b6040516001600160a01b0390911681526020016101e3565b34801561036f575f80fd5b506101d761037e366004612a3f565b60696020525f908152604090205460ff1681565b6102586103a0366004612a58565b610c59565b3480156103b0575f80fd5b506103ba60675481565b6040519081526020016101e3565b3480156103d3575f80fd5b5060655461034c906001600160a01b031681565b3480156103f2575f80fd5b506103ba606e5481565b348015610407575f80fd5b5060665461034c906001600160a01b031681565b348015610426575f80fd5b50610258610435366004612ab9565b610f28565b348015610445575f80fd5b50606a546103ba565b348015610459575f80fd5b506103ba610468366004612b7e565b611030565b348015610478575f80fd5b5061034c61048736600461289c565b6113c4565b61025861049a366004612a58565b6113ec565b3480156104aa575f80fd5b506104be6104b9366004612a3f565b6117dc565b6040516101e39493929190612c38565b3480156104d9575f80fd5b50610258611894565b3480156104ed575f80fd5b506102586104fc366004612a3f565b6118fa565b34801561050c575f80fd5b5061022c611987565b348015610520575f80fd5b506103ba60685481565b610258610538366004612c70565b6119e5565b348015610548575f80fd5b5061034c61055736600461289c565b612152565b6070818154811061056b575f80fd5b905f5260205f20015f91509050805461058390612d18565b80601f01602080910402602001604051908101604052809291908181526020018280546105af90612d18565b80156105fa5780601f106105d1576101008083540402835291602001916105fa565b820191905f5260205f20905b8154815290600101906020018083116105dd57829003601f168201915b505050505081565b6060606a80548060200260200160405190810160405280929190818152602001828054801561065857602002820191905f5260205f20905b81546001600160a01b0316815260019091019060200180831161063a575b5050505050905090565b61066a612161565b6071805460ff191682151590811790915560405160ff909116151581527ffa7e1498ad96b6cd4d37fadb6f9acacfe7132535ad7f9758ea408b1105226ba59060200160405180910390a150565b335f908152606c602052604090206002015460ff1680156106e55750335f908152606c602052604090205415155b80156107015750335f908152606c602052604090206001015443115b6107525760405162461bcd60e51b815260206004820152601260248201527f696e76616c6964207769746864726177616c000000000000000000000000000060448201526064015b60405180910390fd5b335f818152606c6020526040812080548282556001820192909255600201805460ff191690559061078390826121bb565b60405181815233907fd8138f8a3f377c5259ca548e70e4c2de94f129f5a11036a15b69513cba2b426a9060200160405180910390a250565b6107c3612161565b6107cc5f612265565b565b5f54610100900460ff16158080156107ec57505f54600160ff909116105b806108055750303b15801561080557505f5460ff166001145b6108775760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610749565b5f805460ff1916600117905580156108b5575f80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b6001600160a01b03851661090b5760405162461bcd60e51b815260206004820152601760248201527f696e76616c696420726f6c6c757020636f6e74726163740000000000000000006044820152606401610749565b6001600160a01b0386166109615760405162461bcd60e51b815260206004820152601a60248201527f696e76616c69642073657175656e63657220636f6e74726163740000000000006044820152606401610749565b5f84116109d65760405162461bcd60e51b815260206004820152602260248201527f73657175656e6365727353697a65206d7573742067726561746572207468616e60448201527f20300000000000000000000000000000000000000000000000000000000000006064820152608401610749565b5f8311610a4b5760405162461bcd60e51b815260206004820152602160248201527f7374616b696e67206c696d6974206d7573742067726561746572207468616e2060448201527f30000000000000000000000000000000000000000000000000000000000000006064820152608401610749565b606580546001600160a01b038089167fffffffffffffffffffffffff0000000000000000000000000000000000000000928316179092556066805492881692909116919091179055606e84905560678390556068829055610aab87612265565b606e5460675460685460408051938452602084019290925282820152517f0cba168cfa7900657e5f8cc53d6f52ebbfa3a9f568941b465cc4f731c60c95b29181900360600190a18015610b54575f80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050505050565b610b65612161565b606e548414158015610b795750606a548410155b8015610b8457505f84115b610bd05760405162461bcd60e51b815260206004820152601b60248201527f696e76616c6964206e65772073657175656e636572732073697a6500000000006044820152606401610749565b8215610bdc5760678390555b8115610be85760688290555b606a54606e541015610c0757606e849055610c02816122ce565b610c53565b606e8490556067546068546040805187815260208101939093528201527f0cba168cfa7900657e5f8cc53d6f52ebbfa3a9f568941b465cc4f731c60c95b2906060015b60405180910390a15b50505050565b335f908152606c602052604090206002015460ff1615610cbb5760405162461bcd60e51b815260206004820152601060248201527f7374616b657220697320657869746564000000000000000000000000000000006044820152606401610749565b5f610cc533612761565b60408051606081018252335f908152606b60209081529290206003015481526068549293509190820190610cf99043612d96565b815260016020918201819052335f818152606c845260409081902085518082558686015194820194909455948101516002909501805460ff19169515159590951790945592519081527f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5910160405180910390a2805b606a54610d7e90600190612da9565b811015610e1557606a610d92826001612d96565b81548110610da257610da2612dbc565b5f91825260209091200154606a80546001600160a01b039092169183908110610dcd57610dcd612dbc565b5f91825260209091200180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055600101610d6f565b50606a805480610e2757610e27612de9565b5f828152602080822083015f1990810180547fffffffffffffffffffffffff00000000000000000000000000000000000000009081169091559301909355338152606b90925260408220805490911681556001810182905590610e8d60028301826127fb565b505f600391909101819055606a549003610f1057610eaa826122ce565b60655f9054906101000a90046001600160a01b03166001600160a01b0316638456cb596040518163ffffffff1660e01b81526004015f604051808303815f87803b158015610ef6575f80fd5b505af1158015610f08573d5f803e3d5ffd5b505050505050565b606e54811015610f2357610f23826122ce565b505b50565b610f30612161565b5f5b83811015610f9557600160695f878785818110610f5157610f51612dbc565b9050602002016020810190610f669190612a3f565b6001600160a01b0316815260208101919091526040015f20805460ff1916911515919091179055600101610f32565b505f5b81811015610ffa575f60695f858585818110610fb657610fb6612dbc565b9050602002016020810190610fcb9190612a3f565b6001600160a01b0316815260208101919091526040015f20805460ff1916911515919091179055600101610f98565b507fe375867e538b40218c1b3db2ccceaf875eb073e38b510449e6088c1539ac862284848484604051610c4a9493929190612e5b565b6066545f906001600160a01b0316331461108c5760405162461bcd60e51b815260206004820152601460248201527f6f6e6c7920726f6c6c757020636f6e74726163740000000000000000000000006044820152606401610749565b60715460ff1661109d57505f6113be565b5f805f5b8551811015611328575f8682815181106110bd576110bd612dbc565b60200260200101519050606c5f8884815181106110dc576110dc612dbc565b6020908102919091018101516001600160a01b031682528101919091526040015f206002015460ff16156111aa57606c5f88848151811061111f5761111f612dbc565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020015f205f0154846111549190612d96565b9350606c5f88848151811061116b5761116b612dbc565b6020908102919091018101516001600160a01b031682528101919091526040015f9081208181556001810191909155600201805460ff1916905561131f565b6001600160a01b0381165f908152606b60205260409020600301546111cf9085612d96565b93505f6111db82612761565b9050606e5481116111eb57600193505b805b606a546111fc90600190612da9565b81101561129357606a611210826001612d96565b8154811061122057611220612dbc565b5f91825260209091200154606a80546001600160a01b03909216918390811061124b5761124b612dbc565b5f91825260209091200180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03929092169190911790556001016111ed565b50606a8054806112a5576112a5612de9565b5f828152602080822083015f1990810180547fffffffffffffffffffffffff000000000000000000000000000000000000000090811690915593019093556001600160a01b0385168152606b9092526040822080549091168155600181018290559061131460028301826127fb565b600382015f90555050505b506001016110a1565b5080156113a457611338846122ce565b606a545f036113a45760655f9054906101000a90046001600160a01b03166001600160a01b0316638456cb596040518163ffffffff1660e01b81526004015f604051808303815f87803b15801561138d575f80fd5b505af115801561139f573d5f803e3d5ffd5b505050505b6066546113ba906001600160a01b0316836121bb565b5090505b92915050565b606f81815481106113d3575f80fd5b5f918252602090912001546001600160a01b0316905081565b335f9081526069602052604090205460ff1661144a5760405162461bcd60e51b815260206004820152601060248201527f6e6f7420696e2077686974656c697374000000000000000000000000000000006044820152606401610749565b5f805b606a5481101561149e57336001600160a01b0316606a828154811061147457611474612dbc565b5f918252602090912001546001600160a01b031603611496576001915061149e565b60010161144d565b50806114ec5760405162461bcd60e51b815260206004820152601060248201527f7374616b6572206e6f74206578697374000000000000000000000000000000006044820152606401610749565b5f6067541180156114fc57505f34115b80156115255750606754335f908152606b6020526040902060030154611523903490612d96565b115b6115715760405162461bcd60e51b815260206004820152601860248201527f7374616b696e672076616c7565206e6f7420656e6f75676800000000000000006044820152606401610749565b335f908152606b602052604081206003018054349290611592908490612d96565b9091555050335f818152606b60209081526040918290206003015491519182527f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d910160405180910390a25f6115e733612761565b606a549091505f906115fb90600190612da9565b90505b801561179f57606b5f606a611614600185612da9565b8154811061162457611624612dbc565b905f5260205f20015f9054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020019081526020015f2060030154606b5f606a848154811061167857611678612dbc565b5f9182526020808320909101546001600160a01b03168352820192909252604001902060030154111561178d575f606a6116b3600184612da9565b815481106116c3576116c3612dbc565b5f91825260209091200154606a80546001600160a01b03909216925090839081106116f0576116f0612dbc565b5f918252602090912001546001600160a01b0316606a611711600185612da9565b8154811061172157611721612dbc565b905f5260205f20015f6101000a8154816001600160a01b0302191690836001600160a01b0316021790555080606a838154811061176057611760612dbc565b905f5260205f20015f6101000a8154816001600160a01b0302191690836001600160a01b03160217905550505b8061179781612e8c565b9150506115fe565b505f6117aa33612761565b606d5490915060ff1680156117c15750606e548210155b80156117ce5750606e5481105b15610c5357610c53846122ce565b606b6020525f90815260409020805460018201546002830180546001600160a01b0390931693919261180d90612d18565b80601f016020809104026020016040519081016040528092919081815260200182805461183990612d18565b80156118845780601f1061185b57610100808354040283529160200191611884565b820191905f5260205f20905b81548152906001019060200180831161186757829003601f168201915b5050505050908060030154905084565b61189c612161565b60655f9054906101000a90046001600160a01b03166001600160a01b0316633f4ba83a6040518163ffffffff1660e01b81526004015f604051808303815f87803b1580156118e8575f80fd5b505af1158015610c53573d5f803e3d5ffd5b611902612161565b6001600160a01b03811661197e5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610749565b610f2581612265565b6060606f80548060200260200160405190810160405280929190818152602001828054801561065857602002820191905f5260205f209081546001600160a01b0316815260019091019060200180831161063a575050505050905090565b335f9081526069602052604090205460ff16611a435760405162461bcd60e51b815260206004820152601060248201527f6e6f7420696e2077686974656c697374000000000000000000000000000000006044820152606401610749565b5f805b606a54811015611a9757336001600160a01b0316606a8281548110611a6d57611a6d612dbc565b5f918252602090912001546001600160a01b031603611a8f5760019150611a97565b600101611a46565b508015611ae65760405162461bcd60e51b815260206004820152601260248201527f616c7265616479207265676973746572656400000000000000000000000000006044820152606401610749565b335f908152606c602052604090206002015460ff1615611b485760405162461bcd60e51b815260206004820152601060248201527f7374616b657220697320657869746564000000000000000000000000000000006044820152606401610749565b5f606e5411611bbf5760405162461bcd60e51b815260206004820152602260248201527f73657175656e6365727353697a65206d7573742067726561746572207468616e60448201527f20300000000000000000000000000000000000000000000000000000000000006064820152608401610749565b5f849003611c0f5760405162461bcd60e51b815260206004820152601960248201527f696e76616c69642074656e6465726d696e74207075624b6579000000000000006044820152606401610749565b825161010014611c615760405162461bcd60e51b815260206004820152601260248201527f696e76616c696420626c73207075624b657900000000000000000000000000006044820152606401610749565b5f606754118015611c7457506067543410155b611cc05760405162461bcd60e51b815260206004820152601b60248201527f7374616b696e672076616c7565206973206e6f7420656e6f75676800000000006044820152606401610749565b345f5b606a54811015611e085785606b5f606a8481548110611ce457611ce4612dbc565b5f9182526020808320909101546001600160a01b0316835282019290925260400190206001015403611d585760405162461bcd60e51b815260206004820152601860248201527f746d4b657920616c7265616479207265676973746572656400000000000000006044820152606401610749565b8480519060200120606b5f606a8481548110611d7657611d76612dbc565b5f9182526020808320909101546001600160a01b0316835282019290925260409081019091209051611dab9160020190612ea1565b604051809103902003611e005760405162461bcd60e51b815260206004820152601960248201527f626c734b657920616c72656164792072656769737465726564000000000000006044820152606401610749565b600101611cc3565b5060408051608081018252338082526020808301898152838501898152606085018790525f938452606b90925293909120825181547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0390911617815592516001840155519091906002820190611e879082612f5e565b5060609190910151600390910155606a80546001810182555f919091527f116fea137db6e131133e7f2bab296045d8f41cc5607279db17b218cab0929a510180547fffffffffffffffffffffffff000000000000000000000000000000000000000016339081179091556040517fb7f230b53b0f914ccf820ab0618ac8320e984eeb0fb6a740785cf7fdc3b5cee391611f2591889088908690612c38565b60405180910390a1606a545f90611f3e90600190612da9565b90505b80156120eb57606b5f606a611f57600185612da9565b81548110611f6757611f67612dbc565b905f5260205f20015f9054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020019081526020015f2060030154606b5f606a8481548110611fbb57611fbb612dbc565b5f9182526020808320909101546001600160a01b0316835282019290925260400190206003015411156120d4575f606a611ff6600184612da9565b8154811061200657612006612dbc565b5f91825260209091200154606a80546001600160a01b039092169250908390811061203357612033612dbc565b5f918252602090912001546001600160a01b0316606a612054600185612da9565b8154811061206457612064612dbc565b905f5260205f20015f6101000a8154816001600160a01b0302191690836001600160a01b0316021790555080606a83815481106120a3576120a3612dbc565b905f5260205f20015f6101000a8154816001600160a01b0302191690836001600160a01b03160217905550506120d9565b6120eb565b806120e381612e8c565b915050611f41565b606d5460ff161580156121015750606e54606a54145b1561212357606d805460ff1916600117905561211c846122ce565b5050610c53565b606d5460ff1680156121445750606e54606a541115806121445750606e5481105b15610f0857610f08846122ce565b606a81815481106113d3575f80fd5b6033546001600160a01b031633146107cc5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610749565b8015610f23575f826001600160a01b0316826040515f6040518083038185875af1925050503d805f811461220a576040519150601f19603f3d011682016040523d82523d5f602084013e61220f565b606091505b50509050806122605760405162461bcd60e51b815260206004820152601b60248201527f526f6c6c75703a20455448207472616e73666572206661696c656400000000006044820152606401610749565b505050565b603380546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35050565b6122d9606f5f612832565b6122e460705f61284d565b606e54606a548111156122f65750606a545b5f8167ffffffffffffffff81111561231057612310612b20565b60405190808252806020026020018201604052801561235c57816020015b60408051606080820183525f80835260208301529181019190915281526020019060019003908161232e5790505b5090505f5b828110156125e357606f606b5f606a848154811061238157612381612dbc565b5f9182526020808320909101546001600160a01b039081168452838201949094526040909201812054845460018101865594825291812090930180547fffffffffffffffffffffffff00000000000000000000000000000000000000001691909216179055606a8054607092606b9290918590811061240257612402612dbc565b5f9182526020808320909101546001600160a01b031683528281019390935260409091018120835460018101855593825291902090910190612447906002018261301a565b506040518060600160405280606b5f606a858154811061246957612469612dbc565b5f9182526020808320909101546001600160a01b0390811684528382019490945260409092018120549092168352606a80549390910192606b929190869081106124b5576124b5612dbc565b905f5260205f20015f9054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020019081526020015f20600101548152602001606b5f606a858154811061250e5761250e612dbc565b5f9182526020808320909101546001600160a01b031683528201929092526040019020600201805461253f90612d18565b80601f016020809104026020016040519081016040528092919081815260200182805461256b90612d18565b80156125b65780601f1061258d576101008083540402835291602001916125b6565b820191905f5260205f20905b81548152906001019060200180831161259957829003601f168201915b50505050508152508282815181106125d0576125d0612dbc565b6020908102919091010152600101612361565b50606554604080517f73452a9200000000000000000000000000000000000000000000000000000000815290515f926001600160a01b0316916373452a929160048083019260209291908290030181865afa158015612644573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061266891906130e5565b612673906001612d96565b826040516024016126859291906130fc565b60408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fad01732f0000000000000000000000000000000000000000000000000000000017905260655490517fb20d8e680000000000000000000000000000000000000000000000000000000081529192506001600160a01b03169063b20d8e689061272e908490606f906070908a906004016131a9565b5f604051808303815f87803b158015612745575f80fd5b505af1158015612757573d5f803e3d5ffd5b5050505050505050565b5f805b606a548110156127b257826001600160a01b0316606a828154811061278b5761278b612dbc565b5f918252602090912001546001600160a01b0316036127aa5792915050565b600101612764565b5060405162461bcd60e51b815260206004820152601060248201527f7374616b6572206e6f74206578697374000000000000000000000000000000006044820152606401610749565b50805461280790612d18565b5f825580601f10612816575050565b601f0160209004905f5260205f2090810190610f259190612868565b5080545f8255905f5260205f2090810190610f259190612868565b5080545f8255905f5260205f2090810190610f259190612880565b5b8082111561287c575f8155600101612869565b5090565b8082111561287c575f61289382826127fb565b50600101612880565b5f602082840312156128ac575f80fd5b5035919050565b5f81518084525f5b818110156128d7576020818501810151868301820152016128bb565b505f602082860101526020601f19601f83011685010191505092915050565b602081525f61290860208301846128b3565b9392505050565b602080825282518282018190525f9190848201906040850190845b8181101561294f5783516001600160a01b03168352928401929184019160010161292a565b50909695505050505050565b5f6020828403121561296b575f80fd5b81358015158114612908575f80fd5b80356001600160a01b0381168114612990575f80fd5b919050565b5f805f805f8060c087890312156129aa575f80fd5b6129b38761297a565b95506129c16020880161297a565b94506129cf6040880161297a565b9350606087013592506080870135915060a087013590509295509295509295565b803563ffffffff81168114612990575f80fd5b5f805f8060808587031215612a16575f80fd5b843593506020850135925060408501359150612a34606086016129f0565b905092959194509250565b5f60208284031215612a4f575f80fd5b6129088261297a565b5f60208284031215612a68575f80fd5b612908826129f0565b5f8083601f840112612a81575f80fd5b50813567ffffffffffffffff811115612a98575f80fd5b6020830191508360208260051b8501011115612ab2575f80fd5b9250929050565b5f805f8060408587031215612acc575f80fd5b843567ffffffffffffffff80821115612ae3575f80fd5b612aef88838901612a71565b90965094506020870135915080821115612b07575f80fd5b50612b1487828801612a71565b95989497509550505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b604051601f8201601f1916810167ffffffffffffffff81118282101715612b7657612b76612b20565b604052919050565b5f8060408385031215612b8f575f80fd5b823567ffffffffffffffff80821115612ba6575f80fd5b818501915085601f830112612bb9575f80fd5b8135602082821115612bcd57612bcd612b20565b8160051b9250612bde818401612b4d565b8281529284018101928181019089851115612bf7575f80fd5b948201945b84861015612c1c57612c0d8661297a565b82529482019490820190612bfc565b9650612c2b90508782016129f0565b9450505050509250929050565b6001600160a01b0385168152836020820152608060408201525f612c5f60808301856128b3565b905082606083015295945050505050565b5f805f60608486031215612c82575f80fd5b8335925060208085013567ffffffffffffffff80821115612ca1575f80fd5b818701915087601f830112612cb4575f80fd5b813581811115612cc657612cc6612b20565b612cd884601f19601f84011601612b4d565b91508082528884828501011115612ced575f80fd5b80848401858401375f84828401015250809450505050612d0f604085016129f0565b90509250925092565b600181811c90821680612d2c57607f821691505b602082108103612d63577f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b50919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b808201808211156113be576113be612d69565b818103818111156113be576113be612d69565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603160045260245ffd5b8183525f60208085019450825f5b85811015612e50576001600160a01b03612e3d8361297a565b1687529582019590820190600101612e24565b509495945050505050565b604081525f612e6e604083018688612e16565b8281036020840152612e81818587612e16565b979650505050505050565b5f81612e9a57612e9a612d69565b505f190190565b5f808354612eae81612d18565b60018281168015612ec65760018114612edb57612f07565b60ff1984168752821515830287019450612f07565b875f526020805f205f5b85811015612efe5781548a820152908401908201612ee5565b50505082870194505b50929695505050505050565b601f82111561226057805f5260205f20601f840160051c81016020851015612f385750805b601f840160051c820191505b81811015612f57575f8155600101612f44565b5050505050565b815167ffffffffffffffff811115612f7857612f78612b20565b612f8c81612f868454612d18565b84612f13565b602080601f831160018114612fbf575f8415612fa85750858301515b5f19600386901b1c1916600185901b178555610f08565b5f85815260208120601f198616915b82811015612fed57888601518255948401946001909101908401612fce565b508582101561300a57878501515f19600388901b60f8161c191681555b5050505050600190811b01905550565b818103613025575050565b61302f8254612d18565b67ffffffffffffffff81111561304757613047612b20565b61305581612f868454612d18565b5f601f821160018114613086575f831561306f5750848201545b5f19600385901b1c1916600184901b178455612f57565b5f8581526020808220868352908220601f198616925b838110156130bc578286015482556001958601959091019060200161309c565b508583101561300a579301545f1960f8600387901b161c19169092555050600190811b01905550565b5f602082840312156130f5575f80fd5b5051919050565b5f604080830185845260206040818601528186518084526060935060608701915060608160051b8801018389015f5b83811015613199578983037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa0018552815180516001600160a01b031684528681015187850152880151888401889052613186888501826128b3565b958701959350509085019060010161312b565b50909a9950505050505050505050565b608081525f6131bb60808301876128b3565b6020838203818501528187548084528284019150885f52825f2093505f5b818110156131fe5784546001600160a01b0316835260019485019492840192016131d9565b50508481036040860152809250865480825282820193506005838260051b840101895f52845f205f5b848110156132ba57601f198684030188525f825461324481612d18565b8086526001828116801561325f5760018114613278576132a3565b60ff1984168c8901528b8315158a1b89010194506132a3565b865f528b5f205f5b8481101561329b5781548a82018f0152908301908d01613280565b89018d019550505b509a8a019a92955050509190910190600101613227565b505063ffffffff8916606089015295506132d5945050505050565b9594505050505056fea2646970667358221220508268d2e1115024f133366f3615995c01173aa4ee5ed8937ae7007cae46130064736f6c63430008180033",
}

// StakingABI is the input ABI used to generate the binding from.
// Deprecated: Use StakingMetaData.ABI instead.
var StakingABI = StakingMetaData.ABI

// StakingBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use StakingMetaData.Bin instead.
var StakingBin = StakingMetaData.Bin

// DeployStaking deploys a new Ethereum contract, binding an instance of Staking to it.
func DeployStaking(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Staking, error) {
	parsed, err := StakingMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(StakingBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Staking{StakingCaller: StakingCaller{contract: contract}, StakingTransactor: StakingTransactor{contract: contract}, StakingFilterer: StakingFilterer{contract: contract}}, nil
}

// Staking is an auto generated Go binding around an Ethereum contract.
type Staking struct {
	StakingCaller     // Read-only binding to the contract
	StakingTransactor // Write-only binding to the contract
	StakingFilterer   // Log filterer for contract events
}

// StakingCaller is an auto generated read-only Go binding around an Ethereum contract.
type StakingCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakingTransactor is an auto generated write-only Go binding around an Ethereum contract.
type StakingTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakingFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type StakingFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakingSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type StakingSession struct {
	Contract     *Staking          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// StakingCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type StakingCallerSession struct {
	Contract *StakingCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// StakingTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type StakingTransactorSession struct {
	Contract     *StakingTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// StakingRaw is an auto generated low-level Go binding around an Ethereum contract.
type StakingRaw struct {
	Contract *Staking // Generic contract binding to access the raw methods on
}

// StakingCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type StakingCallerRaw struct {
	Contract *StakingCaller // Generic read-only contract binding to access the raw methods on
}

// StakingTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type StakingTransactorRaw struct {
	Contract *StakingTransactor // Generic write-only contract binding to access the raw methods on
}

// NewStaking creates a new instance of Staking, bound to a specific deployed contract.
func NewStaking(address common.Address, backend bind.ContractBackend) (*Staking, error) {
	contract, err := bindStaking(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Staking{StakingCaller: StakingCaller{contract: contract}, StakingTransactor: StakingTransactor{contract: contract}, StakingFilterer: StakingFilterer{contract: contract}}, nil
}

// NewStakingCaller creates a new read-only instance of Staking, bound to a specific deployed contract.
func NewStakingCaller(address common.Address, caller bind.ContractCaller) (*StakingCaller, error) {
	contract, err := bindStaking(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &StakingCaller{contract: contract}, nil
}

// NewStakingTransactor creates a new write-only instance of Staking, bound to a specific deployed contract.
func NewStakingTransactor(address common.Address, transactor bind.ContractTransactor) (*StakingTransactor, error) {
	contract, err := bindStaking(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &StakingTransactor{contract: contract}, nil
}

// NewStakingFilterer creates a new log filterer instance of Staking, bound to a specific deployed contract.
func NewStakingFilterer(address common.Address, filterer bind.ContractFilterer) (*StakingFilterer, error) {
	contract, err := bindStaking(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &StakingFilterer{contract: contract}, nil
}

// bindStaking binds a generic wrapper to an already deployed contract.
func bindStaking(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(StakingABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Staking *StakingRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Staking.Contract.StakingCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Staking *StakingRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Staking.Contract.StakingTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Staking *StakingRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Staking.Contract.StakingTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Staking *StakingCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Staking.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Staking *StakingTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Staking.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Staking *StakingTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Staking.Contract.contract.Transact(opts, method, params...)
}

// EnableSlash is a free data retrieval call binding the contract method 0x7a3ba4ad.
//
// Solidity: function enableSlash() view returns(bool)
func (_Staking *StakingCaller) EnableSlash(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "enableSlash")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// EnableSlash is a free data retrieval call binding the contract method 0x7a3ba4ad.
//
// Solidity: function enableSlash() view returns(bool)
func (_Staking *StakingSession) EnableSlash() (bool, error) {
	return _Staking.Contract.EnableSlash(&_Staking.CallOpts)
}

// EnableSlash is a free data retrieval call binding the contract method 0x7a3ba4ad.
//
// Solidity: function enableSlash() view returns(bool)
func (_Staking *StakingCallerSession) EnableSlash() (bool, error) {
	return _Staking.Contract.EnableSlash(&_Staking.CallOpts)
}

// GetSequencersAddr is a free data retrieval call binding the contract method 0xf60f5390.
//
// Solidity: function getSequencersAddr() view returns(address[])
func (_Staking *StakingCaller) GetSequencersAddr(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "getSequencersAddr")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetSequencersAddr is a free data retrieval call binding the contract method 0xf60f5390.
//
// Solidity: function getSequencersAddr() view returns(address[])
func (_Staking *StakingSession) GetSequencersAddr() ([]common.Address, error) {
	return _Staking.Contract.GetSequencersAddr(&_Staking.CallOpts)
}

// GetSequencersAddr is a free data retrieval call binding the contract method 0xf60f5390.
//
// Solidity: function getSequencersAddr() view returns(address[])
func (_Staking *StakingCallerSession) GetSequencersAddr() ([]common.Address, error) {
	return _Staking.Contract.GetSequencersAddr(&_Staking.CallOpts)
}

// GetStakers is a free data retrieval call binding the contract method 0x43352d61.
//
// Solidity: function getStakers() view returns(address[])
func (_Staking *StakingCaller) GetStakers(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "getStakers")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetStakers is a free data retrieval call binding the contract method 0x43352d61.
//
// Solidity: function getStakers() view returns(address[])
func (_Staking *StakingSession) GetStakers() ([]common.Address, error) {
	return _Staking.Contract.GetStakers(&_Staking.CallOpts)
}

// GetStakers is a free data retrieval call binding the contract method 0x43352d61.
//
// Solidity: function getStakers() view returns(address[])
func (_Staking *StakingCallerSession) GetStakers() ([]common.Address, error) {
	return _Staking.Contract.GetStakers(&_Staking.CallOpts)
}

// Initialized is a free data retrieval call binding the contract method 0x158ef93e.
//
// Solidity: function initialized() view returns(bool)
func (_Staking *StakingCaller) Initialized(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "initialized")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Initialized is a free data retrieval call binding the contract method 0x158ef93e.
//
// Solidity: function initialized() view returns(bool)
func (_Staking *StakingSession) Initialized() (bool, error) {
	return _Staking.Contract.Initialized(&_Staking.CallOpts)
}

// Initialized is a free data retrieval call binding the contract method 0x158ef93e.
//
// Solidity: function initialized() view returns(bool)
func (_Staking *StakingCallerSession) Initialized() (bool, error) {
	return _Staking.Contract.Initialized(&_Staking.CallOpts)
}

// Limit is a free data retrieval call binding the contract method 0xa4d66daf.
//
// Solidity: function limit() view returns(uint256)
func (_Staking *StakingCaller) Limit(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "limit")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Limit is a free data retrieval call binding the contract method 0xa4d66daf.
//
// Solidity: function limit() view returns(uint256)
func (_Staking *StakingSession) Limit() (*big.Int, error) {
	return _Staking.Contract.Limit(&_Staking.CallOpts)
}

// Limit is a free data retrieval call binding the contract method 0xa4d66daf.
//
// Solidity: function limit() view returns(uint256)
func (_Staking *StakingCallerSession) Limit() (*big.Int, error) {
	return _Staking.Contract.Limit(&_Staking.CallOpts)
}

// Lock is a free data retrieval call binding the contract method 0xf83d08ba.
//
// Solidity: function lock() view returns(uint256)
func (_Staking *StakingCaller) Lock(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "lock")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Lock is a free data retrieval call binding the contract method 0xf83d08ba.
//
// Solidity: function lock() view returns(uint256)
func (_Staking *StakingSession) Lock() (*big.Int, error) {
	return _Staking.Contract.Lock(&_Staking.CallOpts)
}

// Lock is a free data retrieval call binding the contract method 0xf83d08ba.
//
// Solidity: function lock() view returns(uint256)
func (_Staking *StakingCallerSession) Lock() (*big.Int, error) {
	return _Staking.Contract.Lock(&_Staking.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Staking *StakingCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Staking *StakingSession) Owner() (common.Address, error) {
	return _Staking.Contract.Owner(&_Staking.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Staking *StakingCallerSession) Owner() (common.Address, error) {
	return _Staking.Contract.Owner(&_Staking.CallOpts)
}

// RollupContract is a free data retrieval call binding the contract method 0xbfa02ba9.
//
// Solidity: function rollupContract() view returns(address)
func (_Staking *StakingCaller) RollupContract(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "rollupContract")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RollupContract is a free data retrieval call binding the contract method 0xbfa02ba9.
//
// Solidity: function rollupContract() view returns(address)
func (_Staking *StakingSession) RollupContract() (common.Address, error) {
	return _Staking.Contract.RollupContract(&_Staking.CallOpts)
}

// RollupContract is a free data retrieval call binding the contract method 0xbfa02ba9.
//
// Solidity: function rollupContract() view returns(address)
func (_Staking *StakingCallerSession) RollupContract() (common.Address, error) {
	return _Staking.Contract.RollupContract(&_Staking.CallOpts)
}

// SequencerContract is a free data retrieval call binding the contract method 0xa7044836.
//
// Solidity: function sequencerContract() view returns(address)
func (_Staking *StakingCaller) SequencerContract(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "sequencerContract")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// SequencerContract is a free data retrieval call binding the contract method 0xa7044836.
//
// Solidity: function sequencerContract() view returns(address)
func (_Staking *StakingSession) SequencerContract() (common.Address, error) {
	return _Staking.Contract.SequencerContract(&_Staking.CallOpts)
}

// SequencerContract is a free data retrieval call binding the contract method 0xa7044836.
//
// Solidity: function sequencerContract() view returns(address)
func (_Staking *StakingCallerSession) SequencerContract() (common.Address, error) {
	return _Staking.Contract.SequencerContract(&_Staking.CallOpts)
}

// SequencersAddr is a free data retrieval call binding the contract method 0xd3710ec5.
//
// Solidity: function sequencersAddr(uint256 ) view returns(address)
func (_Staking *StakingCaller) SequencersAddr(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "sequencersAddr", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// SequencersAddr is a free data retrieval call binding the contract method 0xd3710ec5.
//
// Solidity: function sequencersAddr(uint256 ) view returns(address)
func (_Staking *StakingSession) SequencersAddr(arg0 *big.Int) (common.Address, error) {
	return _Staking.Contract.SequencersAddr(&_Staking.CallOpts, arg0)
}

// SequencersAddr is a free data retrieval call binding the contract method 0xd3710ec5.
//
// Solidity: function sequencersAddr(uint256 ) view returns(address)
func (_Staking *StakingCallerSession) SequencersAddr(arg0 *big.Int) (common.Address, error) {
	return _Staking.Contract.SequencersAddr(&_Staking.CallOpts, arg0)
}

// SequencersBLS is a free data retrieval call binding the contract method 0x399b8b39.
//
// Solidity: function sequencersBLS(uint256 ) view returns(bytes)
func (_Staking *StakingCaller) SequencersBLS(opts *bind.CallOpts, arg0 *big.Int) ([]byte, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "sequencersBLS", arg0)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// SequencersBLS is a free data retrieval call binding the contract method 0x399b8b39.
//
// Solidity: function sequencersBLS(uint256 ) view returns(bytes)
func (_Staking *StakingSession) SequencersBLS(arg0 *big.Int) ([]byte, error) {
	return _Staking.Contract.SequencersBLS(&_Staking.CallOpts, arg0)
}

// SequencersBLS is a free data retrieval call binding the contract method 0x399b8b39.
//
// Solidity: function sequencersBLS(uint256 ) view returns(bytes)
func (_Staking *StakingCallerSession) SequencersBLS(arg0 *big.Int) ([]byte, error) {
	return _Staking.Contract.SequencersBLS(&_Staking.CallOpts, arg0)
}

// SequencersSize is a free data retrieval call binding the contract method 0xb2145280.
//
// Solidity: function sequencersSize() view returns(uint256)
func (_Staking *StakingCaller) SequencersSize(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "sequencersSize")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SequencersSize is a free data retrieval call binding the contract method 0xb2145280.
//
// Solidity: function sequencersSize() view returns(uint256)
func (_Staking *StakingSession) SequencersSize() (*big.Int, error) {
	return _Staking.Contract.SequencersSize(&_Staking.CallOpts)
}

// SequencersSize is a free data retrieval call binding the contract method 0xb2145280.
//
// Solidity: function sequencersSize() view returns(uint256)
func (_Staking *StakingCallerSession) SequencersSize() (*big.Int, error) {
	return _Staking.Contract.SequencersSize(&_Staking.CallOpts)
}

// Stakers is a free data retrieval call binding the contract method 0xfd5e6dd1.
//
// Solidity: function stakers(uint256 ) view returns(address)
func (_Staking *StakingCaller) Stakers(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "stakers", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Stakers is a free data retrieval call binding the contract method 0xfd5e6dd1.
//
// Solidity: function stakers(uint256 ) view returns(address)
func (_Staking *StakingSession) Stakers(arg0 *big.Int) (common.Address, error) {
	return _Staking.Contract.Stakers(&_Staking.CallOpts, arg0)
}

// Stakers is a free data retrieval call binding the contract method 0xfd5e6dd1.
//
// Solidity: function stakers(uint256 ) view returns(address)
func (_Staking *StakingCallerSession) Stakers(arg0 *big.Int) (common.Address, error) {
	return _Staking.Contract.Stakers(&_Staking.CallOpts, arg0)
}

// StakersNumber is a free data retrieval call binding the contract method 0xcbd679cb.
//
// Solidity: function stakersNumber() view returns(uint256)
func (_Staking *StakingCaller) StakersNumber(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "stakersNumber")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// StakersNumber is a free data retrieval call binding the contract method 0xcbd679cb.
//
// Solidity: function stakersNumber() view returns(uint256)
func (_Staking *StakingSession) StakersNumber() (*big.Int, error) {
	return _Staking.Contract.StakersNumber(&_Staking.CallOpts)
}

// StakersNumber is a free data retrieval call binding the contract method 0xcbd679cb.
//
// Solidity: function stakersNumber() view returns(uint256)
func (_Staking *StakingCallerSession) StakersNumber() (*big.Int, error) {
	return _Staking.Contract.StakersNumber(&_Staking.CallOpts)
}

// Stakings is a free data retrieval call binding the contract method 0xdc6e13e1.
//
// Solidity: function stakings(address ) view returns(address addr, bytes32 tmKey, bytes blsKey, uint256 balance)
func (_Staking *StakingCaller) Stakings(opts *bind.CallOpts, arg0 common.Address) (struct {
	Addr    common.Address
	TmKey   [32]byte
	BlsKey  []byte
	Balance *big.Int
}, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "stakings", arg0)

	outstruct := new(struct {
		Addr    common.Address
		TmKey   [32]byte
		BlsKey  []byte
		Balance *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Addr = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.TmKey = *abi.ConvertType(out[1], new([32]byte)).(*[32]byte)
	outstruct.BlsKey = *abi.ConvertType(out[2], new([]byte)).(*[]byte)
	outstruct.Balance = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// Stakings is a free data retrieval call binding the contract method 0xdc6e13e1.
//
// Solidity: function stakings(address ) view returns(address addr, bytes32 tmKey, bytes blsKey, uint256 balance)
func (_Staking *StakingSession) Stakings(arg0 common.Address) (struct {
	Addr    common.Address
	TmKey   [32]byte
	BlsKey  []byte
	Balance *big.Int
}, error) {
	return _Staking.Contract.Stakings(&_Staking.CallOpts, arg0)
}

// Stakings is a free data retrieval call binding the contract method 0xdc6e13e1.
//
// Solidity: function stakings(address ) view returns(address addr, bytes32 tmKey, bytes blsKey, uint256 balance)
func (_Staking *StakingCallerSession) Stakings(arg0 common.Address) (struct {
	Addr    common.Address
	TmKey   [32]byte
	BlsKey  []byte
	Balance *big.Int
}, error) {
	return _Staking.Contract.Stakings(&_Staking.CallOpts, arg0)
}

// Whitelist is a free data retrieval call binding the contract method 0x9b19251a.
//
// Solidity: function whitelist(address ) view returns(bool)
func (_Staking *StakingCaller) Whitelist(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "whitelist", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Whitelist is a free data retrieval call binding the contract method 0x9b19251a.
//
// Solidity: function whitelist(address ) view returns(bool)
func (_Staking *StakingSession) Whitelist(arg0 common.Address) (bool, error) {
	return _Staking.Contract.Whitelist(&_Staking.CallOpts, arg0)
}

// Whitelist is a free data retrieval call binding the contract method 0x9b19251a.
//
// Solidity: function whitelist(address ) view returns(bool)
func (_Staking *StakingCallerSession) Whitelist(arg0 common.Address) (bool, error) {
	return _Staking.Contract.Whitelist(&_Staking.CallOpts, arg0)
}

// Withdrawals is a free data retrieval call binding the contract method 0x7a9262a2.
//
// Solidity: function withdrawals(address ) view returns(uint256 balance, uint256 unlock, bool exit)
func (_Staking *StakingCaller) Withdrawals(opts *bind.CallOpts, arg0 common.Address) (struct {
	Balance *big.Int
	Unlock  *big.Int
	Exit    bool
}, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "withdrawals", arg0)

	outstruct := new(struct {
		Balance *big.Int
		Unlock  *big.Int
		Exit    bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Balance = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Unlock = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.Exit = *abi.ConvertType(out[2], new(bool)).(*bool)

	return *outstruct, err

}

// Withdrawals is a free data retrieval call binding the contract method 0x7a9262a2.
//
// Solidity: function withdrawals(address ) view returns(uint256 balance, uint256 unlock, bool exit)
func (_Staking *StakingSession) Withdrawals(arg0 common.Address) (struct {
	Balance *big.Int
	Unlock  *big.Int
	Exit    bool
}, error) {
	return _Staking.Contract.Withdrawals(&_Staking.CallOpts, arg0)
}

// Withdrawals is a free data retrieval call binding the contract method 0x7a9262a2.
//
// Solidity: function withdrawals(address ) view returns(uint256 balance, uint256 unlock, bool exit)
func (_Staking *StakingCallerSession) Withdrawals(arg0 common.Address) (struct {
	Balance *big.Int
	Unlock  *big.Int
	Exit    bool
}, error) {
	return _Staking.Contract.Withdrawals(&_Staking.CallOpts, arg0)
}

// ClaimETH is a paid mutator transaction binding the contract method 0x67272999.
//
// Solidity: function claimETH() returns()
func (_Staking *StakingTransactor) ClaimETH(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "claimETH")
}

// ClaimETH is a paid mutator transaction binding the contract method 0x67272999.
//
// Solidity: function claimETH() returns()
func (_Staking *StakingSession) ClaimETH() (*types.Transaction, error) {
	return _Staking.Contract.ClaimETH(&_Staking.TransactOpts)
}

// ClaimETH is a paid mutator transaction binding the contract method 0x67272999.
//
// Solidity: function claimETH() returns()
func (_Staking *StakingTransactorSession) ClaimETH() (*types.Transaction, error) {
	return _Staking.Contract.ClaimETH(&_Staking.TransactOpts)
}

// Initialize is a paid mutator transaction binding the contract method 0x728cdbca.
//
// Solidity: function initialize(address _admin, address _sequencerContract, address _rollupContract, uint256 _sequencersSize, uint256 _limit, uint256 _lock) returns()
func (_Staking *StakingTransactor) Initialize(opts *bind.TransactOpts, _admin common.Address, _sequencerContract common.Address, _rollupContract common.Address, _sequencersSize *big.Int, _limit *big.Int, _lock *big.Int) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "initialize", _admin, _sequencerContract, _rollupContract, _sequencersSize, _limit, _lock)
}

// Initialize is a paid mutator transaction binding the contract method 0x728cdbca.
//
// Solidity: function initialize(address _admin, address _sequencerContract, address _rollupContract, uint256 _sequencersSize, uint256 _limit, uint256 _lock) returns()
func (_Staking *StakingSession) Initialize(_admin common.Address, _sequencerContract common.Address, _rollupContract common.Address, _sequencersSize *big.Int, _limit *big.Int, _lock *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.Initialize(&_Staking.TransactOpts, _admin, _sequencerContract, _rollupContract, _sequencersSize, _limit, _lock)
}

// Initialize is a paid mutator transaction binding the contract method 0x728cdbca.
//
// Solidity: function initialize(address _admin, address _sequencerContract, address _rollupContract, uint256 _sequencersSize, uint256 _limit, uint256 _lock) returns()
func (_Staking *StakingTransactorSession) Initialize(_admin common.Address, _sequencerContract common.Address, _rollupContract common.Address, _sequencersSize *big.Int, _limit *big.Int, _lock *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.Initialize(&_Staking.TransactOpts, _admin, _sequencerContract, _rollupContract, _sequencersSize, _limit, _lock)
}

// Register is a paid mutator transaction binding the contract method 0xfc15799d.
//
// Solidity: function register(bytes32 tmKey, bytes blsKey, uint32 _minGasLimit) payable returns()
func (_Staking *StakingTransactor) Register(opts *bind.TransactOpts, tmKey [32]byte, blsKey []byte, _minGasLimit uint32) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "register", tmKey, blsKey, _minGasLimit)
}

// Register is a paid mutator transaction binding the contract method 0xfc15799d.
//
// Solidity: function register(bytes32 tmKey, bytes blsKey, uint32 _minGasLimit) payable returns()
func (_Staking *StakingSession) Register(tmKey [32]byte, blsKey []byte, _minGasLimit uint32) (*types.Transaction, error) {
	return _Staking.Contract.Register(&_Staking.TransactOpts, tmKey, blsKey, _minGasLimit)
}

// Register is a paid mutator transaction binding the contract method 0xfc15799d.
//
// Solidity: function register(bytes32 tmKey, bytes blsKey, uint32 _minGasLimit) payable returns()
func (_Staking *StakingTransactorSession) Register(tmKey [32]byte, blsKey []byte, _minGasLimit uint32) (*types.Transaction, error) {
	return _Staking.Contract.Register(&_Staking.TransactOpts, tmKey, blsKey, _minGasLimit)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Staking *StakingTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Staking *StakingSession) RenounceOwnership() (*types.Transaction, error) {
	return _Staking.Contract.RenounceOwnership(&_Staking.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Staking *StakingTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Staking.Contract.RenounceOwnership(&_Staking.TransactOpts)
}

// Slash is a paid mutator transaction binding the contract method 0xd339b988.
//
// Solidity: function slash(address[] sequencers, uint32 _minGasLimit) returns(uint256)
func (_Staking *StakingTransactor) Slash(opts *bind.TransactOpts, sequencers []common.Address, _minGasLimit uint32) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "slash", sequencers, _minGasLimit)
}

// Slash is a paid mutator transaction binding the contract method 0xd339b988.
//
// Solidity: function slash(address[] sequencers, uint32 _minGasLimit) returns(uint256)
func (_Staking *StakingSession) Slash(sequencers []common.Address, _minGasLimit uint32) (*types.Transaction, error) {
	return _Staking.Contract.Slash(&_Staking.TransactOpts, sequencers, _minGasLimit)
}

// Slash is a paid mutator transaction binding the contract method 0xd339b988.
//
// Solidity: function slash(address[] sequencers, uint32 _minGasLimit) returns(uint256)
func (_Staking *StakingTransactorSession) Slash(sequencers []common.Address, _minGasLimit uint32) (*types.Transaction, error) {
	return _Staking.Contract.Slash(&_Staking.TransactOpts, sequencers, _minGasLimit)
}

// StakeETH is a paid mutator transaction binding the contract method 0xd702d8aa.
//
// Solidity: function stakeETH(uint32 _minGasLimit) payable returns()
func (_Staking *StakingTransactor) StakeETH(opts *bind.TransactOpts, _minGasLimit uint32) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "stakeETH", _minGasLimit)
}

// StakeETH is a paid mutator transaction binding the contract method 0xd702d8aa.
//
// Solidity: function stakeETH(uint32 _minGasLimit) payable returns()
func (_Staking *StakingSession) StakeETH(_minGasLimit uint32) (*types.Transaction, error) {
	return _Staking.Contract.StakeETH(&_Staking.TransactOpts, _minGasLimit)
}

// StakeETH is a paid mutator transaction binding the contract method 0xd702d8aa.
//
// Solidity: function stakeETH(uint32 _minGasLimit) payable returns()
func (_Staking *StakingTransactorSession) StakeETH(_minGasLimit uint32) (*types.Transaction, error) {
	return _Staking.Contract.StakeETH(&_Staking.TransactOpts, _minGasLimit)
}

// ToggleSlash is a paid mutator transaction binding the contract method 0x59e93d1e.
//
// Solidity: function toggleSlash(bool enable) returns()
func (_Staking *StakingTransactor) ToggleSlash(opts *bind.TransactOpts, enable bool) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "toggleSlash", enable)
}

// ToggleSlash is a paid mutator transaction binding the contract method 0x59e93d1e.
//
// Solidity: function toggleSlash(bool enable) returns()
func (_Staking *StakingSession) ToggleSlash(enable bool) (*types.Transaction, error) {
	return _Staking.Contract.ToggleSlash(&_Staking.TransactOpts, enable)
}

// ToggleSlash is a paid mutator transaction binding the contract method 0x59e93d1e.
//
// Solidity: function toggleSlash(bool enable) returns()
func (_Staking *StakingTransactorSession) ToggleSlash(enable bool) (*types.Transaction, error) {
	return _Staking.Contract.ToggleSlash(&_Staking.TransactOpts, enable)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Staking *StakingTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Staking *StakingSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Staking.Contract.TransferOwnership(&_Staking.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Staking *StakingTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Staking.Contract.TransferOwnership(&_Staking.TransactOpts, newOwner)
}

// UnpauseSequencer is a paid mutator transaction binding the contract method 0xed2fb2e1.
//
// Solidity: function unpauseSequencer() returns()
func (_Staking *StakingTransactor) UnpauseSequencer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "unpauseSequencer")
}

// UnpauseSequencer is a paid mutator transaction binding the contract method 0xed2fb2e1.
//
// Solidity: function unpauseSequencer() returns()
func (_Staking *StakingSession) UnpauseSequencer() (*types.Transaction, error) {
	return _Staking.Contract.UnpauseSequencer(&_Staking.TransactOpts)
}

// UnpauseSequencer is a paid mutator transaction binding the contract method 0xed2fb2e1.
//
// Solidity: function unpauseSequencer() returns()
func (_Staking *StakingTransactorSession) UnpauseSequencer() (*types.Transaction, error) {
	return _Staking.Contract.UnpauseSequencer(&_Staking.TransactOpts)
}

// UpdateParams is a paid mutator transaction binding the contract method 0x760b3d3a.
//
// Solidity: function updateParams(uint256 _sequencersSize, uint256 _limit, uint256 _lock, uint32 _minGasLimit) returns()
func (_Staking *StakingTransactor) UpdateParams(opts *bind.TransactOpts, _sequencersSize *big.Int, _limit *big.Int, _lock *big.Int, _minGasLimit uint32) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "updateParams", _sequencersSize, _limit, _lock, _minGasLimit)
}

// UpdateParams is a paid mutator transaction binding the contract method 0x760b3d3a.
//
// Solidity: function updateParams(uint256 _sequencersSize, uint256 _limit, uint256 _lock, uint32 _minGasLimit) returns()
func (_Staking *StakingSession) UpdateParams(_sequencersSize *big.Int, _limit *big.Int, _lock *big.Int, _minGasLimit uint32) (*types.Transaction, error) {
	return _Staking.Contract.UpdateParams(&_Staking.TransactOpts, _sequencersSize, _limit, _lock, _minGasLimit)
}

// UpdateParams is a paid mutator transaction binding the contract method 0x760b3d3a.
//
// Solidity: function updateParams(uint256 _sequencersSize, uint256 _limit, uint256 _lock, uint32 _minGasLimit) returns()
func (_Staking *StakingTransactorSession) UpdateParams(_sequencersSize *big.Int, _limit *big.Int, _lock *big.Int, _minGasLimit uint32) (*types.Transaction, error) {
	return _Staking.Contract.UpdateParams(&_Staking.TransactOpts, _sequencersSize, _limit, _lock, _minGasLimit)
}

// UpdateWhitelist is a paid mutator transaction binding the contract method 0xc7cd469a.
//
// Solidity: function updateWhitelist(address[] add, address[] remove) returns()
func (_Staking *StakingTransactor) UpdateWhitelist(opts *bind.TransactOpts, add []common.Address, remove []common.Address) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "updateWhitelist", add, remove)
}

// UpdateWhitelist is a paid mutator transaction binding the contract method 0xc7cd469a.
//
// Solidity: function updateWhitelist(address[] add, address[] remove) returns()
func (_Staking *StakingSession) UpdateWhitelist(add []common.Address, remove []common.Address) (*types.Transaction, error) {
	return _Staking.Contract.UpdateWhitelist(&_Staking.TransactOpts, add, remove)
}

// UpdateWhitelist is a paid mutator transaction binding the contract method 0xc7cd469a.
//
// Solidity: function updateWhitelist(address[] add, address[] remove) returns()
func (_Staking *StakingTransactorSession) UpdateWhitelist(add []common.Address, remove []common.Address) (*types.Transaction, error) {
	return _Staking.Contract.UpdateWhitelist(&_Staking.TransactOpts, add, remove)
}

// WithdrawETH is a paid mutator transaction binding the contract method 0xa16e0674.
//
// Solidity: function withdrawETH(uint32 _minGasLimit) payable returns()
func (_Staking *StakingTransactor) WithdrawETH(opts *bind.TransactOpts, _minGasLimit uint32) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "withdrawETH", _minGasLimit)
}

// WithdrawETH is a paid mutator transaction binding the contract method 0xa16e0674.
//
// Solidity: function withdrawETH(uint32 _minGasLimit) payable returns()
func (_Staking *StakingSession) WithdrawETH(_minGasLimit uint32) (*types.Transaction, error) {
	return _Staking.Contract.WithdrawETH(&_Staking.TransactOpts, _minGasLimit)
}

// WithdrawETH is a paid mutator transaction binding the contract method 0xa16e0674.
//
// Solidity: function withdrawETH(uint32 _minGasLimit) payable returns()
func (_Staking *StakingTransactorSession) WithdrawETH(_minGasLimit uint32) (*types.Transaction, error) {
	return _Staking.Contract.WithdrawETH(&_Staking.TransactOpts, _minGasLimit)
}

// StakingClaimedIterator is returned from FilterClaimed and is used to iterate over the raw logs and unpacked data for Claimed events raised by the Staking contract.
type StakingClaimedIterator struct {
	Event *StakingClaimed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingClaimedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingClaimed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingClaimed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingClaimedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingClaimedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingClaimed represents a Claimed event raised by the Staking contract.
type StakingClaimed struct {
	Addr    common.Address
	Balance *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterClaimed is a free log retrieval operation binding the contract event 0xd8138f8a3f377c5259ca548e70e4c2de94f129f5a11036a15b69513cba2b426a.
//
// Solidity: event Claimed(address indexed addr, uint256 balance)
func (_Staking *StakingFilterer) FilterClaimed(opts *bind.FilterOpts, addr []common.Address) (*StakingClaimedIterator, error) {

	var addrRule []interface{}
	for _, addrItem := range addr {
		addrRule = append(addrRule, addrItem)
	}

	logs, sub, err := _Staking.contract.FilterLogs(opts, "Claimed", addrRule)
	if err != nil {
		return nil, err
	}
	return &StakingClaimedIterator{contract: _Staking.contract, event: "Claimed", logs: logs, sub: sub}, nil
}

// WatchClaimed is a free log subscription operation binding the contract event 0xd8138f8a3f377c5259ca548e70e4c2de94f129f5a11036a15b69513cba2b426a.
//
// Solidity: event Claimed(address indexed addr, uint256 balance)
func (_Staking *StakingFilterer) WatchClaimed(opts *bind.WatchOpts, sink chan<- *StakingClaimed, addr []common.Address) (event.Subscription, error) {

	var addrRule []interface{}
	for _, addrItem := range addr {
		addrRule = append(addrRule, addrItem)
	}

	logs, sub, err := _Staking.contract.WatchLogs(opts, "Claimed", addrRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingClaimed)
				if err := _Staking.contract.UnpackLog(event, "Claimed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseClaimed is a log parse operation binding the contract event 0xd8138f8a3f377c5259ca548e70e4c2de94f129f5a11036a15b69513cba2b426a.
//
// Solidity: event Claimed(address indexed addr, uint256 balance)
func (_Staking *StakingFilterer) ParseClaimed(log types.Log) (*StakingClaimed, error) {
	event := new(StakingClaimed)
	if err := _Staking.contract.UnpackLog(event, "Claimed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingEnableSlashIterator is returned from FilterEnableSlash and is used to iterate over the raw logs and unpacked data for EnableSlash events raised by the Staking contract.
type StakingEnableSlashIterator struct {
	Event *StakingEnableSlash // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingEnableSlashIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingEnableSlash)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingEnableSlash)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingEnableSlashIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingEnableSlashIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingEnableSlash represents a EnableSlash event raised by the Staking contract.
type StakingEnableSlash struct {
	Enable bool
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterEnableSlash is a free log retrieval operation binding the contract event 0xfa7e1498ad96b6cd4d37fadb6f9acacfe7132535ad7f9758ea408b1105226ba5.
//
// Solidity: event EnableSlash(bool enable)
func (_Staking *StakingFilterer) FilterEnableSlash(opts *bind.FilterOpts) (*StakingEnableSlashIterator, error) {

	logs, sub, err := _Staking.contract.FilterLogs(opts, "EnableSlash")
	if err != nil {
		return nil, err
	}
	return &StakingEnableSlashIterator{contract: _Staking.contract, event: "EnableSlash", logs: logs, sub: sub}, nil
}

// WatchEnableSlash is a free log subscription operation binding the contract event 0xfa7e1498ad96b6cd4d37fadb6f9acacfe7132535ad7f9758ea408b1105226ba5.
//
// Solidity: event EnableSlash(bool enable)
func (_Staking *StakingFilterer) WatchEnableSlash(opts *bind.WatchOpts, sink chan<- *StakingEnableSlash) (event.Subscription, error) {

	logs, sub, err := _Staking.contract.WatchLogs(opts, "EnableSlash")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingEnableSlash)
				if err := _Staking.contract.UnpackLog(event, "EnableSlash", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEnableSlash is a log parse operation binding the contract event 0xfa7e1498ad96b6cd4d37fadb6f9acacfe7132535ad7f9758ea408b1105226ba5.
//
// Solidity: event EnableSlash(bool enable)
func (_Staking *StakingFilterer) ParseEnableSlash(log types.Log) (*StakingEnableSlash, error) {
	event := new(StakingEnableSlash)
	if err := _Staking.contract.UnpackLog(event, "EnableSlash", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the Staking contract.
type StakingInitializedIterator struct {
	Event *StakingInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingInitialized represents a Initialized event raised by the Staking contract.
type StakingInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Staking *StakingFilterer) FilterInitialized(opts *bind.FilterOpts) (*StakingInitializedIterator, error) {

	logs, sub, err := _Staking.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &StakingInitializedIterator{contract: _Staking.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Staking *StakingFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *StakingInitialized) (event.Subscription, error) {

	logs, sub, err := _Staking.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingInitialized)
				if err := _Staking.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Staking *StakingFilterer) ParseInitialized(log types.Log) (*StakingInitialized, error) {
	event := new(StakingInitialized)
	if err := _Staking.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Staking contract.
type StakingOwnershipTransferredIterator struct {
	Event *StakingOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingOwnershipTransferred represents a OwnershipTransferred event raised by the Staking contract.
type StakingOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Staking *StakingFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*StakingOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Staking.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &StakingOwnershipTransferredIterator{contract: _Staking.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Staking *StakingFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *StakingOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Staking.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingOwnershipTransferred)
				if err := _Staking.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Staking *StakingFilterer) ParseOwnershipTransferred(log types.Log) (*StakingOwnershipTransferred, error) {
	event := new(StakingOwnershipTransferred)
	if err := _Staking.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingParamsUpdatedIterator is returned from FilterParamsUpdated and is used to iterate over the raw logs and unpacked data for ParamsUpdated events raised by the Staking contract.
type StakingParamsUpdatedIterator struct {
	Event *StakingParamsUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingParamsUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingParamsUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingParamsUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingParamsUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingParamsUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingParamsUpdated represents a ParamsUpdated event raised by the Staking contract.
type StakingParamsUpdated struct {
	SequencersSize *big.Int
	Limit          *big.Int
	Lock           *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterParamsUpdated is a free log retrieval operation binding the contract event 0x0cba168cfa7900657e5f8cc53d6f52ebbfa3a9f568941b465cc4f731c60c95b2.
//
// Solidity: event ParamsUpdated(uint256 _sequencersSize, uint256 _limit, uint256 _lock)
func (_Staking *StakingFilterer) FilterParamsUpdated(opts *bind.FilterOpts) (*StakingParamsUpdatedIterator, error) {

	logs, sub, err := _Staking.contract.FilterLogs(opts, "ParamsUpdated")
	if err != nil {
		return nil, err
	}
	return &StakingParamsUpdatedIterator{contract: _Staking.contract, event: "ParamsUpdated", logs: logs, sub: sub}, nil
}

// WatchParamsUpdated is a free log subscription operation binding the contract event 0x0cba168cfa7900657e5f8cc53d6f52ebbfa3a9f568941b465cc4f731c60c95b2.
//
// Solidity: event ParamsUpdated(uint256 _sequencersSize, uint256 _limit, uint256 _lock)
func (_Staking *StakingFilterer) WatchParamsUpdated(opts *bind.WatchOpts, sink chan<- *StakingParamsUpdated) (event.Subscription, error) {

	logs, sub, err := _Staking.contract.WatchLogs(opts, "ParamsUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingParamsUpdated)
				if err := _Staking.contract.UnpackLog(event, "ParamsUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseParamsUpdated is a log parse operation binding the contract event 0x0cba168cfa7900657e5f8cc53d6f52ebbfa3a9f568941b465cc4f731c60c95b2.
//
// Solidity: event ParamsUpdated(uint256 _sequencersSize, uint256 _limit, uint256 _lock)
func (_Staking *StakingFilterer) ParseParamsUpdated(log types.Log) (*StakingParamsUpdated, error) {
	event := new(StakingParamsUpdated)
	if err := _Staking.contract.UnpackLog(event, "ParamsUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingRegisteredIterator is returned from FilterRegistered and is used to iterate over the raw logs and unpacked data for Registered events raised by the Staking contract.
type StakingRegisteredIterator struct {
	Event *StakingRegistered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingRegisteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingRegistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingRegistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingRegisteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingRegisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingRegistered represents a Registered event raised by the Staking contract.
type StakingRegistered struct {
	Addr    common.Address
	TmKey   [32]byte
	BlsKey  []byte
	Balance *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRegistered is a free log retrieval operation binding the contract event 0xb7f230b53b0f914ccf820ab0618ac8320e984eeb0fb6a740785cf7fdc3b5cee3.
//
// Solidity: event Registered(address addr, bytes32 tmKey, bytes blsKey, uint256 balance)
func (_Staking *StakingFilterer) FilterRegistered(opts *bind.FilterOpts) (*StakingRegisteredIterator, error) {

	logs, sub, err := _Staking.contract.FilterLogs(opts, "Registered")
	if err != nil {
		return nil, err
	}
	return &StakingRegisteredIterator{contract: _Staking.contract, event: "Registered", logs: logs, sub: sub}, nil
}

// WatchRegistered is a free log subscription operation binding the contract event 0xb7f230b53b0f914ccf820ab0618ac8320e984eeb0fb6a740785cf7fdc3b5cee3.
//
// Solidity: event Registered(address addr, bytes32 tmKey, bytes blsKey, uint256 balance)
func (_Staking *StakingFilterer) WatchRegistered(opts *bind.WatchOpts, sink chan<- *StakingRegistered) (event.Subscription, error) {

	logs, sub, err := _Staking.contract.WatchLogs(opts, "Registered")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingRegistered)
				if err := _Staking.contract.UnpackLog(event, "Registered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRegistered is a log parse operation binding the contract event 0xb7f230b53b0f914ccf820ab0618ac8320e984eeb0fb6a740785cf7fdc3b5cee3.
//
// Solidity: event Registered(address addr, bytes32 tmKey, bytes blsKey, uint256 balance)
func (_Staking *StakingFilterer) ParseRegistered(log types.Log) (*StakingRegistered, error) {
	event := new(StakingRegistered)
	if err := _Staking.contract.UnpackLog(event, "Registered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingStakedIterator is returned from FilterStaked and is used to iterate over the raw logs and unpacked data for Staked events raised by the Staking contract.
type StakingStakedIterator struct {
	Event *StakingStaked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingStakedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingStaked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingStaked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingStakedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingStakedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingStaked represents a Staked event raised by the Staking contract.
type StakingStaked struct {
	Addr    common.Address
	Balance *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterStaked is a free log retrieval operation binding the contract event 0x9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d.
//
// Solidity: event Staked(address indexed addr, uint256 balance)
func (_Staking *StakingFilterer) FilterStaked(opts *bind.FilterOpts, addr []common.Address) (*StakingStakedIterator, error) {

	var addrRule []interface{}
	for _, addrItem := range addr {
		addrRule = append(addrRule, addrItem)
	}

	logs, sub, err := _Staking.contract.FilterLogs(opts, "Staked", addrRule)
	if err != nil {
		return nil, err
	}
	return &StakingStakedIterator{contract: _Staking.contract, event: "Staked", logs: logs, sub: sub}, nil
}

// WatchStaked is a free log subscription operation binding the contract event 0x9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d.
//
// Solidity: event Staked(address indexed addr, uint256 balance)
func (_Staking *StakingFilterer) WatchStaked(opts *bind.WatchOpts, sink chan<- *StakingStaked, addr []common.Address) (event.Subscription, error) {

	var addrRule []interface{}
	for _, addrItem := range addr {
		addrRule = append(addrRule, addrItem)
	}

	logs, sub, err := _Staking.contract.WatchLogs(opts, "Staked", addrRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingStaked)
				if err := _Staking.contract.UnpackLog(event, "Staked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStaked is a log parse operation binding the contract event 0x9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d.
//
// Solidity: event Staked(address indexed addr, uint256 balance)
func (_Staking *StakingFilterer) ParseStaked(log types.Log) (*StakingStaked, error) {
	event := new(StakingStaked)
	if err := _Staking.contract.UnpackLog(event, "Staked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingWhitelistUpdatedIterator is returned from FilterWhitelistUpdated and is used to iterate over the raw logs and unpacked data for WhitelistUpdated events raised by the Staking contract.
type StakingWhitelistUpdatedIterator struct {
	Event *StakingWhitelistUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingWhitelistUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingWhitelistUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingWhitelistUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingWhitelistUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingWhitelistUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingWhitelistUpdated represents a WhitelistUpdated event raised by the Staking contract.
type StakingWhitelistUpdated struct {
	Add    []common.Address
	Remove []common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterWhitelistUpdated is a free log retrieval operation binding the contract event 0xe375867e538b40218c1b3db2ccceaf875eb073e38b510449e6088c1539ac8622.
//
// Solidity: event WhitelistUpdated(address[] add, address[] remove)
func (_Staking *StakingFilterer) FilterWhitelistUpdated(opts *bind.FilterOpts) (*StakingWhitelistUpdatedIterator, error) {

	logs, sub, err := _Staking.contract.FilterLogs(opts, "WhitelistUpdated")
	if err != nil {
		return nil, err
	}
	return &StakingWhitelistUpdatedIterator{contract: _Staking.contract, event: "WhitelistUpdated", logs: logs, sub: sub}, nil
}

// WatchWhitelistUpdated is a free log subscription operation binding the contract event 0xe375867e538b40218c1b3db2ccceaf875eb073e38b510449e6088c1539ac8622.
//
// Solidity: event WhitelistUpdated(address[] add, address[] remove)
func (_Staking *StakingFilterer) WatchWhitelistUpdated(opts *bind.WatchOpts, sink chan<- *StakingWhitelistUpdated) (event.Subscription, error) {

	logs, sub, err := _Staking.contract.WatchLogs(opts, "WhitelistUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingWhitelistUpdated)
				if err := _Staking.contract.UnpackLog(event, "WhitelistUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWhitelistUpdated is a log parse operation binding the contract event 0xe375867e538b40218c1b3db2ccceaf875eb073e38b510449e6088c1539ac8622.
//
// Solidity: event WhitelistUpdated(address[] add, address[] remove)
func (_Staking *StakingFilterer) ParseWhitelistUpdated(log types.Log) (*StakingWhitelistUpdated, error) {
	event := new(StakingWhitelistUpdated)
	if err := _Staking.contract.UnpackLog(event, "WhitelistUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingWithdrawnIterator is returned from FilterWithdrawn and is used to iterate over the raw logs and unpacked data for Withdrawn events raised by the Staking contract.
type StakingWithdrawnIterator struct {
	Event *StakingWithdrawn // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingWithdrawnIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingWithdrawn)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingWithdrawn)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingWithdrawnIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingWithdrawnIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingWithdrawn represents a Withdrawn event raised by the Staking contract.
type StakingWithdrawn struct {
	Addr    common.Address
	Balance *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterWithdrawn is a free log retrieval operation binding the contract event 0x7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5.
//
// Solidity: event Withdrawn(address indexed addr, uint256 balance)
func (_Staking *StakingFilterer) FilterWithdrawn(opts *bind.FilterOpts, addr []common.Address) (*StakingWithdrawnIterator, error) {

	var addrRule []interface{}
	for _, addrItem := range addr {
		addrRule = append(addrRule, addrItem)
	}

	logs, sub, err := _Staking.contract.FilterLogs(opts, "Withdrawn", addrRule)
	if err != nil {
		return nil, err
	}
	return &StakingWithdrawnIterator{contract: _Staking.contract, event: "Withdrawn", logs: logs, sub: sub}, nil
}

// WatchWithdrawn is a free log subscription operation binding the contract event 0x7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5.
//
// Solidity: event Withdrawn(address indexed addr, uint256 balance)
func (_Staking *StakingFilterer) WatchWithdrawn(opts *bind.WatchOpts, sink chan<- *StakingWithdrawn, addr []common.Address) (event.Subscription, error) {

	var addrRule []interface{}
	for _, addrItem := range addr {
		addrRule = append(addrRule, addrItem)
	}

	logs, sub, err := _Staking.contract.WatchLogs(opts, "Withdrawn", addrRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingWithdrawn)
				if err := _Staking.contract.UnpackLog(event, "Withdrawn", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdrawn is a log parse operation binding the contract event 0x7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5.
//
// Solidity: event Withdrawn(address indexed addr, uint256 balance)
func (_Staking *StakingFilterer) ParseWithdrawn(log types.Log) (*StakingWithdrawn, error) {
	event := new(StakingWithdrawn)
	if err := _Staking.contract.UnpackLog(event, "Withdrawn", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
