// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package bindings

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/scroll-tech/go-ethereum"
	"github.com/scroll-tech/go-ethereum/accounts/abi"
	"github.com/scroll-tech/go-ethereum/accounts/abi/bind"
	"github.com/scroll-tech/go-ethereum/common"
	"github.com/scroll-tech/go-ethereum/core/types"
	"github.com/scroll-tech/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// StakingMetaData contains all meta data concerning the Staking contract.
var StakingMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"EnableSlash\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_sequencersSize\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_lock\",\"type\":\"uint256\"}],\"name\":\"ParamsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"tmKey\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"blsKey\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"Registered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"add\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"remove\",\"type\":\"address[]\"}],\"name\":\"WhitelistUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"Withdrawed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"claimETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sequencerContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_sequencersSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lock\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"tmKey\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"blsKey\",\"type\":\"bytes\"},{\"internalType\":\"uint32\",\"name\":\"_minGasLimit\",\"type\":\"uint32\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sequencerContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sequencersAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sequencersBLS\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sequencersSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"sequencers\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_minGasLimit\",\"type\":\"uint32\"}],\"name\":\"slash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_minGasLimit\",\"type\":\"uint32\"}],\"name\":\"stakeETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakersNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakings\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"tmKey\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"blsKey\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enanble\",\"type\":\"bool\"}],\"name\":\"toggleSlash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpauseSequencer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sequencersSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lock\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_minGasLimit\",\"type\":\"uint32\"}],\"name\":\"updateParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"add\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"remove\",\"type\":\"address[]\"}],\"name\":\"updateWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_minGasLimit\",\"type\":\"uint32\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlock\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"exit\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x6080604052606c805460ff191690555f606d5534801561001d575f80fd5b5061307e8061002b5f395ff3fe608060405260043610610183575f3560e01c8063b2145280116100d1578063dc6e13e11161007c578063f83d08ba11610057578063f83d08ba1461045c578063fc15799d14610471578063fd5e6dd114610484575f80fd5b8063dc6e13e1146103fa578063ed2fb2e114610429578063f2fde38b1461043d575f80fd5b8063d13f90b4116100ac578063d13f90b4146103a9578063d3710ec5146103c8578063d702d8aa146103e7575f80fd5b8063b214528014610361578063c7cd469a14610376578063cbd679cb14610395575f80fd5b80637a9262a211610131578063a16e06741161010c578063a16e06741461030c578063a4d66daf1461031f578063a704483614610342575f80fd5b80637a9262a2146102435780638da5cb5b1461029d5780639b19251a146102ce575f80fd5b8063715018a611610161578063715018a6146101f157806371f8dddb14610205578063760b3d3a14610224575f80fd5b8063399b8b391461018757806359e93d1e146101bc57806367272999146101dd575b5f80fd5b348015610192575f80fd5b506101a66101a136600461265f565b6104a3565b6040516101b391906126b9565b60405180910390f35b3480156101c7575f80fd5b506101db6101d63660046126d2565b610549565b005b3480156101e8575f80fd5b506101db61059f565b3480156101fc575f80fd5b506101db6106a1565b348015610210575f80fd5b506101db61021f36600461277d565b6106b4565b34801561022f575f80fd5b506101db61023e366004612846565b610a32565b34801561024e575f80fd5b5061028061025d366004612882565b606b6020525f908152604090208054600182015460029092015490919060ff1683565b6040805193845260208401929092521515908201526060016101b3565b3480156102a8575f80fd5b506033546001600160a01b03165b6040516001600160a01b0390911681526020016101b3565b3480156102d9575f80fd5b506102fc6102e8366004612882565b60686020525f908152604090205460ff1681565b60405190151581526020016101b3565b6101db61031a36600461289b565b610b2e565b34801561032a575f80fd5b5061033460665481565b6040519081526020016101b3565b34801561034d575f80fd5b506065546102b6906001600160a01b031681565b34801561036c575f80fd5b50610334606d5481565b348015610381575f80fd5b506101db6103903660046128fc565b610e01565b3480156103a0575f80fd5b50606954610334565b3480156103b4575f80fd5b506101db6103c3366004612963565b610f09565b3480156103d3575f80fd5b506102b66103e236600461265f565b6111e4565b6101db6103f536600461289b565b61120c565b348015610405575f80fd5b50610419610414366004612882565b611600565b6040516101b394939291906129ac565b348015610434575f80fd5b506101db6116b8565b348015610448575f80fd5b506101db610457366004612882565b61171e565b348015610467575f80fd5b5061033460675481565b6101db61047f3660046129e4565b6117ab565b34801561048f575f80fd5b506102b661049e36600461265f565b611f18565b606f81815481106104b2575f80fd5b905f5260205f20015f9150905080546104ca90612a83565b80601f01602080910402602001604051908101604052809291908181526020018280546104f690612a83565b80156105415780601f1061051857610100808354040283529160200191610541565b820191905f5260205f20905b81548152906001019060200180831161052457829003601f168201915b505050505081565b610551611f27565b6070805460ff191682151590811790915560405160ff909116151581527ffa7e1498ad96b6cd4d37fadb6f9acacfe7132535ad7f9758ea408b1105226ba5906020015b60405180910390a150565b335f908152606b602052604090206002015460ff1680156105cd5750335f908152606b602052604090205415155b80156105e95750335f908152606b602052604090206001015443115b61063a5760405162461bcd60e51b815260206004820152601260248201527f696e76616c6964207769746864726177616c000000000000000000000000000060448201526064015b60405180910390fd5b335f818152606b6020526040812080548282556001820192909255600201805460ff191690559061066b9082611f81565b60408051338152602081018390527fd8138f8a3f377c5259ca548e70e4c2de94f129f5a11036a15b69513cba2b426a9101610594565b6106a9611f27565b6106b25f612026565b565b6065546001600160a01b0316331461070e5760405162461bcd60e51b815260206004820152601760248201527f6f6e6c792073657175656e63657220636f6e74726163740000000000000000006044820152606401610631565b60705460ff1615610a2d575f805f5b85518110156109a4575f86828151811061073957610739612ad4565b60200260200101519050606b5f88848151811061075857610758612ad4565b6020908102919091018101516001600160a01b031682528101919091526040015f206002015460ff161561082657606b5f88848151811061079b5761079b612ad4565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020015f205f0154846107d09190612b2e565b9350606b5f8884815181106107e7576107e7612ad4565b6020908102919091018101516001600160a01b031682528101919091526040015f9081208181556001810191909155600201805460ff1916905561099b565b6001600160a01b0381165f908152606a602052604090206003015461084b9085612b2e565b93505f6108578261208f565b9050606d54811161086757600193505b805b60695461087890600190612b47565b81101561090f57606961088c826001612b2e565b8154811061089c5761089c612ad4565b5f91825260209091200154606980546001600160a01b0390921691839081106108c7576108c7612ad4565b5f91825260209091200180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055600101610869565b50606980548061092157610921612b5a565b5f828152602080822083015f1990810180547fffffffffffffffffffffffff000000000000000000000000000000000000000090811690915593019093556001600160a01b0385168152606a9092526040822080549091168155600181018290559061099060028301826125be565b600382015f90555050505b5060010161071d565b508015610a20576109b483612129565b6069545f03610a205760655f9054906101000a90046001600160a01b03166001600160a01b0316638456cb596040518163ffffffff1660e01b81526004015f604051808303815f87803b158015610a09575f80fd5b505af1158015610a1b573d5f803e3d5ffd5b505050505b610a2a8483611f81565b50505b505050565b610a3a611f27565b606d548414158015610a4e57506069548410155b8015610a5957505f84115b610aa55760405162461bcd60e51b815260206004820152601b60248201527f696e76616c6964206e65772073657175656e636572732073697a6500000000006044820152606401610631565b8215610ab15760668390555b8115610abd5760678290555b606954606d541015610adc57606d849055610ad781612129565b610b28565b606d8490556066546067546040805187815260208101939093528201527f0cba168cfa7900657e5f8cc53d6f52ebbfa3a9f568941b465cc4f731c60c95b2906060015b60405180910390a15b50505050565b335f908152606b602052604090206002015460ff1615610b905760405162461bcd60e51b815260206004820152601060248201527f7374616b657220697320657869746564000000000000000000000000000000006044820152606401610631565b5f610b9a3361208f565b60408051606081018252335f908152606a60209081529290206003015481526067549293509190820190610bce9043612b2e565b815260016020918201819052335f818152606b845260409081902085518082558686015194820194909455948101516002909501805460ff1916951515959095179094558351908152918201527f6cca423c6ffc06e62a0acc433965e074b11c28479b0449250ce3ff65ac9e39fe910160405180910390a1805b606954610c5790600190612b47565b811015610cee576069610c6b826001612b2e565b81548110610c7b57610c7b612ad4565b5f91825260209091200154606980546001600160a01b039092169183908110610ca657610ca6612ad4565b5f91825260209091200180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055600101610c48565b506069805480610d0057610d00612b5a565b5f828152602080822083015f1990810180547fffffffffffffffffffffffff00000000000000000000000000000000000000009081169091559301909355338152606a90925260408220805490911681556001810182905590610d6660028301826125be565b505f6003919091018190556069549003610de957610d8382612129565b60655f9054906101000a90046001600160a01b03166001600160a01b0316638456cb596040518163ffffffff1660e01b81526004015f604051808303815f87803b158015610dcf575f80fd5b505af1158015610de1573d5f803e3d5ffd5b505050505050565b606d54811015610dfc57610dfc82612129565b505b50565b610e09611f27565b5f5b83811015610e6e57600160685f878785818110610e2a57610e2a612ad4565b9050602002016020810190610e3f9190612882565b6001600160a01b0316815260208101919091526040015f20805460ff1916911515919091179055600101610e0b565b505f5b81811015610ed3575f60685f858585818110610e8f57610e8f612ad4565b9050602002016020810190610ea49190612882565b6001600160a01b0316815260208101919091526040015f20805460ff1916911515919091179055600101610e71565b507fe375867e538b40218c1b3db2ccceaf875eb073e38b510449e6088c1539ac862284848484604051610b1f9493929190612bcc565b5f54610100900460ff1615808015610f2757505f54600160ff909116105b80610f405750303b158015610f4057505f5460ff166001145b610fb25760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610631565b5f805460ff191660011790558015610ff0575f80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b6001600160a01b0385166110465760405162461bcd60e51b815260206004820152601a60248201527f696e76616c69642073657175656e63657220636f6e74726163740000000000006044820152606401610631565b5f84116110bb5760405162461bcd60e51b815260206004820152602260248201527f73657175656e6365727353697a65206d7573742067726561746572207468616e60448201527f20300000000000000000000000000000000000000000000000000000000000006064820152608401610631565b5f83116111305760405162461bcd60e51b815260206004820152602160248201527f7374616b696e67206c696d6974206d7573742067726561746572207468616e2060448201527f30000000000000000000000000000000000000000000000000000000000000006064820152608401610631565b606580547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b038716179055606d8490556066839055606782905561117b86612026565b8015610de1575f80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a1505050505050565b606e81815481106111f3575f80fd5b5f918252602090912001546001600160a01b0316905081565b335f9081526068602052604090205460ff1661126a5760405162461bcd60e51b815260206004820152601060248201527f6e6f7420696e2077686974656c697374000000000000000000000000000000006044820152606401610631565b5f805b6069548110156112be57336001600160a01b03166069828154811061129457611294612ad4565b5f918252602090912001546001600160a01b0316036112b657600191506112be565b60010161126d565b508061130c5760405162461bcd60e51b815260206004820152601060248201527f7374616b6572206e6f74206578697374000000000000000000000000000000006044820152606401610631565b5f60665411801561131c57505f34115b80156113455750606654335f908152606a6020526040902060030154611343903490612b2e565b115b6113915760405162461bcd60e51b815260206004820152601860248201527f7374616b696e672076616c7565206e6f7420656e6f75676800000000000000006044820152606401610631565b335f908152606a6020526040812060030180543492906113b2908490612b2e565b9091555050335f818152606a6020908152604091829020600301548251938452908301527f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d910160405180910390a15f61140b3361208f565b6069549091505f9061141f90600190612b47565b90505b80156115c357606a5f6069611438600185612b47565b8154811061144857611448612ad4565b905f5260205f20015f9054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020019081526020015f2060030154606a5f6069848154811061149c5761149c612ad4565b5f9182526020808320909101546001600160a01b0316835282019290925260400190206003015411156115b1575f60696114d7600184612b47565b815481106114e7576114e7612ad4565b5f91825260209091200154606980546001600160a01b039092169250908390811061151457611514612ad4565b5f918252602090912001546001600160a01b03166069611535600185612b47565b8154811061154557611545612ad4565b905f5260205f20015f6101000a8154816001600160a01b0302191690836001600160a01b03160217905550806069838154811061158457611584612ad4565b905f5260205f20015f6101000a8154816001600160a01b0302191690836001600160a01b03160217905550505b806115bb81612bfd565b915050611422565b505f6115ce3361208f565b606c5490915060ff1680156115e55750606d548210155b80156115f25750606d5481105b15610b2857610b2884612129565b606a6020525f90815260409020805460018201546002830180546001600160a01b0390931693919261163190612a83565b80601f016020809104026020016040519081016040528092919081815260200182805461165d90612a83565b80156116a85780601f1061167f576101008083540402835291602001916116a8565b820191905f5260205f20905b81548152906001019060200180831161168b57829003601f168201915b5050505050908060030154905084565b6116c0611f27565b60655f9054906101000a90046001600160a01b03166001600160a01b0316633f4ba83a6040518163ffffffff1660e01b81526004015f604051808303815f87803b15801561170c575f80fd5b505af1158015610b28573d5f803e3d5ffd5b611726611f27565b6001600160a01b0381166117a25760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610631565b610dfe81612026565b335f9081526068602052604090205460ff166118095760405162461bcd60e51b815260206004820152601060248201527f6e6f7420696e2077686974656c697374000000000000000000000000000000006044820152606401610631565b5f805b60695481101561185d57336001600160a01b03166069828154811061183357611833612ad4565b5f918252602090912001546001600160a01b031603611855576001915061185d565b60010161180c565b5080156118ac5760405162461bcd60e51b815260206004820152601260248201527f616c7265616479207265676973746572656400000000000000000000000000006044820152606401610631565b335f908152606b602052604090206002015460ff161561190e5760405162461bcd60e51b815260206004820152601060248201527f7374616b657220697320657869746564000000000000000000000000000000006044820152606401610631565b5f606d54116119855760405162461bcd60e51b815260206004820152602260248201527f73657175656e6365727353697a65206d7573742067726561746572207468616e60448201527f20300000000000000000000000000000000000000000000000000000000000006064820152608401610631565b5f8490036119d55760405162461bcd60e51b815260206004820152601960248201527f696e76616c69642074656e6465726d696e74207075626b6579000000000000006044820152606401610631565b825161010014611a275760405162461bcd60e51b815260206004820152601260248201527f696e76616c696420626c73207075626b657900000000000000000000000000006044820152606401610631565b5f606654118015611a3a57506066543410155b611a865760405162461bcd60e51b815260206004820152601b60248201527f7374616b696e672076616c7565206973206e6f7420656e6f75676800000000006044820152606401610631565b345f5b606954811015611bce5785606a5f60698481548110611aaa57611aaa612ad4565b5f9182526020808320909101546001600160a01b0316835282019290925260400190206001015403611b1e5760405162461bcd60e51b815260206004820152601860248201527f746d4b657920616c7265616479207265676973746572656400000000000000006044820152606401610631565b8480519060200120606a5f60698481548110611b3c57611b3c612ad4565b5f9182526020808320909101546001600160a01b0316835282019290925260409081019091209051611b719160020190612c12565b604051809103902003611bc65760405162461bcd60e51b815260206004820152601960248201527f626c734b657920616c72656164792072656769737465726564000000000000006044820152606401610631565b600101611a89565b5060408051608081018252338082526020808301898152838501898152606085018790525f938452606a90925293909120825181547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0390911617815592516001840155519091906002820190611c4d9082612cc8565b5060609190910151600390910155606980546001810182555f919091527f7fb4302e8e91f9110a6554c2c0a24601252c2a42c2220ca988efcfe3999143080180547fffffffffffffffffffffffff000000000000000000000000000000000000000016339081179091556040517fb7f230b53b0f914ccf820ab0618ac8320e984eeb0fb6a740785cf7fdc3b5cee391611ceb918890889086906129ac565b60405180910390a16069545f90611d0490600190612b47565b90505b8015611eb157606a5f6069611d1d600185612b47565b81548110611d2d57611d2d612ad4565b905f5260205f20015f9054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020019081526020015f2060030154606a5f60698481548110611d8157611d81612ad4565b5f9182526020808320909101546001600160a01b031683528201929092526040019020600301541115611e9a575f6069611dbc600184612b47565b81548110611dcc57611dcc612ad4565b5f91825260209091200154606980546001600160a01b0390921692509083908110611df957611df9612ad4565b5f918252602090912001546001600160a01b03166069611e1a600185612b47565b81548110611e2a57611e2a612ad4565b905f5260205f20015f6101000a8154816001600160a01b0302191690836001600160a01b031602179055508060698381548110611e6957611e69612ad4565b905f5260205f20015f6101000a8154816001600160a01b0302191690836001600160a01b0316021790555050611e9f565b611eb1565b80611ea981612bfd565b915050611d07565b606c5460ff16158015611ec75750606d54606954145b15611ee957606c805460ff19166001179055611ee284612129565b5050610b28565b606c5460ff168015611f0a5750606d54606954111580611f0a5750606d5481105b15610de157610de184612129565b606981815481106111f3575f80fd5b6033546001600160a01b031633146106b25760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610631565b8015610dfc575f826001600160a01b0316826040515f6040518083038185875af1925050503d805f8114611fd0576040519150601f19603f3d011682016040523d82523d5f602084013e611fd5565b606091505b5050905080610a2d5760405162461bcd60e51b815260206004820152601b60248201527f526f6c6c75703a20455448207472616e73666572206661696c656400000000006044820152606401610631565b603380546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35050565b5f805b6069548110156120e057826001600160a01b0316606982815481106120b9576120b9612ad4565b5f918252602090912001546001600160a01b0316036120d85792915050565b600101612092565b5060405162461bcd60e51b815260206004820152601060248201527f7374616b6572206e6f74206578697374000000000000000000000000000000006044820152606401610631565b612134606e5f6125f5565b61213f606f5f612610565b606d5460695481111561215157506069545b5f8167ffffffffffffffff81111561216b5761216b6126f1565b6040519080825280602002602001820160405280156121b757816020015b60408051606080820183525f8083526020830152918101919091528152602001906001900390816121895790505b5090505f5b8281101561243e57606e606a5f606984815481106121dc576121dc612ad4565b5f9182526020808320909101546001600160a01b039081168452838201949094526040909201812054845460018101865594825291812090930180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169190921617905560698054606f92606a9290918590811061225d5761225d612ad4565b5f9182526020808320909101546001600160a01b0316835282810193909352604090910181208354600181018555938252919020909101906122a29060020182612d84565b506040518060600160405280606a5f606985815481106122c4576122c4612ad4565b5f9182526020808320909101546001600160a01b0390811684528382019490945260409092018120549092168352606980549390910192606a9291908690811061231057612310612ad4565b905f5260205f20015f9054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020019081526020015f20600101548152602001606a5f6069858154811061236957612369612ad4565b5f9182526020808320909101546001600160a01b031683528201929092526040019020600201805461239a90612a83565b80601f01602080910402602001604051908101604052809291908181526020018280546123c690612a83565b80156124115780601f106123e857610100808354040283529160200191612411565b820191905f5260205f20905b8154815290600101906020018083116123f457829003601f168201915b505050505081525082828151811061242b5761242b612ad4565b60209081029190910101526001016121bc565b505f63ad01732f60e01b60655f9054906101000a90046001600160a01b03166001600160a01b03166373452a926040518163ffffffff1660e01b8152600401602060405180830381865afa158015612498573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906124bc9190612e4f565b6124c7906001612b2e565b836040516024016124d9929190612e66565b60408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009094169390931790925260655491517fb20d8e680000000000000000000000000000000000000000000000000000000081529092506001600160a01b039091169063b20d8e689061258b908490606e90606f908a90600401612f13565b5f604051808303815f87803b1580156125a2575f80fd5b505af11580156125b4573d5f803e3d5ffd5b5050505050505050565b5080546125ca90612a83565b5f825580601f106125d9575050565b601f0160209004905f5260205f2090810190610dfe919061262b565b5080545f8255905f5260205f2090810190610dfe919061262b565b5080545f8255905f5260205f2090810190610dfe9190612643565b5b8082111561263f575f815560010161262c565b5090565b8082111561263f575f61265682826125be565b50600101612643565b5f6020828403121561266f575f80fd5b5035919050565b5f81518084525f5b8181101561269a5760208185018101518683018201520161267e565b505f602082860101526020601f19601f83011685010191505092915050565b602081525f6126cb6020830184612676565b9392505050565b5f602082840312156126e2575f80fd5b813580151581146126cb575f80fd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b604051601f8201601f1916810167ffffffffffffffff81118282101715612747576127476126f1565b604052919050565b80356001600160a01b0381168114612765575f80fd5b919050565b803563ffffffff81168114612765575f80fd5b5f805f6060848603121561278f575f80fd5b833567ffffffffffffffff808211156127a6575f80fd5b818601915086601f8301126127b9575f80fd5b81356020828211156127cd576127cd6126f1565b8160051b92506127de81840161271e565b828152928401810192818101908a8511156127f7575f80fd5b948201945b8486101561281c5761280d8661274f565b825294820194908201906127fc565b975061282b905088820161274f565b95505050505061283d6040850161276a565b90509250925092565b5f805f8060808587031215612859575f80fd5b8435935060208501359250604085013591506128776060860161276a565b905092959194509250565b5f60208284031215612892575f80fd5b6126cb8261274f565b5f602082840312156128ab575f80fd5b6126cb8261276a565b5f8083601f8401126128c4575f80fd5b50813567ffffffffffffffff8111156128db575f80fd5b6020830191508360208260051b85010111156128f5575f80fd5b9250929050565b5f805f806040858703121561290f575f80fd5b843567ffffffffffffffff80821115612926575f80fd5b612932888389016128b4565b9096509450602087013591508082111561294a575f80fd5b50612957878288016128b4565b95989497509550505050565b5f805f805f60a08688031215612977575f80fd5b6129808661274f565b945061298e6020870161274f565b94979496505050506040830135926060810135926080909101359150565b6001600160a01b0385168152836020820152608060408201525f6129d36080830185612676565b905082606083015295945050505050565b5f805f606084860312156129f6575f80fd5b8335925060208085013567ffffffffffffffff80821115612a15575f80fd5b818701915087601f830112612a28575f80fd5b813581811115612a3a57612a3a6126f1565b612a4c84601f19601f8401160161271e565b91508082528884828501011115612a61575f80fd5b80848401858401375f8482840101525080945050505061283d6040850161276a565b600181811c90821680612a9757607f821691505b602082108103612ace577f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b50919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b80820180821115612b4157612b41612b01565b92915050565b81810381811115612b4157612b41612b01565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603160045260245ffd5b8183525f60208085019450825f5b85811015612bc1576001600160a01b03612bae8361274f565b1687529582019590820190600101612b95565b509495945050505050565b604081525f612bdf604083018688612b87565b8281036020840152612bf2818587612b87565b979650505050505050565b5f81612c0b57612c0b612b01565b505f190190565b5f808354612c1f81612a83565b60018281168015612c375760018114612c4c57612c78565b60ff1984168752821515830287019450612c78565b875f526020805f205f5b85811015612c6f5781548a820152908401908201612c56565b50505082870194505b50929695505050505050565b601f821115610a2d57805f5260205f20601f840160051c81016020851015612ca95750805b601f840160051c820191505b81811015610a2a575f8155600101612cb5565b815167ffffffffffffffff811115612ce257612ce26126f1565b612cf681612cf08454612a83565b84612c84565b602080601f831160018114612d29575f8415612d125750858301515b5f19600386901b1c1916600185901b178555610de1565b5f85815260208120601f198616915b82811015612d5757888601518255948401946001909101908401612d38565b5085821015612d7457878501515f19600388901b60f8161c191681555b5050505050600190811b01905550565b818103612d8f575050565b612d998254612a83565b67ffffffffffffffff811115612db157612db16126f1565b612dbf81612cf08454612a83565b5f601f821160018114612df0575f8315612dd95750848201545b5f19600385901b1c1916600184901b178455610a2a565b5f8581526020808220868352908220601f198616925b83811015612e265782860154825560019586019590910190602001612e06565b5085831015612d74579301545f1960f8600387901b161c19169092555050600190811b01905550565b5f60208284031215612e5f575f80fd5b5051919050565b5f604080830185845260206040818601528186518084526060935060608701915060608160051b8801018389015f5b83811015612f03578983037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa0018552815180516001600160a01b031684528681015187850152880151888401889052612ef088850182612676565b9587019593505090850190600101612e95565b50909a9950505050505050505050565b608081525f612f256080830187612676565b6020838203818501528187548084528284019150885f52825f2093505f5b81811015612f685784546001600160a01b031683526001948501949284019201612f43565b50508481036040860152809250865480825282820193506005838260051b840101895f52845f205f5b8481101561302457601f198684030188525f8254612fae81612a83565b80865260018281168015612fc95760018114612fe25761300d565b60ff1984168c8901528b8315158a1b890101945061300d565b865f528b5f205f5b848110156130055781548a82018f0152908301908d01612fea565b89018d019550505b509a8a019a92955050509190910190600101612f91565b505063ffffffff89166060890152955061303f945050505050565b9594505050505056fea26469706673582212206b75c3c4f9aadd93f9689702b063b8603d44735dcf303fd1953e149e70e1f0e464736f6c63430008180033",
}

// StakingABI is the input ABI used to generate the binding from.
// Deprecated: Use StakingMetaData.ABI instead.
var StakingABI = StakingMetaData.ABI

// StakingBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use StakingMetaData.Bin instead.
var StakingBin = StakingMetaData.Bin

// DeployStaking deploys a new Ethereum contract, binding an instance of Staking to it.
func DeployStaking(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Staking, error) {
	parsed, err := StakingMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(StakingBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Staking{StakingCaller: StakingCaller{contract: contract}, StakingTransactor: StakingTransactor{contract: contract}, StakingFilterer: StakingFilterer{contract: contract}}, nil
}

// Staking is an auto generated Go binding around an Ethereum contract.
type Staking struct {
	StakingCaller     // Read-only binding to the contract
	StakingTransactor // Write-only binding to the contract
	StakingFilterer   // Log filterer for contract events
}

// StakingCaller is an auto generated read-only Go binding around an Ethereum contract.
type StakingCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakingTransactor is an auto generated write-only Go binding around an Ethereum contract.
type StakingTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakingFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type StakingFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakingSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type StakingSession struct {
	Contract     *Staking          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// StakingCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type StakingCallerSession struct {
	Contract *StakingCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// StakingTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type StakingTransactorSession struct {
	Contract     *StakingTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// StakingRaw is an auto generated low-level Go binding around an Ethereum contract.
type StakingRaw struct {
	Contract *Staking // Generic contract binding to access the raw methods on
}

// StakingCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type StakingCallerRaw struct {
	Contract *StakingCaller // Generic read-only contract binding to access the raw methods on
}

// StakingTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type StakingTransactorRaw struct {
	Contract *StakingTransactor // Generic write-only contract binding to access the raw methods on
}

// NewStaking creates a new instance of Staking, bound to a specific deployed contract.
func NewStaking(address common.Address, backend bind.ContractBackend) (*Staking, error) {
	contract, err := bindStaking(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Staking{StakingCaller: StakingCaller{contract: contract}, StakingTransactor: StakingTransactor{contract: contract}, StakingFilterer: StakingFilterer{contract: contract}}, nil
}

// NewStakingCaller creates a new read-only instance of Staking, bound to a specific deployed contract.
func NewStakingCaller(address common.Address, caller bind.ContractCaller) (*StakingCaller, error) {
	contract, err := bindStaking(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &StakingCaller{contract: contract}, nil
}

// NewStakingTransactor creates a new write-only instance of Staking, bound to a specific deployed contract.
func NewStakingTransactor(address common.Address, transactor bind.ContractTransactor) (*StakingTransactor, error) {
	contract, err := bindStaking(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &StakingTransactor{contract: contract}, nil
}

// NewStakingFilterer creates a new log filterer instance of Staking, bound to a specific deployed contract.
func NewStakingFilterer(address common.Address, filterer bind.ContractFilterer) (*StakingFilterer, error) {
	contract, err := bindStaking(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &StakingFilterer{contract: contract}, nil
}

// bindStaking binds a generic wrapper to an already deployed contract.
func bindStaking(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(StakingABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Staking *StakingRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Staking.Contract.StakingCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Staking *StakingRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Staking.Contract.StakingTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Staking *StakingRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Staking.Contract.StakingTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Staking *StakingCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Staking.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Staking *StakingTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Staking.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Staking *StakingTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Staking.Contract.contract.Transact(opts, method, params...)
}

// Limit is a free data retrieval call binding the contract method 0xa4d66daf.
//
// Solidity: function limit() view returns(uint256)
func (_Staking *StakingCaller) Limit(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "limit")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Limit is a free data retrieval call binding the contract method 0xa4d66daf.
//
// Solidity: function limit() view returns(uint256)
func (_Staking *StakingSession) Limit() (*big.Int, error) {
	return _Staking.Contract.Limit(&_Staking.CallOpts)
}

// Limit is a free data retrieval call binding the contract method 0xa4d66daf.
//
// Solidity: function limit() view returns(uint256)
func (_Staking *StakingCallerSession) Limit() (*big.Int, error) {
	return _Staking.Contract.Limit(&_Staking.CallOpts)
}

// Lock is a free data retrieval call binding the contract method 0xf83d08ba.
//
// Solidity: function lock() view returns(uint256)
func (_Staking *StakingCaller) Lock(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "lock")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Lock is a free data retrieval call binding the contract method 0xf83d08ba.
//
// Solidity: function lock() view returns(uint256)
func (_Staking *StakingSession) Lock() (*big.Int, error) {
	return _Staking.Contract.Lock(&_Staking.CallOpts)
}

// Lock is a free data retrieval call binding the contract method 0xf83d08ba.
//
// Solidity: function lock() view returns(uint256)
func (_Staking *StakingCallerSession) Lock() (*big.Int, error) {
	return _Staking.Contract.Lock(&_Staking.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Staking *StakingCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Staking *StakingSession) Owner() (common.Address, error) {
	return _Staking.Contract.Owner(&_Staking.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Staking *StakingCallerSession) Owner() (common.Address, error) {
	return _Staking.Contract.Owner(&_Staking.CallOpts)
}

// SequencerContract is a free data retrieval call binding the contract method 0xa7044836.
//
// Solidity: function sequencerContract() view returns(address)
func (_Staking *StakingCaller) SequencerContract(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "sequencerContract")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// SequencerContract is a free data retrieval call binding the contract method 0xa7044836.
//
// Solidity: function sequencerContract() view returns(address)
func (_Staking *StakingSession) SequencerContract() (common.Address, error) {
	return _Staking.Contract.SequencerContract(&_Staking.CallOpts)
}

// SequencerContract is a free data retrieval call binding the contract method 0xa7044836.
//
// Solidity: function sequencerContract() view returns(address)
func (_Staking *StakingCallerSession) SequencerContract() (common.Address, error) {
	return _Staking.Contract.SequencerContract(&_Staking.CallOpts)
}

// SequencersAddr is a free data retrieval call binding the contract method 0xd3710ec5.
//
// Solidity: function sequencersAddr(uint256 ) view returns(address)
func (_Staking *StakingCaller) SequencersAddr(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "sequencersAddr", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// SequencersAddr is a free data retrieval call binding the contract method 0xd3710ec5.
//
// Solidity: function sequencersAddr(uint256 ) view returns(address)
func (_Staking *StakingSession) SequencersAddr(arg0 *big.Int) (common.Address, error) {
	return _Staking.Contract.SequencersAddr(&_Staking.CallOpts, arg0)
}

// SequencersAddr is a free data retrieval call binding the contract method 0xd3710ec5.
//
// Solidity: function sequencersAddr(uint256 ) view returns(address)
func (_Staking *StakingCallerSession) SequencersAddr(arg0 *big.Int) (common.Address, error) {
	return _Staking.Contract.SequencersAddr(&_Staking.CallOpts, arg0)
}

// SequencersBLS is a free data retrieval call binding the contract method 0x399b8b39.
//
// Solidity: function sequencersBLS(uint256 ) view returns(bytes)
func (_Staking *StakingCaller) SequencersBLS(opts *bind.CallOpts, arg0 *big.Int) ([]byte, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "sequencersBLS", arg0)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// SequencersBLS is a free data retrieval call binding the contract method 0x399b8b39.
//
// Solidity: function sequencersBLS(uint256 ) view returns(bytes)
func (_Staking *StakingSession) SequencersBLS(arg0 *big.Int) ([]byte, error) {
	return _Staking.Contract.SequencersBLS(&_Staking.CallOpts, arg0)
}

// SequencersBLS is a free data retrieval call binding the contract method 0x399b8b39.
//
// Solidity: function sequencersBLS(uint256 ) view returns(bytes)
func (_Staking *StakingCallerSession) SequencersBLS(arg0 *big.Int) ([]byte, error) {
	return _Staking.Contract.SequencersBLS(&_Staking.CallOpts, arg0)
}

// SequencersSize is a free data retrieval call binding the contract method 0xb2145280.
//
// Solidity: function sequencersSize() view returns(uint256)
func (_Staking *StakingCaller) SequencersSize(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "sequencersSize")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SequencersSize is a free data retrieval call binding the contract method 0xb2145280.
//
// Solidity: function sequencersSize() view returns(uint256)
func (_Staking *StakingSession) SequencersSize() (*big.Int, error) {
	return _Staking.Contract.SequencersSize(&_Staking.CallOpts)
}

// SequencersSize is a free data retrieval call binding the contract method 0xb2145280.
//
// Solidity: function sequencersSize() view returns(uint256)
func (_Staking *StakingCallerSession) SequencersSize() (*big.Int, error) {
	return _Staking.Contract.SequencersSize(&_Staking.CallOpts)
}

// Stakers is a free data retrieval call binding the contract method 0xfd5e6dd1.
//
// Solidity: function stakers(uint256 ) view returns(address)
func (_Staking *StakingCaller) Stakers(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "stakers", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Stakers is a free data retrieval call binding the contract method 0xfd5e6dd1.
//
// Solidity: function stakers(uint256 ) view returns(address)
func (_Staking *StakingSession) Stakers(arg0 *big.Int) (common.Address, error) {
	return _Staking.Contract.Stakers(&_Staking.CallOpts, arg0)
}

// Stakers is a free data retrieval call binding the contract method 0xfd5e6dd1.
//
// Solidity: function stakers(uint256 ) view returns(address)
func (_Staking *StakingCallerSession) Stakers(arg0 *big.Int) (common.Address, error) {
	return _Staking.Contract.Stakers(&_Staking.CallOpts, arg0)
}

// StakersNumber is a free data retrieval call binding the contract method 0xcbd679cb.
//
// Solidity: function stakersNumber() view returns(uint256)
func (_Staking *StakingCaller) StakersNumber(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "stakersNumber")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// StakersNumber is a free data retrieval call binding the contract method 0xcbd679cb.
//
// Solidity: function stakersNumber() view returns(uint256)
func (_Staking *StakingSession) StakersNumber() (*big.Int, error) {
	return _Staking.Contract.StakersNumber(&_Staking.CallOpts)
}

// StakersNumber is a free data retrieval call binding the contract method 0xcbd679cb.
//
// Solidity: function stakersNumber() view returns(uint256)
func (_Staking *StakingCallerSession) StakersNumber() (*big.Int, error) {
	return _Staking.Contract.StakersNumber(&_Staking.CallOpts)
}

// Stakings is a free data retrieval call binding the contract method 0xdc6e13e1.
//
// Solidity: function stakings(address ) view returns(address addr, bytes32 tmKey, bytes blsKey, uint256 balance)
func (_Staking *StakingCaller) Stakings(opts *bind.CallOpts, arg0 common.Address) (struct {
	Addr    common.Address
	TmKey   [32]byte
	BlsKey  []byte
	Balance *big.Int
}, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "stakings", arg0)

	outstruct := new(struct {
		Addr    common.Address
		TmKey   [32]byte
		BlsKey  []byte
		Balance *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Addr = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.TmKey = *abi.ConvertType(out[1], new([32]byte)).(*[32]byte)
	outstruct.BlsKey = *abi.ConvertType(out[2], new([]byte)).(*[]byte)
	outstruct.Balance = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// Stakings is a free data retrieval call binding the contract method 0xdc6e13e1.
//
// Solidity: function stakings(address ) view returns(address addr, bytes32 tmKey, bytes blsKey, uint256 balance)
func (_Staking *StakingSession) Stakings(arg0 common.Address) (struct {
	Addr    common.Address
	TmKey   [32]byte
	BlsKey  []byte
	Balance *big.Int
}, error) {
	return _Staking.Contract.Stakings(&_Staking.CallOpts, arg0)
}

// Stakings is a free data retrieval call binding the contract method 0xdc6e13e1.
//
// Solidity: function stakings(address ) view returns(address addr, bytes32 tmKey, bytes blsKey, uint256 balance)
func (_Staking *StakingCallerSession) Stakings(arg0 common.Address) (struct {
	Addr    common.Address
	TmKey   [32]byte
	BlsKey  []byte
	Balance *big.Int
}, error) {
	return _Staking.Contract.Stakings(&_Staking.CallOpts, arg0)
}

// Whitelist is a free data retrieval call binding the contract method 0x9b19251a.
//
// Solidity: function whitelist(address ) view returns(bool)
func (_Staking *StakingCaller) Whitelist(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "whitelist", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Whitelist is a free data retrieval call binding the contract method 0x9b19251a.
//
// Solidity: function whitelist(address ) view returns(bool)
func (_Staking *StakingSession) Whitelist(arg0 common.Address) (bool, error) {
	return _Staking.Contract.Whitelist(&_Staking.CallOpts, arg0)
}

// Whitelist is a free data retrieval call binding the contract method 0x9b19251a.
//
// Solidity: function whitelist(address ) view returns(bool)
func (_Staking *StakingCallerSession) Whitelist(arg0 common.Address) (bool, error) {
	return _Staking.Contract.Whitelist(&_Staking.CallOpts, arg0)
}

// Withdrawals is a free data retrieval call binding the contract method 0x7a9262a2.
//
// Solidity: function withdrawals(address ) view returns(uint256 balance, uint256 unlock, bool exit)
func (_Staking *StakingCaller) Withdrawals(opts *bind.CallOpts, arg0 common.Address) (struct {
	Balance *big.Int
	Unlock  *big.Int
	Exit    bool
}, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "withdrawals", arg0)

	outstruct := new(struct {
		Balance *big.Int
		Unlock  *big.Int
		Exit    bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Balance = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Unlock = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.Exit = *abi.ConvertType(out[2], new(bool)).(*bool)

	return *outstruct, err

}

// Withdrawals is a free data retrieval call binding the contract method 0x7a9262a2.
//
// Solidity: function withdrawals(address ) view returns(uint256 balance, uint256 unlock, bool exit)
func (_Staking *StakingSession) Withdrawals(arg0 common.Address) (struct {
	Balance *big.Int
	Unlock  *big.Int
	Exit    bool
}, error) {
	return _Staking.Contract.Withdrawals(&_Staking.CallOpts, arg0)
}

// Withdrawals is a free data retrieval call binding the contract method 0x7a9262a2.
//
// Solidity: function withdrawals(address ) view returns(uint256 balance, uint256 unlock, bool exit)
func (_Staking *StakingCallerSession) Withdrawals(arg0 common.Address) (struct {
	Balance *big.Int
	Unlock  *big.Int
	Exit    bool
}, error) {
	return _Staking.Contract.Withdrawals(&_Staking.CallOpts, arg0)
}

// ClaimETH is a paid mutator transaction binding the contract method 0x67272999.
//
// Solidity: function claimETH() returns()
func (_Staking *StakingTransactor) ClaimETH(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "claimETH")
}

// ClaimETH is a paid mutator transaction binding the contract method 0x67272999.
//
// Solidity: function claimETH() returns()
func (_Staking *StakingSession) ClaimETH() (*types.Transaction, error) {
	return _Staking.Contract.ClaimETH(&_Staking.TransactOpts)
}

// ClaimETH is a paid mutator transaction binding the contract method 0x67272999.
//
// Solidity: function claimETH() returns()
func (_Staking *StakingTransactorSession) ClaimETH() (*types.Transaction, error) {
	return _Staking.Contract.ClaimETH(&_Staking.TransactOpts)
}

// Initialize is a paid mutator transaction binding the contract method 0xd13f90b4.
//
// Solidity: function initialize(address _admin, address _sequencerContract, uint256 _sequencersSize, uint256 _limit, uint256 _lock) returns()
func (_Staking *StakingTransactor) Initialize(opts *bind.TransactOpts, _admin common.Address, _sequencerContract common.Address, _sequencersSize *big.Int, _limit *big.Int, _lock *big.Int) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "initialize", _admin, _sequencerContract, _sequencersSize, _limit, _lock)
}

// Initialize is a paid mutator transaction binding the contract method 0xd13f90b4.
//
// Solidity: function initialize(address _admin, address _sequencerContract, uint256 _sequencersSize, uint256 _limit, uint256 _lock) returns()
func (_Staking *StakingSession) Initialize(_admin common.Address, _sequencerContract common.Address, _sequencersSize *big.Int, _limit *big.Int, _lock *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.Initialize(&_Staking.TransactOpts, _admin, _sequencerContract, _sequencersSize, _limit, _lock)
}

// Initialize is a paid mutator transaction binding the contract method 0xd13f90b4.
//
// Solidity: function initialize(address _admin, address _sequencerContract, uint256 _sequencersSize, uint256 _limit, uint256 _lock) returns()
func (_Staking *StakingTransactorSession) Initialize(_admin common.Address, _sequencerContract common.Address, _sequencersSize *big.Int, _limit *big.Int, _lock *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.Initialize(&_Staking.TransactOpts, _admin, _sequencerContract, _sequencersSize, _limit, _lock)
}

// Register is a paid mutator transaction binding the contract method 0xfc15799d.
//
// Solidity: function register(bytes32 tmKey, bytes blsKey, uint32 _minGasLimit) payable returns()
func (_Staking *StakingTransactor) Register(opts *bind.TransactOpts, tmKey [32]byte, blsKey []byte, _minGasLimit uint32) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "register", tmKey, blsKey, _minGasLimit)
}

// Register is a paid mutator transaction binding the contract method 0xfc15799d.
//
// Solidity: function register(bytes32 tmKey, bytes blsKey, uint32 _minGasLimit) payable returns()
func (_Staking *StakingSession) Register(tmKey [32]byte, blsKey []byte, _minGasLimit uint32) (*types.Transaction, error) {
	return _Staking.Contract.Register(&_Staking.TransactOpts, tmKey, blsKey, _minGasLimit)
}

// Register is a paid mutator transaction binding the contract method 0xfc15799d.
//
// Solidity: function register(bytes32 tmKey, bytes blsKey, uint32 _minGasLimit) payable returns()
func (_Staking *StakingTransactorSession) Register(tmKey [32]byte, blsKey []byte, _minGasLimit uint32) (*types.Transaction, error) {
	return _Staking.Contract.Register(&_Staking.TransactOpts, tmKey, blsKey, _minGasLimit)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Staking *StakingTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Staking *StakingSession) RenounceOwnership() (*types.Transaction, error) {
	return _Staking.Contract.RenounceOwnership(&_Staking.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Staking *StakingTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Staking.Contract.RenounceOwnership(&_Staking.TransactOpts)
}

// Slash is a paid mutator transaction binding the contract method 0x71f8dddb.
//
// Solidity: function slash(address[] sequencers, address challenger, uint32 _minGasLimit) returns()
func (_Staking *StakingTransactor) Slash(opts *bind.TransactOpts, sequencers []common.Address, challenger common.Address, _minGasLimit uint32) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "slash", sequencers, challenger, _minGasLimit)
}

// Slash is a paid mutator transaction binding the contract method 0x71f8dddb.
//
// Solidity: function slash(address[] sequencers, address challenger, uint32 _minGasLimit) returns()
func (_Staking *StakingSession) Slash(sequencers []common.Address, challenger common.Address, _minGasLimit uint32) (*types.Transaction, error) {
	return _Staking.Contract.Slash(&_Staking.TransactOpts, sequencers, challenger, _minGasLimit)
}

// Slash is a paid mutator transaction binding the contract method 0x71f8dddb.
//
// Solidity: function slash(address[] sequencers, address challenger, uint32 _minGasLimit) returns()
func (_Staking *StakingTransactorSession) Slash(sequencers []common.Address, challenger common.Address, _minGasLimit uint32) (*types.Transaction, error) {
	return _Staking.Contract.Slash(&_Staking.TransactOpts, sequencers, challenger, _minGasLimit)
}

// StakeETH is a paid mutator transaction binding the contract method 0xd702d8aa.
//
// Solidity: function stakeETH(uint32 _minGasLimit) payable returns()
func (_Staking *StakingTransactor) StakeETH(opts *bind.TransactOpts, _minGasLimit uint32) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "stakeETH", _minGasLimit)
}

// StakeETH is a paid mutator transaction binding the contract method 0xd702d8aa.
//
// Solidity: function stakeETH(uint32 _minGasLimit) payable returns()
func (_Staking *StakingSession) StakeETH(_minGasLimit uint32) (*types.Transaction, error) {
	return _Staking.Contract.StakeETH(&_Staking.TransactOpts, _minGasLimit)
}

// StakeETH is a paid mutator transaction binding the contract method 0xd702d8aa.
//
// Solidity: function stakeETH(uint32 _minGasLimit) payable returns()
func (_Staking *StakingTransactorSession) StakeETH(_minGasLimit uint32) (*types.Transaction, error) {
	return _Staking.Contract.StakeETH(&_Staking.TransactOpts, _minGasLimit)
}

// ToggleSlash is a paid mutator transaction binding the contract method 0x59e93d1e.
//
// Solidity: function toggleSlash(bool enanble) returns()
func (_Staking *StakingTransactor) ToggleSlash(opts *bind.TransactOpts, enanble bool) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "toggleSlash", enanble)
}

// ToggleSlash is a paid mutator transaction binding the contract method 0x59e93d1e.
//
// Solidity: function toggleSlash(bool enanble) returns()
func (_Staking *StakingSession) ToggleSlash(enanble bool) (*types.Transaction, error) {
	return _Staking.Contract.ToggleSlash(&_Staking.TransactOpts, enanble)
}

// ToggleSlash is a paid mutator transaction binding the contract method 0x59e93d1e.
//
// Solidity: function toggleSlash(bool enanble) returns()
func (_Staking *StakingTransactorSession) ToggleSlash(enanble bool) (*types.Transaction, error) {
	return _Staking.Contract.ToggleSlash(&_Staking.TransactOpts, enanble)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Staking *StakingTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Staking *StakingSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Staking.Contract.TransferOwnership(&_Staking.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Staking *StakingTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Staking.Contract.TransferOwnership(&_Staking.TransactOpts, newOwner)
}

// UnpauseSequencer is a paid mutator transaction binding the contract method 0xed2fb2e1.
//
// Solidity: function unpauseSequencer() returns()
func (_Staking *StakingTransactor) UnpauseSequencer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "unpauseSequencer")
}

// UnpauseSequencer is a paid mutator transaction binding the contract method 0xed2fb2e1.
//
// Solidity: function unpauseSequencer() returns()
func (_Staking *StakingSession) UnpauseSequencer() (*types.Transaction, error) {
	return _Staking.Contract.UnpauseSequencer(&_Staking.TransactOpts)
}

// UnpauseSequencer is a paid mutator transaction binding the contract method 0xed2fb2e1.
//
// Solidity: function unpauseSequencer() returns()
func (_Staking *StakingTransactorSession) UnpauseSequencer() (*types.Transaction, error) {
	return _Staking.Contract.UnpauseSequencer(&_Staking.TransactOpts)
}

// UpdateParams is a paid mutator transaction binding the contract method 0x760b3d3a.
//
// Solidity: function updateParams(uint256 _sequencersSize, uint256 _limit, uint256 _lock, uint32 _minGasLimit) returns()
func (_Staking *StakingTransactor) UpdateParams(opts *bind.TransactOpts, _sequencersSize *big.Int, _limit *big.Int, _lock *big.Int, _minGasLimit uint32) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "updateParams", _sequencersSize, _limit, _lock, _minGasLimit)
}

// UpdateParams is a paid mutator transaction binding the contract method 0x760b3d3a.
//
// Solidity: function updateParams(uint256 _sequencersSize, uint256 _limit, uint256 _lock, uint32 _minGasLimit) returns()
func (_Staking *StakingSession) UpdateParams(_sequencersSize *big.Int, _limit *big.Int, _lock *big.Int, _minGasLimit uint32) (*types.Transaction, error) {
	return _Staking.Contract.UpdateParams(&_Staking.TransactOpts, _sequencersSize, _limit, _lock, _minGasLimit)
}

// UpdateParams is a paid mutator transaction binding the contract method 0x760b3d3a.
//
// Solidity: function updateParams(uint256 _sequencersSize, uint256 _limit, uint256 _lock, uint32 _minGasLimit) returns()
func (_Staking *StakingTransactorSession) UpdateParams(_sequencersSize *big.Int, _limit *big.Int, _lock *big.Int, _minGasLimit uint32) (*types.Transaction, error) {
	return _Staking.Contract.UpdateParams(&_Staking.TransactOpts, _sequencersSize, _limit, _lock, _minGasLimit)
}

// UpdateWhitelist is a paid mutator transaction binding the contract method 0xc7cd469a.
//
// Solidity: function updateWhitelist(address[] add, address[] remove) returns()
func (_Staking *StakingTransactor) UpdateWhitelist(opts *bind.TransactOpts, add []common.Address, remove []common.Address) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "updateWhitelist", add, remove)
}

// UpdateWhitelist is a paid mutator transaction binding the contract method 0xc7cd469a.
//
// Solidity: function updateWhitelist(address[] add, address[] remove) returns()
func (_Staking *StakingSession) UpdateWhitelist(add []common.Address, remove []common.Address) (*types.Transaction, error) {
	return _Staking.Contract.UpdateWhitelist(&_Staking.TransactOpts, add, remove)
}

// UpdateWhitelist is a paid mutator transaction binding the contract method 0xc7cd469a.
//
// Solidity: function updateWhitelist(address[] add, address[] remove) returns()
func (_Staking *StakingTransactorSession) UpdateWhitelist(add []common.Address, remove []common.Address) (*types.Transaction, error) {
	return _Staking.Contract.UpdateWhitelist(&_Staking.TransactOpts, add, remove)
}

// WithdrawETH is a paid mutator transaction binding the contract method 0xa16e0674.
//
// Solidity: function withdrawETH(uint32 _minGasLimit) payable returns()
func (_Staking *StakingTransactor) WithdrawETH(opts *bind.TransactOpts, _minGasLimit uint32) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "withdrawETH", _minGasLimit)
}

// WithdrawETH is a paid mutator transaction binding the contract method 0xa16e0674.
//
// Solidity: function withdrawETH(uint32 _minGasLimit) payable returns()
func (_Staking *StakingSession) WithdrawETH(_minGasLimit uint32) (*types.Transaction, error) {
	return _Staking.Contract.WithdrawETH(&_Staking.TransactOpts, _minGasLimit)
}

// WithdrawETH is a paid mutator transaction binding the contract method 0xa16e0674.
//
// Solidity: function withdrawETH(uint32 _minGasLimit) payable returns()
func (_Staking *StakingTransactorSession) WithdrawETH(_minGasLimit uint32) (*types.Transaction, error) {
	return _Staking.Contract.WithdrawETH(&_Staking.TransactOpts, _minGasLimit)
}

// StakingClaimedIterator is returned from FilterClaimed and is used to iterate over the raw logs and unpacked data for Claimed events raised by the Staking contract.
type StakingClaimedIterator struct {
	Event *StakingClaimed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingClaimedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingClaimed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingClaimed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingClaimedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingClaimedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingClaimed represents a Claimed event raised by the Staking contract.
type StakingClaimed struct {
	Addr    common.Address
	Balance *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterClaimed is a free log retrieval operation binding the contract event 0xd8138f8a3f377c5259ca548e70e4c2de94f129f5a11036a15b69513cba2b426a.
//
// Solidity: event Claimed(address addr, uint256 balance)
func (_Staking *StakingFilterer) FilterClaimed(opts *bind.FilterOpts) (*StakingClaimedIterator, error) {

	logs, sub, err := _Staking.contract.FilterLogs(opts, "Claimed")
	if err != nil {
		return nil, err
	}
	return &StakingClaimedIterator{contract: _Staking.contract, event: "Claimed", logs: logs, sub: sub}, nil
}

// WatchClaimed is a free log subscription operation binding the contract event 0xd8138f8a3f377c5259ca548e70e4c2de94f129f5a11036a15b69513cba2b426a.
//
// Solidity: event Claimed(address addr, uint256 balance)
func (_Staking *StakingFilterer) WatchClaimed(opts *bind.WatchOpts, sink chan<- *StakingClaimed) (event.Subscription, error) {

	logs, sub, err := _Staking.contract.WatchLogs(opts, "Claimed")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingClaimed)
				if err := _Staking.contract.UnpackLog(event, "Claimed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseClaimed is a log parse operation binding the contract event 0xd8138f8a3f377c5259ca548e70e4c2de94f129f5a11036a15b69513cba2b426a.
//
// Solidity: event Claimed(address addr, uint256 balance)
func (_Staking *StakingFilterer) ParseClaimed(log types.Log) (*StakingClaimed, error) {
	event := new(StakingClaimed)
	if err := _Staking.contract.UnpackLog(event, "Claimed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingEnableSlashIterator is returned from FilterEnableSlash and is used to iterate over the raw logs and unpacked data for EnableSlash events raised by the Staking contract.
type StakingEnableSlashIterator struct {
	Event *StakingEnableSlash // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingEnableSlashIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingEnableSlash)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingEnableSlash)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingEnableSlashIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingEnableSlashIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingEnableSlash represents a EnableSlash event raised by the Staking contract.
type StakingEnableSlash struct {
	Enable bool
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterEnableSlash is a free log retrieval operation binding the contract event 0xfa7e1498ad96b6cd4d37fadb6f9acacfe7132535ad7f9758ea408b1105226ba5.
//
// Solidity: event EnableSlash(bool enable)
func (_Staking *StakingFilterer) FilterEnableSlash(opts *bind.FilterOpts) (*StakingEnableSlashIterator, error) {

	logs, sub, err := _Staking.contract.FilterLogs(opts, "EnableSlash")
	if err != nil {
		return nil, err
	}
	return &StakingEnableSlashIterator{contract: _Staking.contract, event: "EnableSlash", logs: logs, sub: sub}, nil
}

// WatchEnableSlash is a free log subscription operation binding the contract event 0xfa7e1498ad96b6cd4d37fadb6f9acacfe7132535ad7f9758ea408b1105226ba5.
//
// Solidity: event EnableSlash(bool enable)
func (_Staking *StakingFilterer) WatchEnableSlash(opts *bind.WatchOpts, sink chan<- *StakingEnableSlash) (event.Subscription, error) {

	logs, sub, err := _Staking.contract.WatchLogs(opts, "EnableSlash")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingEnableSlash)
				if err := _Staking.contract.UnpackLog(event, "EnableSlash", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEnableSlash is a log parse operation binding the contract event 0xfa7e1498ad96b6cd4d37fadb6f9acacfe7132535ad7f9758ea408b1105226ba5.
//
// Solidity: event EnableSlash(bool enable)
func (_Staking *StakingFilterer) ParseEnableSlash(log types.Log) (*StakingEnableSlash, error) {
	event := new(StakingEnableSlash)
	if err := _Staking.contract.UnpackLog(event, "EnableSlash", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the Staking contract.
type StakingInitializedIterator struct {
	Event *StakingInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingInitialized represents a Initialized event raised by the Staking contract.
type StakingInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Staking *StakingFilterer) FilterInitialized(opts *bind.FilterOpts) (*StakingInitializedIterator, error) {

	logs, sub, err := _Staking.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &StakingInitializedIterator{contract: _Staking.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Staking *StakingFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *StakingInitialized) (event.Subscription, error) {

	logs, sub, err := _Staking.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingInitialized)
				if err := _Staking.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Staking *StakingFilterer) ParseInitialized(log types.Log) (*StakingInitialized, error) {
	event := new(StakingInitialized)
	if err := _Staking.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Staking contract.
type StakingOwnershipTransferredIterator struct {
	Event *StakingOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingOwnershipTransferred represents a OwnershipTransferred event raised by the Staking contract.
type StakingOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Staking *StakingFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*StakingOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Staking.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &StakingOwnershipTransferredIterator{contract: _Staking.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Staking *StakingFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *StakingOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Staking.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingOwnershipTransferred)
				if err := _Staking.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Staking *StakingFilterer) ParseOwnershipTransferred(log types.Log) (*StakingOwnershipTransferred, error) {
	event := new(StakingOwnershipTransferred)
	if err := _Staking.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingParamsUpdatedIterator is returned from FilterParamsUpdated and is used to iterate over the raw logs and unpacked data for ParamsUpdated events raised by the Staking contract.
type StakingParamsUpdatedIterator struct {
	Event *StakingParamsUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingParamsUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingParamsUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingParamsUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingParamsUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingParamsUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingParamsUpdated represents a ParamsUpdated event raised by the Staking contract.
type StakingParamsUpdated struct {
	SequencersSize *big.Int
	Limit          *big.Int
	Lock           *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterParamsUpdated is a free log retrieval operation binding the contract event 0x0cba168cfa7900657e5f8cc53d6f52ebbfa3a9f568941b465cc4f731c60c95b2.
//
// Solidity: event ParamsUpdated(uint256 _sequencersSize, uint256 _limit, uint256 _lock)
func (_Staking *StakingFilterer) FilterParamsUpdated(opts *bind.FilterOpts) (*StakingParamsUpdatedIterator, error) {

	logs, sub, err := _Staking.contract.FilterLogs(opts, "ParamsUpdated")
	if err != nil {
		return nil, err
	}
	return &StakingParamsUpdatedIterator{contract: _Staking.contract, event: "ParamsUpdated", logs: logs, sub: sub}, nil
}

// WatchParamsUpdated is a free log subscription operation binding the contract event 0x0cba168cfa7900657e5f8cc53d6f52ebbfa3a9f568941b465cc4f731c60c95b2.
//
// Solidity: event ParamsUpdated(uint256 _sequencersSize, uint256 _limit, uint256 _lock)
func (_Staking *StakingFilterer) WatchParamsUpdated(opts *bind.WatchOpts, sink chan<- *StakingParamsUpdated) (event.Subscription, error) {

	logs, sub, err := _Staking.contract.WatchLogs(opts, "ParamsUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingParamsUpdated)
				if err := _Staking.contract.UnpackLog(event, "ParamsUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseParamsUpdated is a log parse operation binding the contract event 0x0cba168cfa7900657e5f8cc53d6f52ebbfa3a9f568941b465cc4f731c60c95b2.
//
// Solidity: event ParamsUpdated(uint256 _sequencersSize, uint256 _limit, uint256 _lock)
func (_Staking *StakingFilterer) ParseParamsUpdated(log types.Log) (*StakingParamsUpdated, error) {
	event := new(StakingParamsUpdated)
	if err := _Staking.contract.UnpackLog(event, "ParamsUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingRegisteredIterator is returned from FilterRegistered and is used to iterate over the raw logs and unpacked data for Registered events raised by the Staking contract.
type StakingRegisteredIterator struct {
	Event *StakingRegistered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingRegisteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingRegistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingRegistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingRegisteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingRegisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingRegistered represents a Registered event raised by the Staking contract.
type StakingRegistered struct {
	Addr    common.Address
	TmKey   [32]byte
	BlsKey  []byte
	Balance *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRegistered is a free log retrieval operation binding the contract event 0xb7f230b53b0f914ccf820ab0618ac8320e984eeb0fb6a740785cf7fdc3b5cee3.
//
// Solidity: event Registered(address addr, bytes32 tmKey, bytes blsKey, uint256 balance)
func (_Staking *StakingFilterer) FilterRegistered(opts *bind.FilterOpts) (*StakingRegisteredIterator, error) {

	logs, sub, err := _Staking.contract.FilterLogs(opts, "Registered")
	if err != nil {
		return nil, err
	}
	return &StakingRegisteredIterator{contract: _Staking.contract, event: "Registered", logs: logs, sub: sub}, nil
}

// WatchRegistered is a free log subscription operation binding the contract event 0xb7f230b53b0f914ccf820ab0618ac8320e984eeb0fb6a740785cf7fdc3b5cee3.
//
// Solidity: event Registered(address addr, bytes32 tmKey, bytes blsKey, uint256 balance)
func (_Staking *StakingFilterer) WatchRegistered(opts *bind.WatchOpts, sink chan<- *StakingRegistered) (event.Subscription, error) {

	logs, sub, err := _Staking.contract.WatchLogs(opts, "Registered")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingRegistered)
				if err := _Staking.contract.UnpackLog(event, "Registered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRegistered is a log parse operation binding the contract event 0xb7f230b53b0f914ccf820ab0618ac8320e984eeb0fb6a740785cf7fdc3b5cee3.
//
// Solidity: event Registered(address addr, bytes32 tmKey, bytes blsKey, uint256 balance)
func (_Staking *StakingFilterer) ParseRegistered(log types.Log) (*StakingRegistered, error) {
	event := new(StakingRegistered)
	if err := _Staking.contract.UnpackLog(event, "Registered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingStakedIterator is returned from FilterStaked and is used to iterate over the raw logs and unpacked data for Staked events raised by the Staking contract.
type StakingStakedIterator struct {
	Event *StakingStaked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingStakedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingStaked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingStaked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingStakedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingStakedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingStaked represents a Staked event raised by the Staking contract.
type StakingStaked struct {
	Addr    common.Address
	Balance *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterStaked is a free log retrieval operation binding the contract event 0x9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d.
//
// Solidity: event Staked(address addr, uint256 balance)
func (_Staking *StakingFilterer) FilterStaked(opts *bind.FilterOpts) (*StakingStakedIterator, error) {

	logs, sub, err := _Staking.contract.FilterLogs(opts, "Staked")
	if err != nil {
		return nil, err
	}
	return &StakingStakedIterator{contract: _Staking.contract, event: "Staked", logs: logs, sub: sub}, nil
}

// WatchStaked is a free log subscription operation binding the contract event 0x9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d.
//
// Solidity: event Staked(address addr, uint256 balance)
func (_Staking *StakingFilterer) WatchStaked(opts *bind.WatchOpts, sink chan<- *StakingStaked) (event.Subscription, error) {

	logs, sub, err := _Staking.contract.WatchLogs(opts, "Staked")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingStaked)
				if err := _Staking.contract.UnpackLog(event, "Staked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStaked is a log parse operation binding the contract event 0x9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d.
//
// Solidity: event Staked(address addr, uint256 balance)
func (_Staking *StakingFilterer) ParseStaked(log types.Log) (*StakingStaked, error) {
	event := new(StakingStaked)
	if err := _Staking.contract.UnpackLog(event, "Staked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingWhitelistUpdatedIterator is returned from FilterWhitelistUpdated and is used to iterate over the raw logs and unpacked data for WhitelistUpdated events raised by the Staking contract.
type StakingWhitelistUpdatedIterator struct {
	Event *StakingWhitelistUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingWhitelistUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingWhitelistUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingWhitelistUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingWhitelistUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingWhitelistUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingWhitelistUpdated represents a WhitelistUpdated event raised by the Staking contract.
type StakingWhitelistUpdated struct {
	Add    []common.Address
	Remove []common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterWhitelistUpdated is a free log retrieval operation binding the contract event 0xe375867e538b40218c1b3db2ccceaf875eb073e38b510449e6088c1539ac8622.
//
// Solidity: event WhitelistUpdated(address[] add, address[] remove)
func (_Staking *StakingFilterer) FilterWhitelistUpdated(opts *bind.FilterOpts) (*StakingWhitelistUpdatedIterator, error) {

	logs, sub, err := _Staking.contract.FilterLogs(opts, "WhitelistUpdated")
	if err != nil {
		return nil, err
	}
	return &StakingWhitelistUpdatedIterator{contract: _Staking.contract, event: "WhitelistUpdated", logs: logs, sub: sub}, nil
}

// WatchWhitelistUpdated is a free log subscription operation binding the contract event 0xe375867e538b40218c1b3db2ccceaf875eb073e38b510449e6088c1539ac8622.
//
// Solidity: event WhitelistUpdated(address[] add, address[] remove)
func (_Staking *StakingFilterer) WatchWhitelistUpdated(opts *bind.WatchOpts, sink chan<- *StakingWhitelistUpdated) (event.Subscription, error) {

	logs, sub, err := _Staking.contract.WatchLogs(opts, "WhitelistUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingWhitelistUpdated)
				if err := _Staking.contract.UnpackLog(event, "WhitelistUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWhitelistUpdated is a log parse operation binding the contract event 0xe375867e538b40218c1b3db2ccceaf875eb073e38b510449e6088c1539ac8622.
//
// Solidity: event WhitelistUpdated(address[] add, address[] remove)
func (_Staking *StakingFilterer) ParseWhitelistUpdated(log types.Log) (*StakingWhitelistUpdated, error) {
	event := new(StakingWhitelistUpdated)
	if err := _Staking.contract.UnpackLog(event, "WhitelistUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingWithdrawedIterator is returned from FilterWithdrawed and is used to iterate over the raw logs and unpacked data for Withdrawed events raised by the Staking contract.
type StakingWithdrawedIterator struct {
	Event *StakingWithdrawed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingWithdrawedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingWithdrawed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingWithdrawed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingWithdrawedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingWithdrawedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingWithdrawed represents a Withdrawed event raised by the Staking contract.
type StakingWithdrawed struct {
	Addr    common.Address
	Balance *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterWithdrawed is a free log retrieval operation binding the contract event 0x6cca423c6ffc06e62a0acc433965e074b11c28479b0449250ce3ff65ac9e39fe.
//
// Solidity: event Withdrawed(address addr, uint256 balance)
func (_Staking *StakingFilterer) FilterWithdrawed(opts *bind.FilterOpts) (*StakingWithdrawedIterator, error) {

	logs, sub, err := _Staking.contract.FilterLogs(opts, "Withdrawed")
	if err != nil {
		return nil, err
	}
	return &StakingWithdrawedIterator{contract: _Staking.contract, event: "Withdrawed", logs: logs, sub: sub}, nil
}

// WatchWithdrawed is a free log subscription operation binding the contract event 0x6cca423c6ffc06e62a0acc433965e074b11c28479b0449250ce3ff65ac9e39fe.
//
// Solidity: event Withdrawed(address addr, uint256 balance)
func (_Staking *StakingFilterer) WatchWithdrawed(opts *bind.WatchOpts, sink chan<- *StakingWithdrawed) (event.Subscription, error) {

	logs, sub, err := _Staking.contract.WatchLogs(opts, "Withdrawed")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingWithdrawed)
				if err := _Staking.contract.UnpackLog(event, "Withdrawed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdrawed is a log parse operation binding the contract event 0x6cca423c6ffc06e62a0acc433965e074b11c28479b0449250ce3ff65ac9e39fe.
//
// Solidity: event Withdrawed(address addr, uint256 balance)
func (_Staking *StakingFilterer) ParseWithdrawed(log types.Log) (*StakingWithdrawed, error) {
	event := new(StakingWithdrawed)
	if err := _Staking.contract.UnpackLog(event, "Withdrawed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
