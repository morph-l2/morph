// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package bindings

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/scroll-tech/go-ethereum"
	"github.com/scroll-tech/go-ethereum/accounts/abi"
	"github.com/scroll-tech/go-ethereum/accounts/abi/bind"
	"github.com/scroll-tech/go-ethereum/common"
	"github.com/scroll-tech/go-ethereum/core/types"
	"github.com/scroll-tech/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// StakingMetaData contains all meta data concerning the Staking contract.
var StakingMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_sequencersSize\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_lock\",\"type\":\"uint256\"}],\"name\":\"ParamsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"tmKey\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"blsKey\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"Registered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"add\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"remove\",\"type\":\"address[]\"}],\"name\":\"WhitelistUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"Withdrawed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"claimETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sequencerContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_sequencersSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lock\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"tmKey\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"blsKey\",\"type\":\"bytes\"},{\"internalType\":\"uint32\",\"name\":\"_minGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_gasFee\",\"type\":\"uint256\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sequencerContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sequencersAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sequencersBLS\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sequencersSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"sequencers\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_minGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_gasFee\",\"type\":\"uint256\"}],\"name\":\"slash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_minGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_gasFee\",\"type\":\"uint256\"}],\"name\":\"stakeETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakersNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakings\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"tmKey\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"blsKey\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enanble\",\"type\":\"bool\"}],\"name\":\"toggleSlash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpauseSequencer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sequencersSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lock\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_minGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_gasFee\",\"type\":\"uint256\"}],\"name\":\"updateParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"add\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"remove\",\"type\":\"address[]\"}],\"name\":\"updateWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_minGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_gasFee\",\"type\":\"uint256\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlock\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"exit\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x6080604052606c805460ff191690555f606d5534801561001d575f80fd5b50612fe18061002b5f395ff3fe608060405260043610610183575f3560e01c8063a4d66daf116100d1578063d3710ec51161007c578063f2fde38b11610057578063f2fde38b14610450578063f83d08ba1461046f578063fd5e6dd114610484575f80fd5b8063d3710ec5146103ee578063dc6e13e11461040d578063ed2fb2e11461043c575f80fd5b8063c7cd469a116100ac578063c7cd469a1461039c578063cbd679cb146103bb578063d13f90b4146103cf575f80fd5b8063a4d66daf14610345578063a704483614610368578063b214528014610387575f80fd5b8063715018a6116101315780638da5cb5b1161010c5780638da5cb5b146102c35780639131f724146102f45780639b19251a14610307575f80fd5b8063715018a6146102365780637a9262a21461024a578063825108df146102a4575f80fd5b80634e073694116101615780634e073694146101e457806359e93d1e146102035780636727299914610222575f80fd5b80631b9346ed14610187578063222227601461019c578063399b8b39146101af575b5f80fd5b61019a610195366004612609565b6104a3565b005b61019a6101aa3660046126b9565b610c37565b3480156101ba575f80fd5b506101ce6101c93660046126e1565b61102c565b6040516101db919061273b565b60405180910390f35b3480156101ef575f80fd5b5061019a6101fe366004612754565b6110d2565b34801561020e575f80fd5b5061019a61021d366004612797565b6111ce565b34801561022d575f80fd5b5061019a6111e9565b348015610241575f80fd5b5061019a611321565b348015610255575f80fd5b506102876102643660046127cc565b606b6020525f908152604090208054600182015460029092015490919060ff1683565b6040805193845260208401929092521515908201526060016101db565b3480156102af575f80fd5b5061019a6102be3660046127e5565b611334565b3480156102ce575f80fd5b506033546001600160a01b03165b6040516001600160a01b0390911681526020016101db565b61019a6103023660046126b9565b6115c5565b348015610312575f80fd5b506103356103213660046127cc565b60686020525f908152604090205460ff1681565b60405190151581526020016101db565b348015610350575f80fd5b5061035a60665481565b6040519081526020016101db565b348015610373575f80fd5b506065546102dc906001600160a01b031681565b348015610392575f80fd5b5061035a606d5481565b3480156103a7575f80fd5b5061019a6103b63660046128ee565b611893565b3480156103c6575f80fd5b5060695461035a565b3480156103da575f80fd5b5061019a6103e9366004612955565b6119a9565b3480156103f9575f80fd5b506102dc6104083660046126e1565b611c85565b348015610418575f80fd5b5061042c6104273660046127cc565b611cad565b6040516101db949392919061299e565b348015610447575f80fd5b5061019a611d65565b34801561045b575f80fd5b5061019a61046a3660046127cc565b611dcb565b34801561047a575f80fd5b5061035a60675481565b34801561048f575f80fd5b506102dc61049e3660046126e1565b611e5b565b335f9081526068602052604090205460ff166105065760405162461bcd60e51b815260206004820152601060248201527f6e6f7420696e2077686974656c6973740000000000000000000000000000000060448201526064015b60405180910390fd5b5f805b60695481101561055a57336001600160a01b031660698281548110610530576105306129d6565b5f918252602090912001546001600160a01b031603610552576001915061055a565b600101610509565b5080156105a95760405162461bcd60e51b815260206004820152601260248201527f616c72656164792072656769737465726564000000000000000000000000000060448201526064016104fd565b335f908152606b602052604090206002015460ff161561060b5760405162461bcd60e51b815260206004820152601060248201527f7374616b6572206973206578697465640000000000000000000000000000000060448201526064016104fd565b5f606d54116106825760405162461bcd60e51b815260206004820152602260248201527f73657175656e6365727353697a65206d7573742067726561746572207468616e60448201527f203000000000000000000000000000000000000000000000000000000000000060648201526084016104fd565b5f8590036106d25760405162461bcd60e51b815260206004820152601960248201527f696e76616c69642074656e6465726d696e74207075626b65790000000000000060448201526064016104fd565b8351610100146107245760405162461bcd60e51b815260206004820152601260248201527f696e76616c696420626c73207075626b6579000000000000000000000000000060448201526064016104fd565b5f606654118015610741575060665461073d9083612a30565b3410155b61078d5760405162461bcd60e51b815260206004820152601b60248201527f7374616b696e672076616c7565206973206e6f7420656e6f756768000000000060448201526064016104fd565b5f6107988334612a49565b90505f5b6069548110156108e15786606a5f606984815481106107bd576107bd6129d6565b5f9182526020808320909101546001600160a01b03168352820192909252604001902060010154036108315760405162461bcd60e51b815260206004820152601860248201527f746d4b657920616c72656164792072656769737465726564000000000000000060448201526064016104fd565b8580519060200120606a5f6069848154811061084f5761084f6129d6565b5f9182526020808320909101546001600160a01b03168352820192909252604090810190912090516108849160020190612aad565b6040518091039020036108d95760405162461bcd60e51b815260206004820152601960248201527f626c734b657920616c726561647920726567697374657265640000000000000060448201526064016104fd565b60010161079c565b50604080516080810182523380825260208083018a81528385018a8152606085018790525f938452606a90925293909120825181547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03909116178155925160018401555190919060028201906109609082612b63565b5060609190910151600390910155606980546001810182555f919091527f7fb4302e8e91f9110a6554c2c0a24601252c2a42c2220ca988efcfe3999143080180547fffffffffffffffffffffffff000000000000000000000000000000000000000016339081179091556040517fb7f230b53b0f914ccf820ab0618ac8320e984eeb0fb6a740785cf7fdc3b5cee3916109fe9189908990869061299e565b60405180910390a16069545f90610a1790600190612a49565b90505b8015610bc457606a5f6069610a30600185612a49565b81548110610a4057610a406129d6565b905f5260205f20015f9054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020019081526020015f2060030154606a5f60698481548110610a9457610a946129d6565b5f9182526020808320909101546001600160a01b031683528201929092526040019020600301541115610bad575f6069610acf600184612a49565b81548110610adf57610adf6129d6565b5f91825260209091200154606980546001600160a01b0390921692509083908110610b0c57610b0c6129d6565b5f918252602090912001546001600160a01b03166069610b2d600185612a49565b81548110610b3d57610b3d6129d6565b905f5260205f20015f6101000a8154816001600160a01b0302191690836001600160a01b031602179055508060698381548110610b7c57610b7c6129d6565b905f5260205f20015f6101000a8154816001600160a01b0302191690836001600160a01b0316021790555050610bb2565b610bc4565b80610bbc81612c1f565b915050610a1a565b606c5460ff16158015610bda5750606d54606954145b15610bfd57606c805460ff19166001179055610bf68585611e6a565b5050610c30565b606c5460ff168015610c1e5750606d54606954111580610c1e5750606d5481105b15610c2d57610c2d8585611e6a565b50505b5050505050565b335f9081526068602052604090205460ff16610c955760405162461bcd60e51b815260206004820152601060248201527f6e6f7420696e2077686974656c6973740000000000000000000000000000000060448201526064016104fd565b5f805b606954811015610ce957336001600160a01b031660698281548110610cbf57610cbf6129d6565b5f918252602090912001546001600160a01b031603610ce15760019150610ce9565b600101610c98565b5080610d375760405162461bcd60e51b815260206004820152601060248201527f7374616b6572206e6f742065786973740000000000000000000000000000000060448201526064016104fd565b5f606654118015610d4757505f34115b8015610d705750606654335f908152606a6020526040902060030154610d6e903490612a30565b115b610dbc5760405162461bcd60e51b815260206004820152601860248201527f7374616b696e672076616c7565206e6f7420656e6f756768000000000000000060448201526064016104fd565b335f908152606a602052604081206003018054349290610ddd908490612a30565b9091555050335f818152606a6020908152604091829020600301548251938452908301527f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d910160405180910390a15f610e36336122f0565b6069549091505f90610e4a90600190612a49565b90505b8015610fee57606a5f6069610e63600185612a49565b81548110610e7357610e736129d6565b905f5260205f20015f9054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020019081526020015f2060030154606a5f60698481548110610ec757610ec76129d6565b5f9182526020808320909101546001600160a01b031683528201929092526040019020600301541115610fdc575f6069610f02600184612a49565b81548110610f1257610f126129d6565b5f91825260209091200154606980546001600160a01b0390921692509083908110610f3f57610f3f6129d6565b5f918252602090912001546001600160a01b03166069610f60600185612a49565b81548110610f7057610f706129d6565b905f5260205f20015f6101000a8154816001600160a01b0302191690836001600160a01b031602179055508060698381548110610faf57610faf6129d6565b905f5260205f20015f6101000a8154816001600160a01b0302191690836001600160a01b03160217905550505b80610fe681612c1f565b915050610e4d565b505f610ff9336122f0565b606c5490915060ff1680156110105750606d548210155b801561101d5750606d5481105b15610c3057610c308585611e6a565b606f818154811061103b575f80fd5b905f5260205f20015f91509050805461105390612a5c565b80601f016020809104026020016040519081016040528092919081815260200182805461107f90612a5c565b80156110ca5780601f106110a1576101008083540402835291602001916110ca565b820191905f5260205f20905b8154815290600101906020018083116110ad57829003601f168201915b505050505081565b6110da61238a565b606d5485141580156110ee57506069548510155b80156110f957505f85115b6111455760405162461bcd60e51b815260206004820152601b60248201527f696e76616c6964206e65772073657175656e636572732073697a65000000000060448201526064016104fd565b83156111515760668490555b821561115d5760678390555b606954606d54101561117d57606d8590556111788282611e6a565b610c30565b606d8590556066546067546040805188815260208101939093528201527f0cba168cfa7900657e5f8cc53d6f52ebbfa3a9f568941b465cc4f731c60c95b29060600160405180910390a15050505050565b6111d661238a565b6070805460ff1916911515919091179055565b335f908152606b602052604090206002015460ff1680156112175750335f908152606b602052604090205415155b80156112335750335f908152606b602052604090206001015443115b61127f5760405162461bcd60e51b815260206004820152601260248201527f696e76616c6964207769746864726177616c000000000000000000000000000060448201526064016104fd565b335f818152606b602052604080822054905181156108fc0292818181858888f193505050501580156112b3573d5f803e3d5ffd5b50335f818152606b6020908152604091829020548251938452908301527fd8138f8a3f377c5259ca548e70e4c2de94f129f5a11036a15b69513cba2b426a910160405180910390a1335f908152606b602052604081208181556001810191909155600201805460ff19169055565b61132961238a565b6113325f6123e4565b565b6065546001600160a01b0316331461138e5760405162461bcd60e51b815260206004820152601760248201527f6f6e6c792073657175656e63657220636f6e747261637400000000000000000060448201526064016104fd565b60705460ff16156115bf575f805b855181101561153e575f8682815181106113b8576113b86129d6565b60200260200101519050606a5f826001600160a01b03166001600160a01b031681526020019081526020015f2060030154836113f49190612a30565b92505f611400826122f0565b9050805b60695461141390600190612a49565b8110156114aa576069611427826001612a30565b81548110611437576114376129d6565b5f91825260209091200154606980546001600160a01b039092169183908110611462576114626129d6565b5f91825260209091200180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055600101611404565b5060698054806114bc576114bc612c34565b5f828152602080822083015f1990810180547fffffffffffffffffffffffff000000000000000000000000000000000000000090811690915593019093556001600160a01b0385168152606a9092526040822080549091168155600181018290559061152b60028301826124f2565b505f60039190910155505060010161139c565b506115498383611e6a565b6069545f036115b55760655f9054906101000a90046001600160a01b03166001600160a01b0316638456cb596040518163ffffffff1660e01b81526004015f604051808303815f87803b15801561159e575f80fd5b505af11580156115b0573d5f803e3d5ffd5b505050505b610c30848261244d565b50505050565b335f908152606b602052604090206002015460ff16156116275760405162461bcd60e51b815260206004820152601060248201527f7374616b6572206973206578697465640000000000000000000000000000000060448201526064016104fd565b5f611631336122f0565b60408051606081018252335f908152606a602090815292902060030154815260675492935091908201906116659043612a30565b815260016020918201819052335f818152606b845260409081902085518082558686015194820194909455948101516002909501805460ff1916951515959095179094558351908152918201527f6cca423c6ffc06e62a0acc433965e074b11c28479b0449250ce3ff65ac9e39fe910160405180910390a1805b6069546116ee90600190612a49565b811015611785576069611702826001612a30565b81548110611712576117126129d6565b5f91825260209091200154606980546001600160a01b03909216918390811061173d5761173d6129d6565b5f91825260209091200180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03929092169190911790556001016116df565b50606980548061179757611797612c34565b5f828152602080822083015f1990810180547fffffffffffffffffffffffff00000000000000000000000000000000000000009081169091559301909355338152606a909252604082208054909116815560018101829055906117fd60028301826124f2565b505f60039190910181905560695490036118795761181b8383611e6a565b60655f9054906101000a90046001600160a01b03166001600160a01b0316638456cb596040518163ffffffff1660e01b81526004015f604051808303815f87803b158015611867575f80fd5b505af1158015610c2d573d5f803e3d5ffd5b606d5481101561188d5761188d8383611e6a565b505b5050565b61189b61238a565b5f5b8381101561190057600160685f8787858181106118bc576118bc6129d6565b90506020020160208101906118d191906127cc565b6001600160a01b0316815260208101919091526040015f20805460ff191691151591909117905560010161189d565b505f5b81811015611965575f60685f858585818110611921576119216129d6565b905060200201602081019061193691906127cc565b6001600160a01b0316815260208101919091526040015f20805460ff1916911515919091179055600101611903565b507fe375867e538b40218c1b3db2ccceaf875eb073e38b510449e6088c1539ac86228484848460405161199b9493929190612ca6565b60405180910390a150505050565b5f54610100900460ff16158080156119c757505f54600160ff909116105b806119e05750303b1580156119e057505f5460ff166001145b611a525760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016104fd565b5f805460ff191660011790558015611a90575f80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b6001600160a01b038516611ae65760405162461bcd60e51b815260206004820152601a60248201527f696e76616c69642073657175656e63657220636f6e747261637400000000000060448201526064016104fd565b5f8411611b5b5760405162461bcd60e51b815260206004820152602260248201527f73657175656e6365727353697a65206d7573742067726561746572207468616e60448201527f203000000000000000000000000000000000000000000000000000000000000060648201526084016104fd565b5f8311611bd05760405162461bcd60e51b815260206004820152602160248201527f7374616b696e67206c696d6974206d7573742067726561746572207468616e2060448201527f300000000000000000000000000000000000000000000000000000000000000060648201526084016104fd565b606580547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b038716179055606d84905560668390556067829055611c1b866123e4565b8015611c7d575f80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050505050565b606e8181548110611c94575f80fd5b5f918252602090912001546001600160a01b0316905081565b606a6020525f90815260409020805460018201546002830180546001600160a01b03909316939192611cde90612a5c565b80601f0160208091040260200160405190810160405280929190818152602001828054611d0a90612a5c565b8015611d555780601f10611d2c57610100808354040283529160200191611d55565b820191905f5260205f20905b815481529060010190602001808311611d3857829003601f168201915b5050505050908060030154905084565b611d6d61238a565b60655f9054906101000a90046001600160a01b03166001600160a01b0316633f4ba83a6040518163ffffffff1660e01b81526004015f604051808303815f87803b158015611db9575f80fd5b505af11580156115bf573d5f803e3d5ffd5b611dd361238a565b6001600160a01b038116611e4f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016104fd565b611e58816123e4565b50565b60698181548110611c94575f80fd5b611e75606e5f612529565b611e80606f5f612544565b606d54606954811115611e9257506069545b5f8167ffffffffffffffff811115611eac57611eac612593565b604051908082528060200260200182016040528015611ef857816020015b60408051606080820183525f808352602083015291810191909152815260200190600190039081611eca5790505b5090505f5b8281101561217f57606e606a5f60698481548110611f1d57611f1d6129d6565b5f9182526020808320909101546001600160a01b039081168452838201949094526040909201812054845460018101865594825291812090930180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169190921617905560698054606f92606a92909185908110611f9e57611f9e6129d6565b5f9182526020808320909101546001600160a01b031683528281019390935260409091018120835460018101855593825291902090910190611fe39060020182612cd7565b506040518060600160405280606a5f60698581548110612005576120056129d6565b5f9182526020808320909101546001600160a01b0390811684528382019490945260409092018120549092168352606980549390910192606a92919086908110612051576120516129d6565b905f5260205f20015f9054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020019081526020015f20600101548152602001606a5f606985815481106120aa576120aa6129d6565b5f9182526020808320909101546001600160a01b03168352820192909252604001902060020180546120db90612a5c565b80601f016020809104026020016040519081016040528092919081815260200182805461210790612a5c565b80156121525780601f1061212957610100808354040283529160200191612152565b820191905f5260205f20905b81548152906001019060200180831161213557829003601f168201915b505050505081525082828151811061216c5761216c6129d6565b6020908102919091010152600101611efd565b505f63ad01732f60e01b60655f9054906101000a90046001600160a01b03166001600160a01b03166373452a926040518163ffffffff1660e01b8152600401602060405180830381865afa1580156121d9573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906121fd9190612da2565b612208906001612a30565b8360405160240161221a929190612db9565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526065549091506001600160a01b031663e73a6ba88583606e606f8a61229b3390565b6040518763ffffffff1660e01b81526004016122bb959493929190612e66565b5f604051808303818588803b1580156122d2575f80fd5b505af11580156122e4573d5f803e3d5ffd5b50505050505050505050565b5f805b60695481101561234157826001600160a01b03166069828154811061231a5761231a6129d6565b5f918252602090912001546001600160a01b0316036123395792915050565b6001016122f3565b5060405162461bcd60e51b815260206004820152601060248201527f7374616b6572206e6f742065786973740000000000000000000000000000000060448201526064016104fd565b6033546001600160a01b031633146113325760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104fd565b603380546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35050565b801561188f575f826001600160a01b0316826040515f6040518083038185875af1925050503d805f811461249c576040519150601f19603f3d011682016040523d82523d5f602084013e6124a1565b606091505b505090508061188d5760405162461bcd60e51b815260206004820152601b60248201527f526f6c6c75703a20455448207472616e73666572206661696c6564000000000060448201526064016104fd565b5080546124fe90612a5c565b5f825580601f1061250d575050565b601f0160209004905f5260205f2090810190611e58919061255f565b5080545f8255905f5260205f2090810190611e58919061255f565b5080545f8255905f5260205f2090810190611e589190612577565b5b80821115612573575f8155600101612560565b5090565b80821115612573575f61258a82826124f2565b50600101612577565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b604051601f8201601f1916810167ffffffffffffffff811182821017156125e9576125e9612593565b604052919050565b803563ffffffff81168114612604575f80fd5b919050565b5f805f806080858703121561261c575f80fd5b8435935060208086013567ffffffffffffffff8082111561263b575f80fd5b818801915088601f83011261264e575f80fd5b81358181111561266057612660612593565b61267284601f19601f840116016125c0565b91508082528984828501011115612687575f80fd5b80848401858401375f848284010152508095505050506126a9604086016125f1565b9396929550929360600135925050565b5f80604083850312156126ca575f80fd5b6126d3836125f1565b946020939093013593505050565b5f602082840312156126f1575f80fd5b5035919050565b5f81518084525f5b8181101561271c57602081850181015186830182015201612700565b505f602082860101526020601f19601f83011685010191505092915050565b602081525f61274d60208301846126f8565b9392505050565b5f805f805f60a08688031215612768575f80fd5b853594506020860135935060408601359250612786606087016125f1565b949793965091946080013592915050565b5f602082840312156127a7575f80fd5b8135801515811461274d575f80fd5b80356001600160a01b0381168114612604575f80fd5b5f602082840312156127dc575f80fd5b61274d826127b6565b5f805f80608085870312156127f8575f80fd5b843567ffffffffffffffff8082111561280f575f80fd5b818701915087601f830112612822575f80fd5b813560208282111561283657612836612593565b8160051b92506128478184016125c0565b828152928401810192818101908b851115612860575f80fd5b948201945b8486101561288557612876866127b6565b82529482019490820190612865565b985061289490508982016127b6565b9650505050506126a9604086016125f1565b5f8083601f8401126128b6575f80fd5b50813567ffffffffffffffff8111156128cd575f80fd5b6020830191508360208260051b85010111156128e7575f80fd5b9250929050565b5f805f8060408587031215612901575f80fd5b843567ffffffffffffffff80821115612918575f80fd5b612924888389016128a6565b9096509450602087013591508082111561293c575f80fd5b50612949878288016128a6565b95989497509550505050565b5f805f805f60a08688031215612969575f80fd5b612972866127b6565b9450612980602087016127b6565b94979496505050506040830135926060810135926080909101359150565b6001600160a01b0385168152836020820152608060408201525f6129c560808301856126f8565b905082606083015295945050505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b80820180821115612a4357612a43612a03565b92915050565b81810381811115612a4357612a43612a03565b600181811c90821680612a7057607f821691505b602082108103612aa7577f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b50919050565b5f808354612aba81612a5c565b60018281168015612ad25760018114612ae757612b13565b60ff1984168752821515830287019450612b13565b875f526020805f205f5b85811015612b0a5781548a820152908401908201612af1565b50505082870194505b50929695505050505050565b601f82111561188d57805f5260205f20601f840160051c81016020851015612b445750805b601f840160051c820191505b81811015610c30575f8155600101612b50565b815167ffffffffffffffff811115612b7d57612b7d612593565b612b9181612b8b8454612a5c565b84612b1f565b602080601f831160018114612bc4575f8415612bad5750858301515b5f19600386901b1c1916600185901b178555611c7d565b5f85815260208120601f198616915b82811015612bf257888601518255948401946001909101908401612bd3565b5085821015612c0f57878501515f19600388901b60f8161c191681555b5050505050600190811b01905550565b5f81612c2d57612c2d612a03565b505f190190565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603160045260245ffd5b8183525f60208085019450825f5b85811015612c9b576001600160a01b03612c88836127b6565b1687529582019590820190600101612c6f565b509495945050505050565b604081525f612cb9604083018688612c61565b8281036020840152612ccc818587612c61565b979650505050505050565b818103612ce2575050565b612cec8254612a5c565b67ffffffffffffffff811115612d0457612d04612593565b612d1281612b8b8454612a5c565b5f601f821160018114612d43575f8315612d2c5750848201545b5f19600385901b1c1916600184901b178455610c30565b5f8581526020808220868352908220601f198616925b83811015612d795782860154825560019586019590910190602001612d59565b5085831015612c0f579301545f1960f8600387901b161c19169092555050600190811b01905550565b5f60208284031215612db2575f80fd5b5051919050565b5f604080830185845260206040818601528186518084526060935060608701915060608160051b8801018389015f5b83811015612e56578983037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa0018552815180516001600160a01b031684528681015187850152880151888401889052612e43888501826126f8565b9587019593505090850190600101612de8565b50909a9950505050505050505050565b60a081525f612e7860a08301886126f8565b6020838203818501528188548084528284019150895f52825f2093505f5b81811015612ebb5784546001600160a01b031683526001948501949284019201612e96565b50508481036040860152809250875480825282820193506005838260051b8401018a5f52845f205f5b84811015612f7757601f198684030188525f8254612f0181612a5c565b80865260018281168015612f1c5760018114612f3557612f60565b60ff1984168c8901528b8315158a1b8901019450612f60565b865f528b5f205f5b84811015612f585781548a82018f0152908301908d01612f3d565b89018d019550505b509a8a019a92955050509190910190600101612ee4565b505063ffffffff8a1660608901529550612f92945050505050565b6001600160a01b0383166080830152969550505050505056fea2646970667358221220e03191a93faa89652f35eb02852d2707069de3fdf4463c03e5e79864d77aa73c64736f6c63430008180033",
}

// StakingABI is the input ABI used to generate the binding from.
// Deprecated: Use StakingMetaData.ABI instead.
var StakingABI = StakingMetaData.ABI

// StakingBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use StakingMetaData.Bin instead.
var StakingBin = StakingMetaData.Bin

// DeployStaking deploys a new Ethereum contract, binding an instance of Staking to it.
func DeployStaking(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Staking, error) {
	parsed, err := StakingMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(StakingBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Staking{StakingCaller: StakingCaller{contract: contract}, StakingTransactor: StakingTransactor{contract: contract}, StakingFilterer: StakingFilterer{contract: contract}}, nil
}

// Staking is an auto generated Go binding around an Ethereum contract.
type Staking struct {
	StakingCaller     // Read-only binding to the contract
	StakingTransactor // Write-only binding to the contract
	StakingFilterer   // Log filterer for contract events
}

// StakingCaller is an auto generated read-only Go binding around an Ethereum contract.
type StakingCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakingTransactor is an auto generated write-only Go binding around an Ethereum contract.
type StakingTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakingFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type StakingFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakingSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type StakingSession struct {
	Contract     *Staking          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// StakingCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type StakingCallerSession struct {
	Contract *StakingCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// StakingTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type StakingTransactorSession struct {
	Contract     *StakingTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// StakingRaw is an auto generated low-level Go binding around an Ethereum contract.
type StakingRaw struct {
	Contract *Staking // Generic contract binding to access the raw methods on
}

// StakingCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type StakingCallerRaw struct {
	Contract *StakingCaller // Generic read-only contract binding to access the raw methods on
}

// StakingTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type StakingTransactorRaw struct {
	Contract *StakingTransactor // Generic write-only contract binding to access the raw methods on
}

// NewStaking creates a new instance of Staking, bound to a specific deployed contract.
func NewStaking(address common.Address, backend bind.ContractBackend) (*Staking, error) {
	contract, err := bindStaking(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Staking{StakingCaller: StakingCaller{contract: contract}, StakingTransactor: StakingTransactor{contract: contract}, StakingFilterer: StakingFilterer{contract: contract}}, nil
}

// NewStakingCaller creates a new read-only instance of Staking, bound to a specific deployed contract.
func NewStakingCaller(address common.Address, caller bind.ContractCaller) (*StakingCaller, error) {
	contract, err := bindStaking(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &StakingCaller{contract: contract}, nil
}

// NewStakingTransactor creates a new write-only instance of Staking, bound to a specific deployed contract.
func NewStakingTransactor(address common.Address, transactor bind.ContractTransactor) (*StakingTransactor, error) {
	contract, err := bindStaking(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &StakingTransactor{contract: contract}, nil
}

// NewStakingFilterer creates a new log filterer instance of Staking, bound to a specific deployed contract.
func NewStakingFilterer(address common.Address, filterer bind.ContractFilterer) (*StakingFilterer, error) {
	contract, err := bindStaking(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &StakingFilterer{contract: contract}, nil
}

// bindStaking binds a generic wrapper to an already deployed contract.
func bindStaking(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(StakingABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Staking *StakingRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Staking.Contract.StakingCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Staking *StakingRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Staking.Contract.StakingTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Staking *StakingRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Staking.Contract.StakingTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Staking *StakingCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Staking.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Staking *StakingTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Staking.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Staking *StakingTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Staking.Contract.contract.Transact(opts, method, params...)
}

// Limit is a free data retrieval call binding the contract method 0xa4d66daf.
//
// Solidity: function limit() view returns(uint256)
func (_Staking *StakingCaller) Limit(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "limit")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Limit is a free data retrieval call binding the contract method 0xa4d66daf.
//
// Solidity: function limit() view returns(uint256)
func (_Staking *StakingSession) Limit() (*big.Int, error) {
	return _Staking.Contract.Limit(&_Staking.CallOpts)
}

// Limit is a free data retrieval call binding the contract method 0xa4d66daf.
//
// Solidity: function limit() view returns(uint256)
func (_Staking *StakingCallerSession) Limit() (*big.Int, error) {
	return _Staking.Contract.Limit(&_Staking.CallOpts)
}

// Lock is a free data retrieval call binding the contract method 0xf83d08ba.
//
// Solidity: function lock() view returns(uint256)
func (_Staking *StakingCaller) Lock(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "lock")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Lock is a free data retrieval call binding the contract method 0xf83d08ba.
//
// Solidity: function lock() view returns(uint256)
func (_Staking *StakingSession) Lock() (*big.Int, error) {
	return _Staking.Contract.Lock(&_Staking.CallOpts)
}

// Lock is a free data retrieval call binding the contract method 0xf83d08ba.
//
// Solidity: function lock() view returns(uint256)
func (_Staking *StakingCallerSession) Lock() (*big.Int, error) {
	return _Staking.Contract.Lock(&_Staking.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Staking *StakingCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Staking *StakingSession) Owner() (common.Address, error) {
	return _Staking.Contract.Owner(&_Staking.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Staking *StakingCallerSession) Owner() (common.Address, error) {
	return _Staking.Contract.Owner(&_Staking.CallOpts)
}

// SequencerContract is a free data retrieval call binding the contract method 0xa7044836.
//
// Solidity: function sequencerContract() view returns(address)
func (_Staking *StakingCaller) SequencerContract(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "sequencerContract")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// SequencerContract is a free data retrieval call binding the contract method 0xa7044836.
//
// Solidity: function sequencerContract() view returns(address)
func (_Staking *StakingSession) SequencerContract() (common.Address, error) {
	return _Staking.Contract.SequencerContract(&_Staking.CallOpts)
}

// SequencerContract is a free data retrieval call binding the contract method 0xa7044836.
//
// Solidity: function sequencerContract() view returns(address)
func (_Staking *StakingCallerSession) SequencerContract() (common.Address, error) {
	return _Staking.Contract.SequencerContract(&_Staking.CallOpts)
}

// SequencersAddr is a free data retrieval call binding the contract method 0xd3710ec5.
//
// Solidity: function sequencersAddr(uint256 ) view returns(address)
func (_Staking *StakingCaller) SequencersAddr(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "sequencersAddr", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// SequencersAddr is a free data retrieval call binding the contract method 0xd3710ec5.
//
// Solidity: function sequencersAddr(uint256 ) view returns(address)
func (_Staking *StakingSession) SequencersAddr(arg0 *big.Int) (common.Address, error) {
	return _Staking.Contract.SequencersAddr(&_Staking.CallOpts, arg0)
}

// SequencersAddr is a free data retrieval call binding the contract method 0xd3710ec5.
//
// Solidity: function sequencersAddr(uint256 ) view returns(address)
func (_Staking *StakingCallerSession) SequencersAddr(arg0 *big.Int) (common.Address, error) {
	return _Staking.Contract.SequencersAddr(&_Staking.CallOpts, arg0)
}

// SequencersBLS is a free data retrieval call binding the contract method 0x399b8b39.
//
// Solidity: function sequencersBLS(uint256 ) view returns(bytes)
func (_Staking *StakingCaller) SequencersBLS(opts *bind.CallOpts, arg0 *big.Int) ([]byte, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "sequencersBLS", arg0)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// SequencersBLS is a free data retrieval call binding the contract method 0x399b8b39.
//
// Solidity: function sequencersBLS(uint256 ) view returns(bytes)
func (_Staking *StakingSession) SequencersBLS(arg0 *big.Int) ([]byte, error) {
	return _Staking.Contract.SequencersBLS(&_Staking.CallOpts, arg0)
}

// SequencersBLS is a free data retrieval call binding the contract method 0x399b8b39.
//
// Solidity: function sequencersBLS(uint256 ) view returns(bytes)
func (_Staking *StakingCallerSession) SequencersBLS(arg0 *big.Int) ([]byte, error) {
	return _Staking.Contract.SequencersBLS(&_Staking.CallOpts, arg0)
}

// SequencersSize is a free data retrieval call binding the contract method 0xb2145280.
//
// Solidity: function sequencersSize() view returns(uint256)
func (_Staking *StakingCaller) SequencersSize(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "sequencersSize")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SequencersSize is a free data retrieval call binding the contract method 0xb2145280.
//
// Solidity: function sequencersSize() view returns(uint256)
func (_Staking *StakingSession) SequencersSize() (*big.Int, error) {
	return _Staking.Contract.SequencersSize(&_Staking.CallOpts)
}

// SequencersSize is a free data retrieval call binding the contract method 0xb2145280.
//
// Solidity: function sequencersSize() view returns(uint256)
func (_Staking *StakingCallerSession) SequencersSize() (*big.Int, error) {
	return _Staking.Contract.SequencersSize(&_Staking.CallOpts)
}

// Stakers is a free data retrieval call binding the contract method 0xfd5e6dd1.
//
// Solidity: function stakers(uint256 ) view returns(address)
func (_Staking *StakingCaller) Stakers(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "stakers", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Stakers is a free data retrieval call binding the contract method 0xfd5e6dd1.
//
// Solidity: function stakers(uint256 ) view returns(address)
func (_Staking *StakingSession) Stakers(arg0 *big.Int) (common.Address, error) {
	return _Staking.Contract.Stakers(&_Staking.CallOpts, arg0)
}

// Stakers is a free data retrieval call binding the contract method 0xfd5e6dd1.
//
// Solidity: function stakers(uint256 ) view returns(address)
func (_Staking *StakingCallerSession) Stakers(arg0 *big.Int) (common.Address, error) {
	return _Staking.Contract.Stakers(&_Staking.CallOpts, arg0)
}

// StakersNumber is a free data retrieval call binding the contract method 0xcbd679cb.
//
// Solidity: function stakersNumber() view returns(uint256)
func (_Staking *StakingCaller) StakersNumber(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "stakersNumber")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// StakersNumber is a free data retrieval call binding the contract method 0xcbd679cb.
//
// Solidity: function stakersNumber() view returns(uint256)
func (_Staking *StakingSession) StakersNumber() (*big.Int, error) {
	return _Staking.Contract.StakersNumber(&_Staking.CallOpts)
}

// StakersNumber is a free data retrieval call binding the contract method 0xcbd679cb.
//
// Solidity: function stakersNumber() view returns(uint256)
func (_Staking *StakingCallerSession) StakersNumber() (*big.Int, error) {
	return _Staking.Contract.StakersNumber(&_Staking.CallOpts)
}

// Stakings is a free data retrieval call binding the contract method 0xdc6e13e1.
//
// Solidity: function stakings(address ) view returns(address addr, bytes32 tmKey, bytes blsKey, uint256 balance)
func (_Staking *StakingCaller) Stakings(opts *bind.CallOpts, arg0 common.Address) (struct {
	Addr    common.Address
	TmKey   [32]byte
	BlsKey  []byte
	Balance *big.Int
}, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "stakings", arg0)

	outstruct := new(struct {
		Addr    common.Address
		TmKey   [32]byte
		BlsKey  []byte
		Balance *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Addr = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.TmKey = *abi.ConvertType(out[1], new([32]byte)).(*[32]byte)
	outstruct.BlsKey = *abi.ConvertType(out[2], new([]byte)).(*[]byte)
	outstruct.Balance = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// Stakings is a free data retrieval call binding the contract method 0xdc6e13e1.
//
// Solidity: function stakings(address ) view returns(address addr, bytes32 tmKey, bytes blsKey, uint256 balance)
func (_Staking *StakingSession) Stakings(arg0 common.Address) (struct {
	Addr    common.Address
	TmKey   [32]byte
	BlsKey  []byte
	Balance *big.Int
}, error) {
	return _Staking.Contract.Stakings(&_Staking.CallOpts, arg0)
}

// Stakings is a free data retrieval call binding the contract method 0xdc6e13e1.
//
// Solidity: function stakings(address ) view returns(address addr, bytes32 tmKey, bytes blsKey, uint256 balance)
func (_Staking *StakingCallerSession) Stakings(arg0 common.Address) (struct {
	Addr    common.Address
	TmKey   [32]byte
	BlsKey  []byte
	Balance *big.Int
}, error) {
	return _Staking.Contract.Stakings(&_Staking.CallOpts, arg0)
}

// Whitelist is a free data retrieval call binding the contract method 0x9b19251a.
//
// Solidity: function whitelist(address ) view returns(bool)
func (_Staking *StakingCaller) Whitelist(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "whitelist", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Whitelist is a free data retrieval call binding the contract method 0x9b19251a.
//
// Solidity: function whitelist(address ) view returns(bool)
func (_Staking *StakingSession) Whitelist(arg0 common.Address) (bool, error) {
	return _Staking.Contract.Whitelist(&_Staking.CallOpts, arg0)
}

// Whitelist is a free data retrieval call binding the contract method 0x9b19251a.
//
// Solidity: function whitelist(address ) view returns(bool)
func (_Staking *StakingCallerSession) Whitelist(arg0 common.Address) (bool, error) {
	return _Staking.Contract.Whitelist(&_Staking.CallOpts, arg0)
}

// Withdrawals is a free data retrieval call binding the contract method 0x7a9262a2.
//
// Solidity: function withdrawals(address ) view returns(uint256 balance, uint256 unlock, bool exit)
func (_Staking *StakingCaller) Withdrawals(opts *bind.CallOpts, arg0 common.Address) (struct {
	Balance *big.Int
	Unlock  *big.Int
	Exit    bool
}, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "withdrawals", arg0)

	outstruct := new(struct {
		Balance *big.Int
		Unlock  *big.Int
		Exit    bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Balance = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Unlock = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.Exit = *abi.ConvertType(out[2], new(bool)).(*bool)

	return *outstruct, err

}

// Withdrawals is a free data retrieval call binding the contract method 0x7a9262a2.
//
// Solidity: function withdrawals(address ) view returns(uint256 balance, uint256 unlock, bool exit)
func (_Staking *StakingSession) Withdrawals(arg0 common.Address) (struct {
	Balance *big.Int
	Unlock  *big.Int
	Exit    bool
}, error) {
	return _Staking.Contract.Withdrawals(&_Staking.CallOpts, arg0)
}

// Withdrawals is a free data retrieval call binding the contract method 0x7a9262a2.
//
// Solidity: function withdrawals(address ) view returns(uint256 balance, uint256 unlock, bool exit)
func (_Staking *StakingCallerSession) Withdrawals(arg0 common.Address) (struct {
	Balance *big.Int
	Unlock  *big.Int
	Exit    bool
}, error) {
	return _Staking.Contract.Withdrawals(&_Staking.CallOpts, arg0)
}

// ClaimETH is a paid mutator transaction binding the contract method 0x67272999.
//
// Solidity: function claimETH() returns()
func (_Staking *StakingTransactor) ClaimETH(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "claimETH")
}

// ClaimETH is a paid mutator transaction binding the contract method 0x67272999.
//
// Solidity: function claimETH() returns()
func (_Staking *StakingSession) ClaimETH() (*types.Transaction, error) {
	return _Staking.Contract.ClaimETH(&_Staking.TransactOpts)
}

// ClaimETH is a paid mutator transaction binding the contract method 0x67272999.
//
// Solidity: function claimETH() returns()
func (_Staking *StakingTransactorSession) ClaimETH() (*types.Transaction, error) {
	return _Staking.Contract.ClaimETH(&_Staking.TransactOpts)
}

// Initialize is a paid mutator transaction binding the contract method 0xd13f90b4.
//
// Solidity: function initialize(address _admin, address _sequencerContract, uint256 _sequencersSize, uint256 _limit, uint256 _lock) returns()
func (_Staking *StakingTransactor) Initialize(opts *bind.TransactOpts, _admin common.Address, _sequencerContract common.Address, _sequencersSize *big.Int, _limit *big.Int, _lock *big.Int) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "initialize", _admin, _sequencerContract, _sequencersSize, _limit, _lock)
}

// Initialize is a paid mutator transaction binding the contract method 0xd13f90b4.
//
// Solidity: function initialize(address _admin, address _sequencerContract, uint256 _sequencersSize, uint256 _limit, uint256 _lock) returns()
func (_Staking *StakingSession) Initialize(_admin common.Address, _sequencerContract common.Address, _sequencersSize *big.Int, _limit *big.Int, _lock *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.Initialize(&_Staking.TransactOpts, _admin, _sequencerContract, _sequencersSize, _limit, _lock)
}

// Initialize is a paid mutator transaction binding the contract method 0xd13f90b4.
//
// Solidity: function initialize(address _admin, address _sequencerContract, uint256 _sequencersSize, uint256 _limit, uint256 _lock) returns()
func (_Staking *StakingTransactorSession) Initialize(_admin common.Address, _sequencerContract common.Address, _sequencersSize *big.Int, _limit *big.Int, _lock *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.Initialize(&_Staking.TransactOpts, _admin, _sequencerContract, _sequencersSize, _limit, _lock)
}

// Register is a paid mutator transaction binding the contract method 0x1b9346ed.
//
// Solidity: function register(bytes32 tmKey, bytes blsKey, uint32 _minGasLimit, uint256 _gasFee) payable returns()
func (_Staking *StakingTransactor) Register(opts *bind.TransactOpts, tmKey [32]byte, blsKey []byte, _minGasLimit uint32, _gasFee *big.Int) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "register", tmKey, blsKey, _minGasLimit, _gasFee)
}

// Register is a paid mutator transaction binding the contract method 0x1b9346ed.
//
// Solidity: function register(bytes32 tmKey, bytes blsKey, uint32 _minGasLimit, uint256 _gasFee) payable returns()
func (_Staking *StakingSession) Register(tmKey [32]byte, blsKey []byte, _minGasLimit uint32, _gasFee *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.Register(&_Staking.TransactOpts, tmKey, blsKey, _minGasLimit, _gasFee)
}

// Register is a paid mutator transaction binding the contract method 0x1b9346ed.
//
// Solidity: function register(bytes32 tmKey, bytes blsKey, uint32 _minGasLimit, uint256 _gasFee) payable returns()
func (_Staking *StakingTransactorSession) Register(tmKey [32]byte, blsKey []byte, _minGasLimit uint32, _gasFee *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.Register(&_Staking.TransactOpts, tmKey, blsKey, _minGasLimit, _gasFee)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Staking *StakingTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Staking *StakingSession) RenounceOwnership() (*types.Transaction, error) {
	return _Staking.Contract.RenounceOwnership(&_Staking.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Staking *StakingTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Staking.Contract.RenounceOwnership(&_Staking.TransactOpts)
}

// Slash is a paid mutator transaction binding the contract method 0x825108df.
//
// Solidity: function slash(address[] sequencers, address challenger, uint32 _minGasLimit, uint256 _gasFee) returns()
func (_Staking *StakingTransactor) Slash(opts *bind.TransactOpts, sequencers []common.Address, challenger common.Address, _minGasLimit uint32, _gasFee *big.Int) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "slash", sequencers, challenger, _minGasLimit, _gasFee)
}

// Slash is a paid mutator transaction binding the contract method 0x825108df.
//
// Solidity: function slash(address[] sequencers, address challenger, uint32 _minGasLimit, uint256 _gasFee) returns()
func (_Staking *StakingSession) Slash(sequencers []common.Address, challenger common.Address, _minGasLimit uint32, _gasFee *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.Slash(&_Staking.TransactOpts, sequencers, challenger, _minGasLimit, _gasFee)
}

// Slash is a paid mutator transaction binding the contract method 0x825108df.
//
// Solidity: function slash(address[] sequencers, address challenger, uint32 _minGasLimit, uint256 _gasFee) returns()
func (_Staking *StakingTransactorSession) Slash(sequencers []common.Address, challenger common.Address, _minGasLimit uint32, _gasFee *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.Slash(&_Staking.TransactOpts, sequencers, challenger, _minGasLimit, _gasFee)
}

// StakeETH is a paid mutator transaction binding the contract method 0x22222760.
//
// Solidity: function stakeETH(uint32 _minGasLimit, uint256 _gasFee) payable returns()
func (_Staking *StakingTransactor) StakeETH(opts *bind.TransactOpts, _minGasLimit uint32, _gasFee *big.Int) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "stakeETH", _minGasLimit, _gasFee)
}

// StakeETH is a paid mutator transaction binding the contract method 0x22222760.
//
// Solidity: function stakeETH(uint32 _minGasLimit, uint256 _gasFee) payable returns()
func (_Staking *StakingSession) StakeETH(_minGasLimit uint32, _gasFee *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.StakeETH(&_Staking.TransactOpts, _minGasLimit, _gasFee)
}

// StakeETH is a paid mutator transaction binding the contract method 0x22222760.
//
// Solidity: function stakeETH(uint32 _minGasLimit, uint256 _gasFee) payable returns()
func (_Staking *StakingTransactorSession) StakeETH(_minGasLimit uint32, _gasFee *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.StakeETH(&_Staking.TransactOpts, _minGasLimit, _gasFee)
}

// ToggleSlash is a paid mutator transaction binding the contract method 0x59e93d1e.
//
// Solidity: function toggleSlash(bool enanble) returns()
func (_Staking *StakingTransactor) ToggleSlash(opts *bind.TransactOpts, enanble bool) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "toggleSlash", enanble)
}

// ToggleSlash is a paid mutator transaction binding the contract method 0x59e93d1e.
//
// Solidity: function toggleSlash(bool enanble) returns()
func (_Staking *StakingSession) ToggleSlash(enanble bool) (*types.Transaction, error) {
	return _Staking.Contract.ToggleSlash(&_Staking.TransactOpts, enanble)
}

// ToggleSlash is a paid mutator transaction binding the contract method 0x59e93d1e.
//
// Solidity: function toggleSlash(bool enanble) returns()
func (_Staking *StakingTransactorSession) ToggleSlash(enanble bool) (*types.Transaction, error) {
	return _Staking.Contract.ToggleSlash(&_Staking.TransactOpts, enanble)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Staking *StakingTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Staking *StakingSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Staking.Contract.TransferOwnership(&_Staking.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Staking *StakingTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Staking.Contract.TransferOwnership(&_Staking.TransactOpts, newOwner)
}

// UnpauseSequencer is a paid mutator transaction binding the contract method 0xed2fb2e1.
//
// Solidity: function unpauseSequencer() returns()
func (_Staking *StakingTransactor) UnpauseSequencer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "unpauseSequencer")
}

// UnpauseSequencer is a paid mutator transaction binding the contract method 0xed2fb2e1.
//
// Solidity: function unpauseSequencer() returns()
func (_Staking *StakingSession) UnpauseSequencer() (*types.Transaction, error) {
	return _Staking.Contract.UnpauseSequencer(&_Staking.TransactOpts)
}

// UnpauseSequencer is a paid mutator transaction binding the contract method 0xed2fb2e1.
//
// Solidity: function unpauseSequencer() returns()
func (_Staking *StakingTransactorSession) UnpauseSequencer() (*types.Transaction, error) {
	return _Staking.Contract.UnpauseSequencer(&_Staking.TransactOpts)
}

// UpdateParams is a paid mutator transaction binding the contract method 0x4e073694.
//
// Solidity: function updateParams(uint256 _sequencersSize, uint256 _limit, uint256 _lock, uint32 _minGasLimit, uint256 _gasFee) returns()
func (_Staking *StakingTransactor) UpdateParams(opts *bind.TransactOpts, _sequencersSize *big.Int, _limit *big.Int, _lock *big.Int, _minGasLimit uint32, _gasFee *big.Int) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "updateParams", _sequencersSize, _limit, _lock, _minGasLimit, _gasFee)
}

// UpdateParams is a paid mutator transaction binding the contract method 0x4e073694.
//
// Solidity: function updateParams(uint256 _sequencersSize, uint256 _limit, uint256 _lock, uint32 _minGasLimit, uint256 _gasFee) returns()
func (_Staking *StakingSession) UpdateParams(_sequencersSize *big.Int, _limit *big.Int, _lock *big.Int, _minGasLimit uint32, _gasFee *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.UpdateParams(&_Staking.TransactOpts, _sequencersSize, _limit, _lock, _minGasLimit, _gasFee)
}

// UpdateParams is a paid mutator transaction binding the contract method 0x4e073694.
//
// Solidity: function updateParams(uint256 _sequencersSize, uint256 _limit, uint256 _lock, uint32 _minGasLimit, uint256 _gasFee) returns()
func (_Staking *StakingTransactorSession) UpdateParams(_sequencersSize *big.Int, _limit *big.Int, _lock *big.Int, _minGasLimit uint32, _gasFee *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.UpdateParams(&_Staking.TransactOpts, _sequencersSize, _limit, _lock, _minGasLimit, _gasFee)
}

// UpdateWhitelist is a paid mutator transaction binding the contract method 0xc7cd469a.
//
// Solidity: function updateWhitelist(address[] add, address[] remove) returns()
func (_Staking *StakingTransactor) UpdateWhitelist(opts *bind.TransactOpts, add []common.Address, remove []common.Address) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "updateWhitelist", add, remove)
}

// UpdateWhitelist is a paid mutator transaction binding the contract method 0xc7cd469a.
//
// Solidity: function updateWhitelist(address[] add, address[] remove) returns()
func (_Staking *StakingSession) UpdateWhitelist(add []common.Address, remove []common.Address) (*types.Transaction, error) {
	return _Staking.Contract.UpdateWhitelist(&_Staking.TransactOpts, add, remove)
}

// UpdateWhitelist is a paid mutator transaction binding the contract method 0xc7cd469a.
//
// Solidity: function updateWhitelist(address[] add, address[] remove) returns()
func (_Staking *StakingTransactorSession) UpdateWhitelist(add []common.Address, remove []common.Address) (*types.Transaction, error) {
	return _Staking.Contract.UpdateWhitelist(&_Staking.TransactOpts, add, remove)
}

// WithdrawETH is a paid mutator transaction binding the contract method 0x9131f724.
//
// Solidity: function withdrawETH(uint32 _minGasLimit, uint256 _gasFee) payable returns()
func (_Staking *StakingTransactor) WithdrawETH(opts *bind.TransactOpts, _minGasLimit uint32, _gasFee *big.Int) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "withdrawETH", _minGasLimit, _gasFee)
}

// WithdrawETH is a paid mutator transaction binding the contract method 0x9131f724.
//
// Solidity: function withdrawETH(uint32 _minGasLimit, uint256 _gasFee) payable returns()
func (_Staking *StakingSession) WithdrawETH(_minGasLimit uint32, _gasFee *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.WithdrawETH(&_Staking.TransactOpts, _minGasLimit, _gasFee)
}

// WithdrawETH is a paid mutator transaction binding the contract method 0x9131f724.
//
// Solidity: function withdrawETH(uint32 _minGasLimit, uint256 _gasFee) payable returns()
func (_Staking *StakingTransactorSession) WithdrawETH(_minGasLimit uint32, _gasFee *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.WithdrawETH(&_Staking.TransactOpts, _minGasLimit, _gasFee)
}

// StakingClaimedIterator is returned from FilterClaimed and is used to iterate over the raw logs and unpacked data for Claimed events raised by the Staking contract.
type StakingClaimedIterator struct {
	Event *StakingClaimed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingClaimedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingClaimed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingClaimed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingClaimedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingClaimedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingClaimed represents a Claimed event raised by the Staking contract.
type StakingClaimed struct {
	Addr    common.Address
	Balance *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterClaimed is a free log retrieval operation binding the contract event 0xd8138f8a3f377c5259ca548e70e4c2de94f129f5a11036a15b69513cba2b426a.
//
// Solidity: event Claimed(address addr, uint256 balance)
func (_Staking *StakingFilterer) FilterClaimed(opts *bind.FilterOpts) (*StakingClaimedIterator, error) {

	logs, sub, err := _Staking.contract.FilterLogs(opts, "Claimed")
	if err != nil {
		return nil, err
	}
	return &StakingClaimedIterator{contract: _Staking.contract, event: "Claimed", logs: logs, sub: sub}, nil
}

// WatchClaimed is a free log subscription operation binding the contract event 0xd8138f8a3f377c5259ca548e70e4c2de94f129f5a11036a15b69513cba2b426a.
//
// Solidity: event Claimed(address addr, uint256 balance)
func (_Staking *StakingFilterer) WatchClaimed(opts *bind.WatchOpts, sink chan<- *StakingClaimed) (event.Subscription, error) {

	logs, sub, err := _Staking.contract.WatchLogs(opts, "Claimed")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingClaimed)
				if err := _Staking.contract.UnpackLog(event, "Claimed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseClaimed is a log parse operation binding the contract event 0xd8138f8a3f377c5259ca548e70e4c2de94f129f5a11036a15b69513cba2b426a.
//
// Solidity: event Claimed(address addr, uint256 balance)
func (_Staking *StakingFilterer) ParseClaimed(log types.Log) (*StakingClaimed, error) {
	event := new(StakingClaimed)
	if err := _Staking.contract.UnpackLog(event, "Claimed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the Staking contract.
type StakingInitializedIterator struct {
	Event *StakingInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingInitialized represents a Initialized event raised by the Staking contract.
type StakingInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Staking *StakingFilterer) FilterInitialized(opts *bind.FilterOpts) (*StakingInitializedIterator, error) {

	logs, sub, err := _Staking.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &StakingInitializedIterator{contract: _Staking.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Staking *StakingFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *StakingInitialized) (event.Subscription, error) {

	logs, sub, err := _Staking.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingInitialized)
				if err := _Staking.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Staking *StakingFilterer) ParseInitialized(log types.Log) (*StakingInitialized, error) {
	event := new(StakingInitialized)
	if err := _Staking.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Staking contract.
type StakingOwnershipTransferredIterator struct {
	Event *StakingOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingOwnershipTransferred represents a OwnershipTransferred event raised by the Staking contract.
type StakingOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Staking *StakingFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*StakingOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Staking.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &StakingOwnershipTransferredIterator{contract: _Staking.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Staking *StakingFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *StakingOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Staking.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingOwnershipTransferred)
				if err := _Staking.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Staking *StakingFilterer) ParseOwnershipTransferred(log types.Log) (*StakingOwnershipTransferred, error) {
	event := new(StakingOwnershipTransferred)
	if err := _Staking.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingParamsUpdatedIterator is returned from FilterParamsUpdated and is used to iterate over the raw logs and unpacked data for ParamsUpdated events raised by the Staking contract.
type StakingParamsUpdatedIterator struct {
	Event *StakingParamsUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingParamsUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingParamsUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingParamsUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingParamsUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingParamsUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingParamsUpdated represents a ParamsUpdated event raised by the Staking contract.
type StakingParamsUpdated struct {
	SequencersSize *big.Int
	Limit          *big.Int
	Lock           *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterParamsUpdated is a free log retrieval operation binding the contract event 0x0cba168cfa7900657e5f8cc53d6f52ebbfa3a9f568941b465cc4f731c60c95b2.
//
// Solidity: event ParamsUpdated(uint256 _sequencersSize, uint256 _limit, uint256 _lock)
func (_Staking *StakingFilterer) FilterParamsUpdated(opts *bind.FilterOpts) (*StakingParamsUpdatedIterator, error) {

	logs, sub, err := _Staking.contract.FilterLogs(opts, "ParamsUpdated")
	if err != nil {
		return nil, err
	}
	return &StakingParamsUpdatedIterator{contract: _Staking.contract, event: "ParamsUpdated", logs: logs, sub: sub}, nil
}

// WatchParamsUpdated is a free log subscription operation binding the contract event 0x0cba168cfa7900657e5f8cc53d6f52ebbfa3a9f568941b465cc4f731c60c95b2.
//
// Solidity: event ParamsUpdated(uint256 _sequencersSize, uint256 _limit, uint256 _lock)
func (_Staking *StakingFilterer) WatchParamsUpdated(opts *bind.WatchOpts, sink chan<- *StakingParamsUpdated) (event.Subscription, error) {

	logs, sub, err := _Staking.contract.WatchLogs(opts, "ParamsUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingParamsUpdated)
				if err := _Staking.contract.UnpackLog(event, "ParamsUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseParamsUpdated is a log parse operation binding the contract event 0x0cba168cfa7900657e5f8cc53d6f52ebbfa3a9f568941b465cc4f731c60c95b2.
//
// Solidity: event ParamsUpdated(uint256 _sequencersSize, uint256 _limit, uint256 _lock)
func (_Staking *StakingFilterer) ParseParamsUpdated(log types.Log) (*StakingParamsUpdated, error) {
	event := new(StakingParamsUpdated)
	if err := _Staking.contract.UnpackLog(event, "ParamsUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingRegisteredIterator is returned from FilterRegistered and is used to iterate over the raw logs and unpacked data for Registered events raised by the Staking contract.
type StakingRegisteredIterator struct {
	Event *StakingRegistered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingRegisteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingRegistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingRegistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingRegisteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingRegisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingRegistered represents a Registered event raised by the Staking contract.
type StakingRegistered struct {
	Addr    common.Address
	TmKey   [32]byte
	BlsKey  []byte
	Balance *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRegistered is a free log retrieval operation binding the contract event 0xb7f230b53b0f914ccf820ab0618ac8320e984eeb0fb6a740785cf7fdc3b5cee3.
//
// Solidity: event Registered(address addr, bytes32 tmKey, bytes blsKey, uint256 balance)
func (_Staking *StakingFilterer) FilterRegistered(opts *bind.FilterOpts) (*StakingRegisteredIterator, error) {

	logs, sub, err := _Staking.contract.FilterLogs(opts, "Registered")
	if err != nil {
		return nil, err
	}
	return &StakingRegisteredIterator{contract: _Staking.contract, event: "Registered", logs: logs, sub: sub}, nil
}

// WatchRegistered is a free log subscription operation binding the contract event 0xb7f230b53b0f914ccf820ab0618ac8320e984eeb0fb6a740785cf7fdc3b5cee3.
//
// Solidity: event Registered(address addr, bytes32 tmKey, bytes blsKey, uint256 balance)
func (_Staking *StakingFilterer) WatchRegistered(opts *bind.WatchOpts, sink chan<- *StakingRegistered) (event.Subscription, error) {

	logs, sub, err := _Staking.contract.WatchLogs(opts, "Registered")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingRegistered)
				if err := _Staking.contract.UnpackLog(event, "Registered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRegistered is a log parse operation binding the contract event 0xb7f230b53b0f914ccf820ab0618ac8320e984eeb0fb6a740785cf7fdc3b5cee3.
//
// Solidity: event Registered(address addr, bytes32 tmKey, bytes blsKey, uint256 balance)
func (_Staking *StakingFilterer) ParseRegistered(log types.Log) (*StakingRegistered, error) {
	event := new(StakingRegistered)
	if err := _Staking.contract.UnpackLog(event, "Registered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingStakedIterator is returned from FilterStaked and is used to iterate over the raw logs and unpacked data for Staked events raised by the Staking contract.
type StakingStakedIterator struct {
	Event *StakingStaked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingStakedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingStaked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingStaked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingStakedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingStakedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingStaked represents a Staked event raised by the Staking contract.
type StakingStaked struct {
	Addr    common.Address
	Balance *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterStaked is a free log retrieval operation binding the contract event 0x9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d.
//
// Solidity: event Staked(address addr, uint256 balance)
func (_Staking *StakingFilterer) FilterStaked(opts *bind.FilterOpts) (*StakingStakedIterator, error) {

	logs, sub, err := _Staking.contract.FilterLogs(opts, "Staked")
	if err != nil {
		return nil, err
	}
	return &StakingStakedIterator{contract: _Staking.contract, event: "Staked", logs: logs, sub: sub}, nil
}

// WatchStaked is a free log subscription operation binding the contract event 0x9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d.
//
// Solidity: event Staked(address addr, uint256 balance)
func (_Staking *StakingFilterer) WatchStaked(opts *bind.WatchOpts, sink chan<- *StakingStaked) (event.Subscription, error) {

	logs, sub, err := _Staking.contract.WatchLogs(opts, "Staked")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingStaked)
				if err := _Staking.contract.UnpackLog(event, "Staked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStaked is a log parse operation binding the contract event 0x9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d.
//
// Solidity: event Staked(address addr, uint256 balance)
func (_Staking *StakingFilterer) ParseStaked(log types.Log) (*StakingStaked, error) {
	event := new(StakingStaked)
	if err := _Staking.contract.UnpackLog(event, "Staked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingWhitelistUpdatedIterator is returned from FilterWhitelistUpdated and is used to iterate over the raw logs and unpacked data for WhitelistUpdated events raised by the Staking contract.
type StakingWhitelistUpdatedIterator struct {
	Event *StakingWhitelistUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingWhitelistUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingWhitelistUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingWhitelistUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingWhitelistUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingWhitelistUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingWhitelistUpdated represents a WhitelistUpdated event raised by the Staking contract.
type StakingWhitelistUpdated struct {
	Add    []common.Address
	Remove []common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterWhitelistUpdated is a free log retrieval operation binding the contract event 0xe375867e538b40218c1b3db2ccceaf875eb073e38b510449e6088c1539ac8622.
//
// Solidity: event WhitelistUpdated(address[] add, address[] remove)
func (_Staking *StakingFilterer) FilterWhitelistUpdated(opts *bind.FilterOpts) (*StakingWhitelistUpdatedIterator, error) {

	logs, sub, err := _Staking.contract.FilterLogs(opts, "WhitelistUpdated")
	if err != nil {
		return nil, err
	}
	return &StakingWhitelistUpdatedIterator{contract: _Staking.contract, event: "WhitelistUpdated", logs: logs, sub: sub}, nil
}

// WatchWhitelistUpdated is a free log subscription operation binding the contract event 0xe375867e538b40218c1b3db2ccceaf875eb073e38b510449e6088c1539ac8622.
//
// Solidity: event WhitelistUpdated(address[] add, address[] remove)
func (_Staking *StakingFilterer) WatchWhitelistUpdated(opts *bind.WatchOpts, sink chan<- *StakingWhitelistUpdated) (event.Subscription, error) {

	logs, sub, err := _Staking.contract.WatchLogs(opts, "WhitelistUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingWhitelistUpdated)
				if err := _Staking.contract.UnpackLog(event, "WhitelistUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWhitelistUpdated is a log parse operation binding the contract event 0xe375867e538b40218c1b3db2ccceaf875eb073e38b510449e6088c1539ac8622.
//
// Solidity: event WhitelistUpdated(address[] add, address[] remove)
func (_Staking *StakingFilterer) ParseWhitelistUpdated(log types.Log) (*StakingWhitelistUpdated, error) {
	event := new(StakingWhitelistUpdated)
	if err := _Staking.contract.UnpackLog(event, "WhitelistUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingWithdrawedIterator is returned from FilterWithdrawed and is used to iterate over the raw logs and unpacked data for Withdrawed events raised by the Staking contract.
type StakingWithdrawedIterator struct {
	Event *StakingWithdrawed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingWithdrawedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingWithdrawed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingWithdrawed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingWithdrawedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingWithdrawedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingWithdrawed represents a Withdrawed event raised by the Staking contract.
type StakingWithdrawed struct {
	Addr    common.Address
	Balance *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterWithdrawed is a free log retrieval operation binding the contract event 0x6cca423c6ffc06e62a0acc433965e074b11c28479b0449250ce3ff65ac9e39fe.
//
// Solidity: event Withdrawed(address addr, uint256 balance)
func (_Staking *StakingFilterer) FilterWithdrawed(opts *bind.FilterOpts) (*StakingWithdrawedIterator, error) {

	logs, sub, err := _Staking.contract.FilterLogs(opts, "Withdrawed")
	if err != nil {
		return nil, err
	}
	return &StakingWithdrawedIterator{contract: _Staking.contract, event: "Withdrawed", logs: logs, sub: sub}, nil
}

// WatchWithdrawed is a free log subscription operation binding the contract event 0x6cca423c6ffc06e62a0acc433965e074b11c28479b0449250ce3ff65ac9e39fe.
//
// Solidity: event Withdrawed(address addr, uint256 balance)
func (_Staking *StakingFilterer) WatchWithdrawed(opts *bind.WatchOpts, sink chan<- *StakingWithdrawed) (event.Subscription, error) {

	logs, sub, err := _Staking.contract.WatchLogs(opts, "Withdrawed")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingWithdrawed)
				if err := _Staking.contract.UnpackLog(event, "Withdrawed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdrawed is a log parse operation binding the contract event 0x6cca423c6ffc06e62a0acc433965e074b11c28479b0449250ce3ff65ac9e39fe.
//
// Solidity: event Withdrawed(address addr, uint256 balance)
func (_Staking *StakingFilterer) ParseWithdrawed(log types.Log) (*StakingWithdrawed, error) {
	event := new(StakingWithdrawed)
	if err := _Staking.contract.UnpackLog(event, "Withdrawed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
