// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package bindings

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/morph-l2/go-ethereum"
	"github.com/morph-l2/go-ethereum/accounts/abi"
	"github.com/morph-l2/go-ethereum/accounts/abi/bind"
	"github.com/morph-l2/go-ethereum/common"
	"github.com/morph-l2/go-ethereum/core/types"
	"github.com/morph-l2/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// L1ERC1155GatewayMetaData contains all meta data concerning the L1ERC1155Gateway contract.
var L1ERC1155GatewayMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_l1Token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_l2Token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"BatchDepositERC1155\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"BatchRefundERC1155\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_l1Token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_l2Token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"DepositERC1155\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_l1Token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_l2Token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"FinalizeBatchWithdrawERC1155\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_l1Token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_l2Token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"FinalizeWithdrawERC1155\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RefundERC1155\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"l1Token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldL2Token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newL2Token\",\"type\":\"address\"}],\"name\":\"UpdateTokenMapping\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_gasLimit\",\"type\":\"uint256\"}],\"name\":\"batchDepositERC1155\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_gasLimit\",\"type\":\"uint256\"}],\"name\":\"batchDepositERC1155\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"counterpart\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_gasLimit\",\"type\":\"uint256\"}],\"name\":\"depositERC1155\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_gasLimit\",\"type\":\"uint256\"}],\"name\":\"depositERC1155\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l1Token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_l2Token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"finalizeBatchWithdrawERC1155\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l1Token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_l2Token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"finalizeWithdrawERC1155\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_counterpart\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_messenger\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"messenger\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"}],\"name\":\"onDropMessage\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenMapping\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l1Token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_l2Token\",\"type\":\"address\"}],\"name\":\"updateTokenMapping\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801562000010575f80fd5b506200001b62000021565b620000df565b5f54610100900460ff16156200008d5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b5f5460ff90811614620000dd575f805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b61284480620000ed5f395ff3fe60806040526004361061013d575f3560e01c8063a901cf8a116100bb578063f2fde38b11610071578063f92748d311610057578063f92748d3146103b7578063f998fe9d146103d6578063fac752eb146103e9575f80fd5b8063f2fde38b14610378578063f887ea4014610397575f80fd5b8063bc197c81116100a1578063bc197c81146102ac578063c99dac9b14610321578063f23a6e6114610334575f80fd5b8063a901cf8a14610264578063ba27f50b14610277575f80fd5b80635ee8e74c11610110578063730608b3116100f6578063730608b314610208578063797594b0146102275780638da5cb5b14610247575f80fd5b80635ee8e74c146101e1578063715018a6146101f4575f80fd5b806301ffc9a71461014157806314298c51146101755780633cb747bf1461018a578063485cc955146101c2575b5f80fd5b34801561014c575f80fd5b5061016061015b366004611d89565b610408565b60405190151581526020015b60405180910390f35b610188610183366004611dcf565b6104a0565b005b348015610195575f80fd5b5061012f546101aa906001600160a01b031681565b6040516001600160a01b03909116815260200161016c565b3480156101cd575f80fd5b506101886101dc366004611e4f565b610918565b6101886101ef366004611ece565b610a9e565b3480156101ff575f80fd5b50610188610ab5565b348015610213575f80fd5b50610188610222366004611f53565b610ac8565b348015610232575f80fd5b5061012d546101aa906001600160a01b031681565b348015610252575f80fd5b5060fb546001600160a01b03166101aa565b610188610272366004611fbd565b610da6565b348015610282575f80fd5b506101aa61029136600461200a565b61015e6020525f90815260409020546001600160a01b031681565b3480156102b7575f80fd5b506102f06102c63660046121a8565b7fbc197c810000000000000000000000000000000000000000000000000000000095945050505050565b6040517fffffffff00000000000000000000000000000000000000000000000000000000909116815260200161016c565b61018861032f36600461224f565b610dba565b34801561033f575f80fd5b506102f061034e3660046122e6565b7ff23a6e610000000000000000000000000000000000000000000000000000000095945050505050565b348015610383575f80fd5b5061018861039236600461200a565b610dc9565b3480156103a2575f80fd5b5061012e546101aa906001600160a01b031681565b3480156103c2575f80fd5b506101886103d136600461234a565b610e59565b6101886103e43660046123fd565b61112b565b3480156103f4575f80fd5b50610188610403366004611e4f565b61113e565b5f7fffffffff0000000000000000000000000000000000000000000000000000000082167f4e2312e000000000000000000000000000000000000000000000000000000000148061049a57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b61012f546001600160a01b03163381146105015760405162461bcd60e51b815260206004820152601760248201527f6f6e6c79206d657373656e6765722063616e2063616c6c00000000000000000060448201526064015b60405180910390fd5b806001600160a01b0316636e296e456040518163ffffffff1660e01b8152600401602060405180830381865afa15801561053d573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906105619190612435565b6001600160a01b0316736f297c61b5c92ef107ffd30cd56affe5a273e8416001600160a01b0316146105d55760405162461bcd60e51b815260206004820152601b60248201527f6f6e6c792063616c6c656420696e2064726f7020636f6e74657874000000000060448201526064016104f8565b6105dd611218565b341561062b5760405162461bcd60e51b815260206004820152601160248201527f6e6f6e7a65726f206d73672e76616c756500000000000000000000000000000060448201526064016104f8565b7f4764cc620000000000000000000000000000000000000000000000000000000061065960045f8587612450565b61066291612477565b7fffffffff000000000000000000000000000000000000000000000000000000001603610797575f80808061069a866004818a612450565b8101906106a79190611f53565b6040517ff242432a0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b038086166024830152604482018490526064820183905260a060848301525f60a4830152969a509398509096509450509186169163f242432a915060c4015f604051808303815f87803b15801561072f575f80fd5b505af1158015610741573d5f803e3d5ffd5b505060408051858152602081018590526001600160a01b038088169450881692507fee285671d9ac3b0e0ed40037cb6db081095aa6cd68363f3e56989dde39e0df0991015b60405180910390a350505050610909565b7feaa72ad9000000000000000000000000000000000000000000000000000000006107c560045f8587612450565b6107ce91612477565b7fffffffff0000000000000000000000000000000000000000000000000000000016036108c1575f808080610806866004818a612450565b81019061081391906124bf565b95509550509450509350836001600160a01b0316632eb2c2d6308585856040518563ffffffff1660e01b815260040161084f94939291906125a0565b5f604051808303815f87803b158015610866575f80fd5b505af1158015610878573d5f803e3d5ffd5b50505050826001600160a01b0316846001600160a01b03167fe198c04cbd4522ed7825c7e6ab1ae33fdaf6ab3565c4a3fb4c0cf24338f306e684846040516107869291906125f9565b60405162461bcd60e51b815260206004820152601060248201527f696e76616c69642073656c6563746f720000000000000000000000000000000060448201526064016104f8565b6109136001609755565b505050565b5f54610100900460ff161580801561093657505f54600160ff909116105b8061094f5750303b15801561094f57505f5460ff166001145b6109c15760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016104f8565b5f80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790558015610a1d575f80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b610a25611278565b610a2d611278565b610a38835f846112f4565b8015610913575f80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a1505050565b610aad8633878787878761143a565b505050505050565b610abd6117c7565b610ac65f611821565b565b61012f546001600160a01b0316338114610b245760405162461bcd60e51b815260206004820152601760248201527f6f6e6c79206d657373656e6765722063616e2063616c6c00000000000000000060448201526064016104f8565b806001600160a01b0316636e296e456040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b60573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610b849190612435565b61012d546001600160a01b03908116911614610be25760405162461bcd60e51b815260206004820152601860248201527f6f6e6c792063616c6c20627920636f756e74657270617274000000000000000060448201526064016104f8565b610bea611218565b6001600160a01b038616610c405760405162461bcd60e51b815260206004820152601960248201527f746f6b656e20616464726573732063616e6e6f7420626520300000000000000060448201526064016104f8565b6001600160a01b038088165f90815261015e6020526040902054878216911614610cac5760405162461bcd60e51b815260206004820152601160248201527f6c3220746f6b656e206d69736d6174636800000000000000000000000000000060448201526064016104f8565b6040517ff242432a0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b038581166024830152604482018590526064820184905260a060848301525f60a483015288169063f242432a9060c4015f604051808303815f87803b158015610d26575f80fd5b505af1158015610d38573d5f803e3d5ffd5b5050604080516001600160a01b0388811682526020820188905291810186905281891693508982169250908a16907ffcc2841e9e72e6d610944e1b668912e92d5df94003055dbe06d615ba8d9efad49060600160405180910390a4610d9d6001609755565b50505050505050565b610db3858585858561188a565b5050505050565b610d9d8787878787878761143a565b610dd16117c7565b6001600160a01b038116610e4d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016104f8565b610e5681611821565b50565b61012f546001600160a01b0316338114610eb55760405162461bcd60e51b815260206004820152601760248201527f6f6e6c79206d657373656e6765722063616e2063616c6c00000000000000000060448201526064016104f8565b806001600160a01b0316636e296e456040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ef1573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610f159190612435565b61012d546001600160a01b03908116911614610f735760405162461bcd60e51b815260206004820152601860248201527f6f6e6c792063616c6c20627920636f756e74657270617274000000000000000060448201526064016104f8565b610f7b611218565b6001600160a01b038816610fd15760405162461bcd60e51b815260206004820152601960248201527f746f6b656e20616464726573732063616e6e6f7420626520300000000000000060448201526064016104f8565b6001600160a01b03808a165f90815261015e602052604090205489821691161461103d5760405162461bcd60e51b815260206004820152601160248201527f6c3220746f6b656e206d69736d6174636800000000000000000000000000000060448201526064016104f8565b6040517f2eb2c2d60000000000000000000000000000000000000000000000000000000081526001600160a01b038a1690632eb2c2d69061108c9030908a908a908a908a908a9060040161266f565b5f604051808303815f87803b1580156110a3575f80fd5b505af11580156110b5573d5f803e3d5ffd5b50505050866001600160a01b0316886001600160a01b03168a6001600160a01b03167f45294b6ad6ad2408cc3ee9a37203aa1b0480616667a97b157c52ac9294cbc258898989898960405161110e9594939291906126cc565b60405180910390a46111206001609755565b505050505050505050565b611138843385858561188a565b50505050565b6111466117c7565b6001600160a01b03811661119c5760405162461bcd60e51b815260206004820152601960248201527f746f6b656e20616464726573732063616e6e6f7420626520300000000000000060448201526064016104f8565b6001600160a01b038083165f81815261015e602052604080822080548686167fffffffffffffffffffffffff0000000000000000000000000000000000000000821681179092559151919094169392849290917f2069a26c43c36ffaabe0c2d19bf65e55dd03abecdc449f5cc9663491e97f709d9190a4505050565b60026097540361126a5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016104f8565b6002609755565b6001609755565b5f54610100900460ff16610ac65760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016104f8565b6001600160a01b03831661134a5760405162461bcd60e51b815260206004820152601860248201527f7a65726f20636f756e746572706172742061646472657373000000000000000060448201526064016104f8565b6001600160a01b0381166113a05760405162461bcd60e51b815260206004820152601660248201527f7a65726f206d657373656e67657220616464726573730000000000000000000060448201526064016104f8565b6113a8611b80565b6113b0611c04565b61012d80546001600160a01b038086167fffffffffffffffffffffffff00000000000000000000000000000000000000009283161790925561012f805484841692169190911790558216156109135761012e80546001600160a01b0384167fffffffffffffffffffffffff0000000000000000000000000000000000000000909116179055505050565b611442611218565b8361148f5760405162461bcd60e51b815260206004820152601360248201527f6e6f20746f6b656e20746f206465706f7369740000000000000000000000000060448201526064016104f8565b8382146114de5760405162461bcd60e51b815260206004820152600f60248201527f6c656e677468206d69736d61746368000000000000000000000000000000000060448201526064016104f8565b5f5b82811015611557575f8484838181106114fb576114fb61270d565b905060200201351161154f5760405162461bcd60e51b815260206004820152601360248201527f6465706f736974207a65726f20616d6f756e740000000000000000000000000060448201526064016104f8565b6001016114e0565b506001600160a01b038088165f90815261015e602052604090205416806115c05760405162461bcd60e51b815260206004820152601960248201527f6e6f20636f72726573706f6e64696e67206c3220746f6b656e0000000000000060448201526064016104f8565b6040517f2eb2c2d600000000000000000000000000000000000000000000000000000000815233906001600160a01b038a1690632eb2c2d69061161190849030908c908c908c908c9060040161266f565b5f604051808303815f87803b158015611628575f80fd5b505af115801561163a573d5f803e3d5ffd5b505050505f8983838b8b8b8b8b60405160240161165e98979695949392919061273a565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167feaa72ad90000000000000000000000000000000000000000000000000000000017905261012f5461012d5491517f5f7b15770000000000000000000000000000000000000000000000000000000081529293506001600160a01b0390811692635f7b157792349261172f929116905f9087908b908a90600401612798565b5f604051808303818588803b158015611746575f80fd5b505af1158015611758573d5f803e3d5ffd5b5050505050816001600160a01b0316836001600160a01b03168b6001600160a01b03167f743f65db61a23bc629915d35e22af5cf13478a8b3dbd154d3e5db0149509756d8c8c8c8c8c6040516117b29594939291906126cc565b60405180910390a4505050610d9d6001609755565b60fb546001600160a01b03163314610ac65760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104f8565b60fb80546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35050565b611892611218565b5f82116118e15760405162461bcd60e51b815260206004820152601360248201527f6465706f736974207a65726f20616d6f756e740000000000000000000000000060448201526064016104f8565b6001600160a01b038086165f90815261015e602052604090205416806119495760405162461bcd60e51b815260206004820152601960248201527f6e6f20636f72726573706f6e64696e67206c3220746f6b656e0000000000000060448201526064016104f8565b5f336040517ff242432a0000000000000000000000000000000000000000000000000000000081526001600160a01b038083166004830152306024830152604482018890526064820187905260a060848301525f60a48301529192509088169063f242432a9060c4015f604051808303815f87803b1580156119c9575f80fd5b505af11580156119db573d5f803e3d5ffd5b50506040516001600160a01b03808b166024830152808616604483015280851660648301528916608482015260a4810188905260c481018790525f925060e4019050604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f4764cc620000000000000000000000000000000000000000000000000000000017905261012f5461012d5491517f5f7b15770000000000000000000000000000000000000000000000000000000081529293506001600160a01b0390811692635f7b1577923492611aee929116905f9087908b908a90600401612798565b5f604051808303818588803b158015611b05575f80fd5b505af1158015611b17573d5f803e3d5ffd5b5050604080516001600160a01b038c81168252602082018c90529181018a905281871694508782169350908c1691507f7f6552b688fa94306ca59e44dd4454ff550542445a3f1cb39b8c768be6f5c08a9060600160405180910390a4505050610db36001609755565b5f54610100900460ff16611bfc5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016104f8565b610ac6611c88565b5f54610100900460ff16611c805760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016104f8565b610ac6611d04565b5f54610100900460ff166112715760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016104f8565b5f54610100900460ff16611d805760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016104f8565b610ac633611821565b5f60208284031215611d99575f80fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114611dc8575f80fd5b9392505050565b5f8060208385031215611de0575f80fd5b823567ffffffffffffffff80821115611df7575f80fd5b818501915085601f830112611e0a575f80fd5b813581811115611e18575f80fd5b866020828501011115611e29575f80fd5b60209290920196919550909350505050565b6001600160a01b0381168114610e56575f80fd5b5f8060408385031215611e60575f80fd5b8235611e6b81611e3b565b91506020830135611e7b81611e3b565b809150509250929050565b5f8083601f840112611e96575f80fd5b50813567ffffffffffffffff811115611ead575f80fd5b6020830191508360208260051b8501011115611ec7575f80fd5b9250929050565b5f805f805f8060808789031215611ee3575f80fd5b8635611eee81611e3b565b9550602087013567ffffffffffffffff80821115611f0a575f80fd5b611f168a838b01611e86565b90975095506040890135915080821115611f2e575f80fd5b50611f3b89828a01611e86565b979a9699509497949695606090950135949350505050565b5f805f805f8060c08789031215611f68575f80fd5b8635611f7381611e3b565b95506020870135611f8381611e3b565b94506040870135611f9381611e3b565b93506060870135611fa381611e3b565b9598949750929560808101359460a0909101359350915050565b5f805f805f60a08688031215611fd1575f80fd5b8535611fdc81611e3b565b94506020860135611fec81611e3b565b94979496505050506040830135926060810135926080909101359150565b5f6020828403121561201a575f80fd5b8135611dc881611e3b565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561209957612099612025565b604052919050565b5f82601f8301126120b0575f80fd5b8135602067ffffffffffffffff8211156120cc576120cc612025565b8160051b6120db828201612052565b92835284810182019282810190878511156120f4575f80fd5b83870192505b84831015612113578235825291830191908301906120fa565b979650505050505050565b5f82601f83011261212d575f80fd5b813567ffffffffffffffff81111561214757612147612025565b61217860207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601612052565b81815284602083860101111561218c575f80fd5b816020850160208301375f918101602001919091529392505050565b5f805f805f60a086880312156121bc575f80fd5b85356121c781611e3b565b945060208601356121d781611e3b565b9350604086013567ffffffffffffffff808211156121f3575f80fd5b6121ff89838a016120a1565b94506060880135915080821115612214575f80fd5b61222089838a016120a1565b93506080880135915080821115612235575f80fd5b506122428882890161211e565b9150509295509295909350565b5f805f805f805f60a0888a031215612265575f80fd5b873561227081611e3b565b9650602088013561228081611e3b565b9550604088013567ffffffffffffffff8082111561229c575f80fd5b6122a88b838c01611e86565b909750955060608a01359150808211156122c0575f80fd5b506122cd8a828b01611e86565b989b979a50959894979596608090950135949350505050565b5f805f805f60a086880312156122fa575f80fd5b853561230581611e3b565b9450602086013561231581611e3b565b93506040860135925060608601359150608086013567ffffffffffffffff81111561233e575f80fd5b6122428882890161211e565b5f805f805f805f8060c0898b031215612361575f80fd5b883561236c81611e3b565b9750602089013561237c81611e3b565b9650604089013561238c81611e3b565b9550606089013561239c81611e3b565b9450608089013567ffffffffffffffff808211156123b8575f80fd5b6123c48c838d01611e86565b909650945060a08b01359150808211156123dc575f80fd5b506123e98b828c01611e86565b999c989b5096995094979396929594505050565b5f805f8060808587031215612410575f80fd5b843561241b81611e3b565b966020860135965060408601359560600135945092505050565b5f60208284031215612445575f80fd5b8151611dc881611e3b565b5f808585111561245e575f80fd5b8386111561246a575f80fd5b5050820193919092039150565b7fffffffff0000000000000000000000000000000000000000000000000000000081358181169160048510156124b75780818660040360031b1b83161692505b505092915050565b5f805f805f8060c087890312156124d4575f80fd5b86356124df81611e3b565b955060208701356124ef81611e3b565b945060408701356124ff81611e3b565b9350606087013561250f81611e3b565b9250608087013567ffffffffffffffff8082111561252b575f80fd5b6125378a838b016120a1565b935060a089013591508082111561254c575f80fd5b5061255989828a016120a1565b9150509295509295509295565b5f815180845260208085019450602084015f5b8381101561259557815187529582019590820190600101612579565b509495945050505050565b5f6001600160a01b03808716835280861660208401525060a060408301526125cb60a0830185612566565b82810360608401526125dd8185612566565b83810360809094019390935250505f8152602001949350505050565b604081525f61260b6040830185612566565b828103602084015261261d8185612566565b95945050505050565b8183525f7f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831115612656575f80fd5b8260051b80836020870137939093016020019392505050565b5f6001600160a01b03808916835280881660208401525060a0604083015261269b60a083018688612626565b82810360608401526126ae818587612626565b83810360809094019390935250505f81526020019695505050505050565b6001600160a01b0386168152606060208201525f6126ee606083018688612626565b8281036040840152612701818587612626565b98975050505050505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f6001600160a01b03808b168352808a166020840152808916604084015280881660608401525060c0608083015261277660c083018688612626565b82810360a0840152612789818587612626565b9b9a5050505050505050505050565b6001600160a01b03861681525f602086602084015260a0604084015285518060a08501525f5b818110156127da5787810183015185820160c0015282016127be565b505f60c0828601015260c07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8301168501019250505083606083015261282d60808301846001600160a01b03169052565b969550505050505056fea164736f6c6343000818000a",
}

// L1ERC1155GatewayABI is the input ABI used to generate the binding from.
// Deprecated: Use L1ERC1155GatewayMetaData.ABI instead.
var L1ERC1155GatewayABI = L1ERC1155GatewayMetaData.ABI

// L1ERC1155GatewayBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use L1ERC1155GatewayMetaData.Bin instead.
var L1ERC1155GatewayBin = L1ERC1155GatewayMetaData.Bin

// DeployL1ERC1155Gateway deploys a new Ethereum contract, binding an instance of L1ERC1155Gateway to it.
func DeployL1ERC1155Gateway(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *L1ERC1155Gateway, error) {
	parsed, err := L1ERC1155GatewayMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(L1ERC1155GatewayBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &L1ERC1155Gateway{L1ERC1155GatewayCaller: L1ERC1155GatewayCaller{contract: contract}, L1ERC1155GatewayTransactor: L1ERC1155GatewayTransactor{contract: contract}, L1ERC1155GatewayFilterer: L1ERC1155GatewayFilterer{contract: contract}}, nil
}

// L1ERC1155Gateway is an auto generated Go binding around an Ethereum contract.
type L1ERC1155Gateway struct {
	L1ERC1155GatewayCaller     // Read-only binding to the contract
	L1ERC1155GatewayTransactor // Write-only binding to the contract
	L1ERC1155GatewayFilterer   // Log filterer for contract events
}

// L1ERC1155GatewayCaller is an auto generated read-only Go binding around an Ethereum contract.
type L1ERC1155GatewayCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// L1ERC1155GatewayTransactor is an auto generated write-only Go binding around an Ethereum contract.
type L1ERC1155GatewayTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// L1ERC1155GatewayFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type L1ERC1155GatewayFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// L1ERC1155GatewaySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type L1ERC1155GatewaySession struct {
	Contract     *L1ERC1155Gateway // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// L1ERC1155GatewayCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type L1ERC1155GatewayCallerSession struct {
	Contract *L1ERC1155GatewayCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts           // Call options to use throughout this session
}

// L1ERC1155GatewayTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type L1ERC1155GatewayTransactorSession struct {
	Contract     *L1ERC1155GatewayTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// L1ERC1155GatewayRaw is an auto generated low-level Go binding around an Ethereum contract.
type L1ERC1155GatewayRaw struct {
	Contract *L1ERC1155Gateway // Generic contract binding to access the raw methods on
}

// L1ERC1155GatewayCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type L1ERC1155GatewayCallerRaw struct {
	Contract *L1ERC1155GatewayCaller // Generic read-only contract binding to access the raw methods on
}

// L1ERC1155GatewayTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type L1ERC1155GatewayTransactorRaw struct {
	Contract *L1ERC1155GatewayTransactor // Generic write-only contract binding to access the raw methods on
}

// NewL1ERC1155Gateway creates a new instance of L1ERC1155Gateway, bound to a specific deployed contract.
func NewL1ERC1155Gateway(address common.Address, backend bind.ContractBackend) (*L1ERC1155Gateway, error) {
	contract, err := bindL1ERC1155Gateway(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &L1ERC1155Gateway{L1ERC1155GatewayCaller: L1ERC1155GatewayCaller{contract: contract}, L1ERC1155GatewayTransactor: L1ERC1155GatewayTransactor{contract: contract}, L1ERC1155GatewayFilterer: L1ERC1155GatewayFilterer{contract: contract}}, nil
}

// NewL1ERC1155GatewayCaller creates a new read-only instance of L1ERC1155Gateway, bound to a specific deployed contract.
func NewL1ERC1155GatewayCaller(address common.Address, caller bind.ContractCaller) (*L1ERC1155GatewayCaller, error) {
	contract, err := bindL1ERC1155Gateway(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &L1ERC1155GatewayCaller{contract: contract}, nil
}

// NewL1ERC1155GatewayTransactor creates a new write-only instance of L1ERC1155Gateway, bound to a specific deployed contract.
func NewL1ERC1155GatewayTransactor(address common.Address, transactor bind.ContractTransactor) (*L1ERC1155GatewayTransactor, error) {
	contract, err := bindL1ERC1155Gateway(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &L1ERC1155GatewayTransactor{contract: contract}, nil
}

// NewL1ERC1155GatewayFilterer creates a new log filterer instance of L1ERC1155Gateway, bound to a specific deployed contract.
func NewL1ERC1155GatewayFilterer(address common.Address, filterer bind.ContractFilterer) (*L1ERC1155GatewayFilterer, error) {
	contract, err := bindL1ERC1155Gateway(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &L1ERC1155GatewayFilterer{contract: contract}, nil
}

// bindL1ERC1155Gateway binds a generic wrapper to an already deployed contract.
func bindL1ERC1155Gateway(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := L1ERC1155GatewayMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_L1ERC1155Gateway *L1ERC1155GatewayRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _L1ERC1155Gateway.Contract.L1ERC1155GatewayCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_L1ERC1155Gateway *L1ERC1155GatewayRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _L1ERC1155Gateway.Contract.L1ERC1155GatewayTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_L1ERC1155Gateway *L1ERC1155GatewayRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _L1ERC1155Gateway.Contract.L1ERC1155GatewayTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_L1ERC1155Gateway *L1ERC1155GatewayCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _L1ERC1155Gateway.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_L1ERC1155Gateway *L1ERC1155GatewayTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _L1ERC1155Gateway.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_L1ERC1155Gateway *L1ERC1155GatewayTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _L1ERC1155Gateway.Contract.contract.Transact(opts, method, params...)
}

// Counterpart is a free data retrieval call binding the contract method 0x797594b0.
//
// Solidity: function counterpart() view returns(address)
func (_L1ERC1155Gateway *L1ERC1155GatewayCaller) Counterpart(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _L1ERC1155Gateway.contract.Call(opts, &out, "counterpart")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Counterpart is a free data retrieval call binding the contract method 0x797594b0.
//
// Solidity: function counterpart() view returns(address)
func (_L1ERC1155Gateway *L1ERC1155GatewaySession) Counterpart() (common.Address, error) {
	return _L1ERC1155Gateway.Contract.Counterpart(&_L1ERC1155Gateway.CallOpts)
}

// Counterpart is a free data retrieval call binding the contract method 0x797594b0.
//
// Solidity: function counterpart() view returns(address)
func (_L1ERC1155Gateway *L1ERC1155GatewayCallerSession) Counterpart() (common.Address, error) {
	return _L1ERC1155Gateway.Contract.Counterpart(&_L1ERC1155Gateway.CallOpts)
}

// Messenger is a free data retrieval call binding the contract method 0x3cb747bf.
//
// Solidity: function messenger() view returns(address)
func (_L1ERC1155Gateway *L1ERC1155GatewayCaller) Messenger(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _L1ERC1155Gateway.contract.Call(opts, &out, "messenger")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Messenger is a free data retrieval call binding the contract method 0x3cb747bf.
//
// Solidity: function messenger() view returns(address)
func (_L1ERC1155Gateway *L1ERC1155GatewaySession) Messenger() (common.Address, error) {
	return _L1ERC1155Gateway.Contract.Messenger(&_L1ERC1155Gateway.CallOpts)
}

// Messenger is a free data retrieval call binding the contract method 0x3cb747bf.
//
// Solidity: function messenger() view returns(address)
func (_L1ERC1155Gateway *L1ERC1155GatewayCallerSession) Messenger() (common.Address, error) {
	return _L1ERC1155Gateway.Contract.Messenger(&_L1ERC1155Gateway.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_L1ERC1155Gateway *L1ERC1155GatewayCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _L1ERC1155Gateway.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_L1ERC1155Gateway *L1ERC1155GatewaySession) Owner() (common.Address, error) {
	return _L1ERC1155Gateway.Contract.Owner(&_L1ERC1155Gateway.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_L1ERC1155Gateway *L1ERC1155GatewayCallerSession) Owner() (common.Address, error) {
	return _L1ERC1155Gateway.Contract.Owner(&_L1ERC1155Gateway.CallOpts)
}

// Router is a free data retrieval call binding the contract method 0xf887ea40.
//
// Solidity: function router() view returns(address)
func (_L1ERC1155Gateway *L1ERC1155GatewayCaller) Router(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _L1ERC1155Gateway.contract.Call(opts, &out, "router")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Router is a free data retrieval call binding the contract method 0xf887ea40.
//
// Solidity: function router() view returns(address)
func (_L1ERC1155Gateway *L1ERC1155GatewaySession) Router() (common.Address, error) {
	return _L1ERC1155Gateway.Contract.Router(&_L1ERC1155Gateway.CallOpts)
}

// Router is a free data retrieval call binding the contract method 0xf887ea40.
//
// Solidity: function router() view returns(address)
func (_L1ERC1155Gateway *L1ERC1155GatewayCallerSession) Router() (common.Address, error) {
	return _L1ERC1155Gateway.Contract.Router(&_L1ERC1155Gateway.CallOpts)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_L1ERC1155Gateway *L1ERC1155GatewayCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _L1ERC1155Gateway.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_L1ERC1155Gateway *L1ERC1155GatewaySession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _L1ERC1155Gateway.Contract.SupportsInterface(&_L1ERC1155Gateway.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_L1ERC1155Gateway *L1ERC1155GatewayCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _L1ERC1155Gateway.Contract.SupportsInterface(&_L1ERC1155Gateway.CallOpts, interfaceId)
}

// TokenMapping is a free data retrieval call binding the contract method 0xba27f50b.
//
// Solidity: function tokenMapping(address ) view returns(address)
func (_L1ERC1155Gateway *L1ERC1155GatewayCaller) TokenMapping(opts *bind.CallOpts, arg0 common.Address) (common.Address, error) {
	var out []interface{}
	err := _L1ERC1155Gateway.contract.Call(opts, &out, "tokenMapping", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// TokenMapping is a free data retrieval call binding the contract method 0xba27f50b.
//
// Solidity: function tokenMapping(address ) view returns(address)
func (_L1ERC1155Gateway *L1ERC1155GatewaySession) TokenMapping(arg0 common.Address) (common.Address, error) {
	return _L1ERC1155Gateway.Contract.TokenMapping(&_L1ERC1155Gateway.CallOpts, arg0)
}

// TokenMapping is a free data retrieval call binding the contract method 0xba27f50b.
//
// Solidity: function tokenMapping(address ) view returns(address)
func (_L1ERC1155Gateway *L1ERC1155GatewayCallerSession) TokenMapping(arg0 common.Address) (common.Address, error) {
	return _L1ERC1155Gateway.Contract.TokenMapping(&_L1ERC1155Gateway.CallOpts, arg0)
}

// BatchDepositERC1155 is a paid mutator transaction binding the contract method 0x5ee8e74c.
//
// Solidity: function batchDepositERC1155(address _token, uint256[] _tokenIds, uint256[] _amounts, uint256 _gasLimit) payable returns()
func (_L1ERC1155Gateway *L1ERC1155GatewayTransactor) BatchDepositERC1155(opts *bind.TransactOpts, _token common.Address, _tokenIds []*big.Int, _amounts []*big.Int, _gasLimit *big.Int) (*types.Transaction, error) {
	return _L1ERC1155Gateway.contract.Transact(opts, "batchDepositERC1155", _token, _tokenIds, _amounts, _gasLimit)
}

// BatchDepositERC1155 is a paid mutator transaction binding the contract method 0x5ee8e74c.
//
// Solidity: function batchDepositERC1155(address _token, uint256[] _tokenIds, uint256[] _amounts, uint256 _gasLimit) payable returns()
func (_L1ERC1155Gateway *L1ERC1155GatewaySession) BatchDepositERC1155(_token common.Address, _tokenIds []*big.Int, _amounts []*big.Int, _gasLimit *big.Int) (*types.Transaction, error) {
	return _L1ERC1155Gateway.Contract.BatchDepositERC1155(&_L1ERC1155Gateway.TransactOpts, _token, _tokenIds, _amounts, _gasLimit)
}

// BatchDepositERC1155 is a paid mutator transaction binding the contract method 0x5ee8e74c.
//
// Solidity: function batchDepositERC1155(address _token, uint256[] _tokenIds, uint256[] _amounts, uint256 _gasLimit) payable returns()
func (_L1ERC1155Gateway *L1ERC1155GatewayTransactorSession) BatchDepositERC1155(_token common.Address, _tokenIds []*big.Int, _amounts []*big.Int, _gasLimit *big.Int) (*types.Transaction, error) {
	return _L1ERC1155Gateway.Contract.BatchDepositERC1155(&_L1ERC1155Gateway.TransactOpts, _token, _tokenIds, _amounts, _gasLimit)
}

// BatchDepositERC11550 is a paid mutator transaction binding the contract method 0xc99dac9b.
//
// Solidity: function batchDepositERC1155(address _token, address _to, uint256[] _tokenIds, uint256[] _amounts, uint256 _gasLimit) payable returns()
func (_L1ERC1155Gateway *L1ERC1155GatewayTransactor) BatchDepositERC11550(opts *bind.TransactOpts, _token common.Address, _to common.Address, _tokenIds []*big.Int, _amounts []*big.Int, _gasLimit *big.Int) (*types.Transaction, error) {
	return _L1ERC1155Gateway.contract.Transact(opts, "batchDepositERC11550", _token, _to, _tokenIds, _amounts, _gasLimit)
}

// BatchDepositERC11550 is a paid mutator transaction binding the contract method 0xc99dac9b.
//
// Solidity: function batchDepositERC1155(address _token, address _to, uint256[] _tokenIds, uint256[] _amounts, uint256 _gasLimit) payable returns()
func (_L1ERC1155Gateway *L1ERC1155GatewaySession) BatchDepositERC11550(_token common.Address, _to common.Address, _tokenIds []*big.Int, _amounts []*big.Int, _gasLimit *big.Int) (*types.Transaction, error) {
	return _L1ERC1155Gateway.Contract.BatchDepositERC11550(&_L1ERC1155Gateway.TransactOpts, _token, _to, _tokenIds, _amounts, _gasLimit)
}

// BatchDepositERC11550 is a paid mutator transaction binding the contract method 0xc99dac9b.
//
// Solidity: function batchDepositERC1155(address _token, address _to, uint256[] _tokenIds, uint256[] _amounts, uint256 _gasLimit) payable returns()
func (_L1ERC1155Gateway *L1ERC1155GatewayTransactorSession) BatchDepositERC11550(_token common.Address, _to common.Address, _tokenIds []*big.Int, _amounts []*big.Int, _gasLimit *big.Int) (*types.Transaction, error) {
	return _L1ERC1155Gateway.Contract.BatchDepositERC11550(&_L1ERC1155Gateway.TransactOpts, _token, _to, _tokenIds, _amounts, _gasLimit)
}

// DepositERC1155 is a paid mutator transaction binding the contract method 0xa901cf8a.
//
// Solidity: function depositERC1155(address _token, address _to, uint256 _tokenId, uint256 _amount, uint256 _gasLimit) payable returns()
func (_L1ERC1155Gateway *L1ERC1155GatewayTransactor) DepositERC1155(opts *bind.TransactOpts, _token common.Address, _to common.Address, _tokenId *big.Int, _amount *big.Int, _gasLimit *big.Int) (*types.Transaction, error) {
	return _L1ERC1155Gateway.contract.Transact(opts, "depositERC1155", _token, _to, _tokenId, _amount, _gasLimit)
}

// DepositERC1155 is a paid mutator transaction binding the contract method 0xa901cf8a.
//
// Solidity: function depositERC1155(address _token, address _to, uint256 _tokenId, uint256 _amount, uint256 _gasLimit) payable returns()
func (_L1ERC1155Gateway *L1ERC1155GatewaySession) DepositERC1155(_token common.Address, _to common.Address, _tokenId *big.Int, _amount *big.Int, _gasLimit *big.Int) (*types.Transaction, error) {
	return _L1ERC1155Gateway.Contract.DepositERC1155(&_L1ERC1155Gateway.TransactOpts, _token, _to, _tokenId, _amount, _gasLimit)
}

// DepositERC1155 is a paid mutator transaction binding the contract method 0xa901cf8a.
//
// Solidity: function depositERC1155(address _token, address _to, uint256 _tokenId, uint256 _amount, uint256 _gasLimit) payable returns()
func (_L1ERC1155Gateway *L1ERC1155GatewayTransactorSession) DepositERC1155(_token common.Address, _to common.Address, _tokenId *big.Int, _amount *big.Int, _gasLimit *big.Int) (*types.Transaction, error) {
	return _L1ERC1155Gateway.Contract.DepositERC1155(&_L1ERC1155Gateway.TransactOpts, _token, _to, _tokenId, _amount, _gasLimit)
}

// DepositERC11550 is a paid mutator transaction binding the contract method 0xf998fe9d.
//
// Solidity: function depositERC1155(address _token, uint256 _tokenId, uint256 _amount, uint256 _gasLimit) payable returns()
func (_L1ERC1155Gateway *L1ERC1155GatewayTransactor) DepositERC11550(opts *bind.TransactOpts, _token common.Address, _tokenId *big.Int, _amount *big.Int, _gasLimit *big.Int) (*types.Transaction, error) {
	return _L1ERC1155Gateway.contract.Transact(opts, "depositERC11550", _token, _tokenId, _amount, _gasLimit)
}

// DepositERC11550 is a paid mutator transaction binding the contract method 0xf998fe9d.
//
// Solidity: function depositERC1155(address _token, uint256 _tokenId, uint256 _amount, uint256 _gasLimit) payable returns()
func (_L1ERC1155Gateway *L1ERC1155GatewaySession) DepositERC11550(_token common.Address, _tokenId *big.Int, _amount *big.Int, _gasLimit *big.Int) (*types.Transaction, error) {
	return _L1ERC1155Gateway.Contract.DepositERC11550(&_L1ERC1155Gateway.TransactOpts, _token, _tokenId, _amount, _gasLimit)
}

// DepositERC11550 is a paid mutator transaction binding the contract method 0xf998fe9d.
//
// Solidity: function depositERC1155(address _token, uint256 _tokenId, uint256 _amount, uint256 _gasLimit) payable returns()
func (_L1ERC1155Gateway *L1ERC1155GatewayTransactorSession) DepositERC11550(_token common.Address, _tokenId *big.Int, _amount *big.Int, _gasLimit *big.Int) (*types.Transaction, error) {
	return _L1ERC1155Gateway.Contract.DepositERC11550(&_L1ERC1155Gateway.TransactOpts, _token, _tokenId, _amount, _gasLimit)
}

// FinalizeBatchWithdrawERC1155 is a paid mutator transaction binding the contract method 0xf92748d3.
//
// Solidity: function finalizeBatchWithdrawERC1155(address _l1Token, address _l2Token, address _from, address _to, uint256[] _tokenIds, uint256[] _amounts) returns()
func (_L1ERC1155Gateway *L1ERC1155GatewayTransactor) FinalizeBatchWithdrawERC1155(opts *bind.TransactOpts, _l1Token common.Address, _l2Token common.Address, _from common.Address, _to common.Address, _tokenIds []*big.Int, _amounts []*big.Int) (*types.Transaction, error) {
	return _L1ERC1155Gateway.contract.Transact(opts, "finalizeBatchWithdrawERC1155", _l1Token, _l2Token, _from, _to, _tokenIds, _amounts)
}

// FinalizeBatchWithdrawERC1155 is a paid mutator transaction binding the contract method 0xf92748d3.
//
// Solidity: function finalizeBatchWithdrawERC1155(address _l1Token, address _l2Token, address _from, address _to, uint256[] _tokenIds, uint256[] _amounts) returns()
func (_L1ERC1155Gateway *L1ERC1155GatewaySession) FinalizeBatchWithdrawERC1155(_l1Token common.Address, _l2Token common.Address, _from common.Address, _to common.Address, _tokenIds []*big.Int, _amounts []*big.Int) (*types.Transaction, error) {
	return _L1ERC1155Gateway.Contract.FinalizeBatchWithdrawERC1155(&_L1ERC1155Gateway.TransactOpts, _l1Token, _l2Token, _from, _to, _tokenIds, _amounts)
}

// FinalizeBatchWithdrawERC1155 is a paid mutator transaction binding the contract method 0xf92748d3.
//
// Solidity: function finalizeBatchWithdrawERC1155(address _l1Token, address _l2Token, address _from, address _to, uint256[] _tokenIds, uint256[] _amounts) returns()
func (_L1ERC1155Gateway *L1ERC1155GatewayTransactorSession) FinalizeBatchWithdrawERC1155(_l1Token common.Address, _l2Token common.Address, _from common.Address, _to common.Address, _tokenIds []*big.Int, _amounts []*big.Int) (*types.Transaction, error) {
	return _L1ERC1155Gateway.Contract.FinalizeBatchWithdrawERC1155(&_L1ERC1155Gateway.TransactOpts, _l1Token, _l2Token, _from, _to, _tokenIds, _amounts)
}

// FinalizeWithdrawERC1155 is a paid mutator transaction binding the contract method 0x730608b3.
//
// Solidity: function finalizeWithdrawERC1155(address _l1Token, address _l2Token, address _from, address _to, uint256 _tokenId, uint256 _amount) returns()
func (_L1ERC1155Gateway *L1ERC1155GatewayTransactor) FinalizeWithdrawERC1155(opts *bind.TransactOpts, _l1Token common.Address, _l2Token common.Address, _from common.Address, _to common.Address, _tokenId *big.Int, _amount *big.Int) (*types.Transaction, error) {
	return _L1ERC1155Gateway.contract.Transact(opts, "finalizeWithdrawERC1155", _l1Token, _l2Token, _from, _to, _tokenId, _amount)
}

// FinalizeWithdrawERC1155 is a paid mutator transaction binding the contract method 0x730608b3.
//
// Solidity: function finalizeWithdrawERC1155(address _l1Token, address _l2Token, address _from, address _to, uint256 _tokenId, uint256 _amount) returns()
func (_L1ERC1155Gateway *L1ERC1155GatewaySession) FinalizeWithdrawERC1155(_l1Token common.Address, _l2Token common.Address, _from common.Address, _to common.Address, _tokenId *big.Int, _amount *big.Int) (*types.Transaction, error) {
	return _L1ERC1155Gateway.Contract.FinalizeWithdrawERC1155(&_L1ERC1155Gateway.TransactOpts, _l1Token, _l2Token, _from, _to, _tokenId, _amount)
}

// FinalizeWithdrawERC1155 is a paid mutator transaction binding the contract method 0x730608b3.
//
// Solidity: function finalizeWithdrawERC1155(address _l1Token, address _l2Token, address _from, address _to, uint256 _tokenId, uint256 _amount) returns()
func (_L1ERC1155Gateway *L1ERC1155GatewayTransactorSession) FinalizeWithdrawERC1155(_l1Token common.Address, _l2Token common.Address, _from common.Address, _to common.Address, _tokenId *big.Int, _amount *big.Int) (*types.Transaction, error) {
	return _L1ERC1155Gateway.Contract.FinalizeWithdrawERC1155(&_L1ERC1155Gateway.TransactOpts, _l1Token, _l2Token, _from, _to, _tokenId, _amount)
}

// Initialize is a paid mutator transaction binding the contract method 0x485cc955.
//
// Solidity: function initialize(address _counterpart, address _messenger) returns()
func (_L1ERC1155Gateway *L1ERC1155GatewayTransactor) Initialize(opts *bind.TransactOpts, _counterpart common.Address, _messenger common.Address) (*types.Transaction, error) {
	return _L1ERC1155Gateway.contract.Transact(opts, "initialize", _counterpart, _messenger)
}

// Initialize is a paid mutator transaction binding the contract method 0x485cc955.
//
// Solidity: function initialize(address _counterpart, address _messenger) returns()
func (_L1ERC1155Gateway *L1ERC1155GatewaySession) Initialize(_counterpart common.Address, _messenger common.Address) (*types.Transaction, error) {
	return _L1ERC1155Gateway.Contract.Initialize(&_L1ERC1155Gateway.TransactOpts, _counterpart, _messenger)
}

// Initialize is a paid mutator transaction binding the contract method 0x485cc955.
//
// Solidity: function initialize(address _counterpart, address _messenger) returns()
func (_L1ERC1155Gateway *L1ERC1155GatewayTransactorSession) Initialize(_counterpart common.Address, _messenger common.Address) (*types.Transaction, error) {
	return _L1ERC1155Gateway.Contract.Initialize(&_L1ERC1155Gateway.TransactOpts, _counterpart, _messenger)
}

// OnDropMessage is a paid mutator transaction binding the contract method 0x14298c51.
//
// Solidity: function onDropMessage(bytes _message) payable returns()
func (_L1ERC1155Gateway *L1ERC1155GatewayTransactor) OnDropMessage(opts *bind.TransactOpts, _message []byte) (*types.Transaction, error) {
	return _L1ERC1155Gateway.contract.Transact(opts, "onDropMessage", _message)
}

// OnDropMessage is a paid mutator transaction binding the contract method 0x14298c51.
//
// Solidity: function onDropMessage(bytes _message) payable returns()
func (_L1ERC1155Gateway *L1ERC1155GatewaySession) OnDropMessage(_message []byte) (*types.Transaction, error) {
	return _L1ERC1155Gateway.Contract.OnDropMessage(&_L1ERC1155Gateway.TransactOpts, _message)
}

// OnDropMessage is a paid mutator transaction binding the contract method 0x14298c51.
//
// Solidity: function onDropMessage(bytes _message) payable returns()
func (_L1ERC1155Gateway *L1ERC1155GatewayTransactorSession) OnDropMessage(_message []byte) (*types.Transaction, error) {
	return _L1ERC1155Gateway.Contract.OnDropMessage(&_L1ERC1155Gateway.TransactOpts, _message)
}

// OnERC1155BatchReceived is a paid mutator transaction binding the contract method 0xbc197c81.
//
// Solidity: function onERC1155BatchReceived(address , address , uint256[] , uint256[] , bytes ) returns(bytes4)
func (_L1ERC1155Gateway *L1ERC1155GatewayTransactor) OnERC1155BatchReceived(opts *bind.TransactOpts, arg0 common.Address, arg1 common.Address, arg2 []*big.Int, arg3 []*big.Int, arg4 []byte) (*types.Transaction, error) {
	return _L1ERC1155Gateway.contract.Transact(opts, "onERC1155BatchReceived", arg0, arg1, arg2, arg3, arg4)
}

// OnERC1155BatchReceived is a paid mutator transaction binding the contract method 0xbc197c81.
//
// Solidity: function onERC1155BatchReceived(address , address , uint256[] , uint256[] , bytes ) returns(bytes4)
func (_L1ERC1155Gateway *L1ERC1155GatewaySession) OnERC1155BatchReceived(arg0 common.Address, arg1 common.Address, arg2 []*big.Int, arg3 []*big.Int, arg4 []byte) (*types.Transaction, error) {
	return _L1ERC1155Gateway.Contract.OnERC1155BatchReceived(&_L1ERC1155Gateway.TransactOpts, arg0, arg1, arg2, arg3, arg4)
}

// OnERC1155BatchReceived is a paid mutator transaction binding the contract method 0xbc197c81.
//
// Solidity: function onERC1155BatchReceived(address , address , uint256[] , uint256[] , bytes ) returns(bytes4)
func (_L1ERC1155Gateway *L1ERC1155GatewayTransactorSession) OnERC1155BatchReceived(arg0 common.Address, arg1 common.Address, arg2 []*big.Int, arg3 []*big.Int, arg4 []byte) (*types.Transaction, error) {
	return _L1ERC1155Gateway.Contract.OnERC1155BatchReceived(&_L1ERC1155Gateway.TransactOpts, arg0, arg1, arg2, arg3, arg4)
}

// OnERC1155Received is a paid mutator transaction binding the contract method 0xf23a6e61.
//
// Solidity: function onERC1155Received(address , address , uint256 , uint256 , bytes ) returns(bytes4)
func (_L1ERC1155Gateway *L1ERC1155GatewayTransactor) OnERC1155Received(opts *bind.TransactOpts, arg0 common.Address, arg1 common.Address, arg2 *big.Int, arg3 *big.Int, arg4 []byte) (*types.Transaction, error) {
	return _L1ERC1155Gateway.contract.Transact(opts, "onERC1155Received", arg0, arg1, arg2, arg3, arg4)
}

// OnERC1155Received is a paid mutator transaction binding the contract method 0xf23a6e61.
//
// Solidity: function onERC1155Received(address , address , uint256 , uint256 , bytes ) returns(bytes4)
func (_L1ERC1155Gateway *L1ERC1155GatewaySession) OnERC1155Received(arg0 common.Address, arg1 common.Address, arg2 *big.Int, arg3 *big.Int, arg4 []byte) (*types.Transaction, error) {
	return _L1ERC1155Gateway.Contract.OnERC1155Received(&_L1ERC1155Gateway.TransactOpts, arg0, arg1, arg2, arg3, arg4)
}

// OnERC1155Received is a paid mutator transaction binding the contract method 0xf23a6e61.
//
// Solidity: function onERC1155Received(address , address , uint256 , uint256 , bytes ) returns(bytes4)
func (_L1ERC1155Gateway *L1ERC1155GatewayTransactorSession) OnERC1155Received(arg0 common.Address, arg1 common.Address, arg2 *big.Int, arg3 *big.Int, arg4 []byte) (*types.Transaction, error) {
	return _L1ERC1155Gateway.Contract.OnERC1155Received(&_L1ERC1155Gateway.TransactOpts, arg0, arg1, arg2, arg3, arg4)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_L1ERC1155Gateway *L1ERC1155GatewayTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _L1ERC1155Gateway.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_L1ERC1155Gateway *L1ERC1155GatewaySession) RenounceOwnership() (*types.Transaction, error) {
	return _L1ERC1155Gateway.Contract.RenounceOwnership(&_L1ERC1155Gateway.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_L1ERC1155Gateway *L1ERC1155GatewayTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _L1ERC1155Gateway.Contract.RenounceOwnership(&_L1ERC1155Gateway.TransactOpts)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_L1ERC1155Gateway *L1ERC1155GatewayTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _L1ERC1155Gateway.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_L1ERC1155Gateway *L1ERC1155GatewaySession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _L1ERC1155Gateway.Contract.TransferOwnership(&_L1ERC1155Gateway.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_L1ERC1155Gateway *L1ERC1155GatewayTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _L1ERC1155Gateway.Contract.TransferOwnership(&_L1ERC1155Gateway.TransactOpts, newOwner)
}

// UpdateTokenMapping is a paid mutator transaction binding the contract method 0xfac752eb.
//
// Solidity: function updateTokenMapping(address _l1Token, address _l2Token) returns()
func (_L1ERC1155Gateway *L1ERC1155GatewayTransactor) UpdateTokenMapping(opts *bind.TransactOpts, _l1Token common.Address, _l2Token common.Address) (*types.Transaction, error) {
	return _L1ERC1155Gateway.contract.Transact(opts, "updateTokenMapping", _l1Token, _l2Token)
}

// UpdateTokenMapping is a paid mutator transaction binding the contract method 0xfac752eb.
//
// Solidity: function updateTokenMapping(address _l1Token, address _l2Token) returns()
func (_L1ERC1155Gateway *L1ERC1155GatewaySession) UpdateTokenMapping(_l1Token common.Address, _l2Token common.Address) (*types.Transaction, error) {
	return _L1ERC1155Gateway.Contract.UpdateTokenMapping(&_L1ERC1155Gateway.TransactOpts, _l1Token, _l2Token)
}

// UpdateTokenMapping is a paid mutator transaction binding the contract method 0xfac752eb.
//
// Solidity: function updateTokenMapping(address _l1Token, address _l2Token) returns()
func (_L1ERC1155Gateway *L1ERC1155GatewayTransactorSession) UpdateTokenMapping(_l1Token common.Address, _l2Token common.Address) (*types.Transaction, error) {
	return _L1ERC1155Gateway.Contract.UpdateTokenMapping(&_L1ERC1155Gateway.TransactOpts, _l1Token, _l2Token)
}

// L1ERC1155GatewayBatchDepositERC1155Iterator is returned from FilterBatchDepositERC1155 and is used to iterate over the raw logs and unpacked data for BatchDepositERC1155 events raised by the L1ERC1155Gateway contract.
type L1ERC1155GatewayBatchDepositERC1155Iterator struct {
	Event *L1ERC1155GatewayBatchDepositERC1155 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *L1ERC1155GatewayBatchDepositERC1155Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(L1ERC1155GatewayBatchDepositERC1155)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(L1ERC1155GatewayBatchDepositERC1155)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *L1ERC1155GatewayBatchDepositERC1155Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *L1ERC1155GatewayBatchDepositERC1155Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// L1ERC1155GatewayBatchDepositERC1155 represents a BatchDepositERC1155 event raised by the L1ERC1155Gateway contract.
type L1ERC1155GatewayBatchDepositERC1155 struct {
	L1Token  common.Address
	L2Token  common.Address
	From     common.Address
	To       common.Address
	TokenIds []*big.Int
	Amounts  []*big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterBatchDepositERC1155 is a free log retrieval operation binding the contract event 0x743f65db61a23bc629915d35e22af5cf13478a8b3dbd154d3e5db0149509756d.
//
// Solidity: event BatchDepositERC1155(address indexed _l1Token, address indexed _l2Token, address indexed _from, address _to, uint256[] _tokenIds, uint256[] _amounts)
func (_L1ERC1155Gateway *L1ERC1155GatewayFilterer) FilterBatchDepositERC1155(opts *bind.FilterOpts, _l1Token []common.Address, _l2Token []common.Address, _from []common.Address) (*L1ERC1155GatewayBatchDepositERC1155Iterator, error) {

	var _l1TokenRule []interface{}
	for _, _l1TokenItem := range _l1Token {
		_l1TokenRule = append(_l1TokenRule, _l1TokenItem)
	}
	var _l2TokenRule []interface{}
	for _, _l2TokenItem := range _l2Token {
		_l2TokenRule = append(_l2TokenRule, _l2TokenItem)
	}
	var _fromRule []interface{}
	for _, _fromItem := range _from {
		_fromRule = append(_fromRule, _fromItem)
	}

	logs, sub, err := _L1ERC1155Gateway.contract.FilterLogs(opts, "BatchDepositERC1155", _l1TokenRule, _l2TokenRule, _fromRule)
	if err != nil {
		return nil, err
	}
	return &L1ERC1155GatewayBatchDepositERC1155Iterator{contract: _L1ERC1155Gateway.contract, event: "BatchDepositERC1155", logs: logs, sub: sub}, nil
}

// WatchBatchDepositERC1155 is a free log subscription operation binding the contract event 0x743f65db61a23bc629915d35e22af5cf13478a8b3dbd154d3e5db0149509756d.
//
// Solidity: event BatchDepositERC1155(address indexed _l1Token, address indexed _l2Token, address indexed _from, address _to, uint256[] _tokenIds, uint256[] _amounts)
func (_L1ERC1155Gateway *L1ERC1155GatewayFilterer) WatchBatchDepositERC1155(opts *bind.WatchOpts, sink chan<- *L1ERC1155GatewayBatchDepositERC1155, _l1Token []common.Address, _l2Token []common.Address, _from []common.Address) (event.Subscription, error) {

	var _l1TokenRule []interface{}
	for _, _l1TokenItem := range _l1Token {
		_l1TokenRule = append(_l1TokenRule, _l1TokenItem)
	}
	var _l2TokenRule []interface{}
	for _, _l2TokenItem := range _l2Token {
		_l2TokenRule = append(_l2TokenRule, _l2TokenItem)
	}
	var _fromRule []interface{}
	for _, _fromItem := range _from {
		_fromRule = append(_fromRule, _fromItem)
	}

	logs, sub, err := _L1ERC1155Gateway.contract.WatchLogs(opts, "BatchDepositERC1155", _l1TokenRule, _l2TokenRule, _fromRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(L1ERC1155GatewayBatchDepositERC1155)
				if err := _L1ERC1155Gateway.contract.UnpackLog(event, "BatchDepositERC1155", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBatchDepositERC1155 is a log parse operation binding the contract event 0x743f65db61a23bc629915d35e22af5cf13478a8b3dbd154d3e5db0149509756d.
//
// Solidity: event BatchDepositERC1155(address indexed _l1Token, address indexed _l2Token, address indexed _from, address _to, uint256[] _tokenIds, uint256[] _amounts)
func (_L1ERC1155Gateway *L1ERC1155GatewayFilterer) ParseBatchDepositERC1155(log types.Log) (*L1ERC1155GatewayBatchDepositERC1155, error) {
	event := new(L1ERC1155GatewayBatchDepositERC1155)
	if err := _L1ERC1155Gateway.contract.UnpackLog(event, "BatchDepositERC1155", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// L1ERC1155GatewayBatchRefundERC1155Iterator is returned from FilterBatchRefundERC1155 and is used to iterate over the raw logs and unpacked data for BatchRefundERC1155 events raised by the L1ERC1155Gateway contract.
type L1ERC1155GatewayBatchRefundERC1155Iterator struct {
	Event *L1ERC1155GatewayBatchRefundERC1155 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *L1ERC1155GatewayBatchRefundERC1155Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(L1ERC1155GatewayBatchRefundERC1155)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(L1ERC1155GatewayBatchRefundERC1155)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *L1ERC1155GatewayBatchRefundERC1155Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *L1ERC1155GatewayBatchRefundERC1155Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// L1ERC1155GatewayBatchRefundERC1155 represents a BatchRefundERC1155 event raised by the L1ERC1155Gateway contract.
type L1ERC1155GatewayBatchRefundERC1155 struct {
	Token     common.Address
	Recipient common.Address
	TokenIds  []*big.Int
	Amounts   []*big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterBatchRefundERC1155 is a free log retrieval operation binding the contract event 0xe198c04cbd4522ed7825c7e6ab1ae33fdaf6ab3565c4a3fb4c0cf24338f306e6.
//
// Solidity: event BatchRefundERC1155(address indexed token, address indexed recipient, uint256[] tokenIds, uint256[] amounts)
func (_L1ERC1155Gateway *L1ERC1155GatewayFilterer) FilterBatchRefundERC1155(opts *bind.FilterOpts, token []common.Address, recipient []common.Address) (*L1ERC1155GatewayBatchRefundERC1155Iterator, error) {

	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}
	var recipientRule []interface{}
	for _, recipientItem := range recipient {
		recipientRule = append(recipientRule, recipientItem)
	}

	logs, sub, err := _L1ERC1155Gateway.contract.FilterLogs(opts, "BatchRefundERC1155", tokenRule, recipientRule)
	if err != nil {
		return nil, err
	}
	return &L1ERC1155GatewayBatchRefundERC1155Iterator{contract: _L1ERC1155Gateway.contract, event: "BatchRefundERC1155", logs: logs, sub: sub}, nil
}

// WatchBatchRefundERC1155 is a free log subscription operation binding the contract event 0xe198c04cbd4522ed7825c7e6ab1ae33fdaf6ab3565c4a3fb4c0cf24338f306e6.
//
// Solidity: event BatchRefundERC1155(address indexed token, address indexed recipient, uint256[] tokenIds, uint256[] amounts)
func (_L1ERC1155Gateway *L1ERC1155GatewayFilterer) WatchBatchRefundERC1155(opts *bind.WatchOpts, sink chan<- *L1ERC1155GatewayBatchRefundERC1155, token []common.Address, recipient []common.Address) (event.Subscription, error) {

	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}
	var recipientRule []interface{}
	for _, recipientItem := range recipient {
		recipientRule = append(recipientRule, recipientItem)
	}

	logs, sub, err := _L1ERC1155Gateway.contract.WatchLogs(opts, "BatchRefundERC1155", tokenRule, recipientRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(L1ERC1155GatewayBatchRefundERC1155)
				if err := _L1ERC1155Gateway.contract.UnpackLog(event, "BatchRefundERC1155", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBatchRefundERC1155 is a log parse operation binding the contract event 0xe198c04cbd4522ed7825c7e6ab1ae33fdaf6ab3565c4a3fb4c0cf24338f306e6.
//
// Solidity: event BatchRefundERC1155(address indexed token, address indexed recipient, uint256[] tokenIds, uint256[] amounts)
func (_L1ERC1155Gateway *L1ERC1155GatewayFilterer) ParseBatchRefundERC1155(log types.Log) (*L1ERC1155GatewayBatchRefundERC1155, error) {
	event := new(L1ERC1155GatewayBatchRefundERC1155)
	if err := _L1ERC1155Gateway.contract.UnpackLog(event, "BatchRefundERC1155", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// L1ERC1155GatewayDepositERC1155Iterator is returned from FilterDepositERC1155 and is used to iterate over the raw logs and unpacked data for DepositERC1155 events raised by the L1ERC1155Gateway contract.
type L1ERC1155GatewayDepositERC1155Iterator struct {
	Event *L1ERC1155GatewayDepositERC1155 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *L1ERC1155GatewayDepositERC1155Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(L1ERC1155GatewayDepositERC1155)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(L1ERC1155GatewayDepositERC1155)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *L1ERC1155GatewayDepositERC1155Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *L1ERC1155GatewayDepositERC1155Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// L1ERC1155GatewayDepositERC1155 represents a DepositERC1155 event raised by the L1ERC1155Gateway contract.
type L1ERC1155GatewayDepositERC1155 struct {
	L1Token common.Address
	L2Token common.Address
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Amount  *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterDepositERC1155 is a free log retrieval operation binding the contract event 0x7f6552b688fa94306ca59e44dd4454ff550542445a3f1cb39b8c768be6f5c08a.
//
// Solidity: event DepositERC1155(address indexed _l1Token, address indexed _l2Token, address indexed _from, address _to, uint256 _tokenId, uint256 _amount)
func (_L1ERC1155Gateway *L1ERC1155GatewayFilterer) FilterDepositERC1155(opts *bind.FilterOpts, _l1Token []common.Address, _l2Token []common.Address, _from []common.Address) (*L1ERC1155GatewayDepositERC1155Iterator, error) {

	var _l1TokenRule []interface{}
	for _, _l1TokenItem := range _l1Token {
		_l1TokenRule = append(_l1TokenRule, _l1TokenItem)
	}
	var _l2TokenRule []interface{}
	for _, _l2TokenItem := range _l2Token {
		_l2TokenRule = append(_l2TokenRule, _l2TokenItem)
	}
	var _fromRule []interface{}
	for _, _fromItem := range _from {
		_fromRule = append(_fromRule, _fromItem)
	}

	logs, sub, err := _L1ERC1155Gateway.contract.FilterLogs(opts, "DepositERC1155", _l1TokenRule, _l2TokenRule, _fromRule)
	if err != nil {
		return nil, err
	}
	return &L1ERC1155GatewayDepositERC1155Iterator{contract: _L1ERC1155Gateway.contract, event: "DepositERC1155", logs: logs, sub: sub}, nil
}

// WatchDepositERC1155 is a free log subscription operation binding the contract event 0x7f6552b688fa94306ca59e44dd4454ff550542445a3f1cb39b8c768be6f5c08a.
//
// Solidity: event DepositERC1155(address indexed _l1Token, address indexed _l2Token, address indexed _from, address _to, uint256 _tokenId, uint256 _amount)
func (_L1ERC1155Gateway *L1ERC1155GatewayFilterer) WatchDepositERC1155(opts *bind.WatchOpts, sink chan<- *L1ERC1155GatewayDepositERC1155, _l1Token []common.Address, _l2Token []common.Address, _from []common.Address) (event.Subscription, error) {

	var _l1TokenRule []interface{}
	for _, _l1TokenItem := range _l1Token {
		_l1TokenRule = append(_l1TokenRule, _l1TokenItem)
	}
	var _l2TokenRule []interface{}
	for _, _l2TokenItem := range _l2Token {
		_l2TokenRule = append(_l2TokenRule, _l2TokenItem)
	}
	var _fromRule []interface{}
	for _, _fromItem := range _from {
		_fromRule = append(_fromRule, _fromItem)
	}

	logs, sub, err := _L1ERC1155Gateway.contract.WatchLogs(opts, "DepositERC1155", _l1TokenRule, _l2TokenRule, _fromRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(L1ERC1155GatewayDepositERC1155)
				if err := _L1ERC1155Gateway.contract.UnpackLog(event, "DepositERC1155", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDepositERC1155 is a log parse operation binding the contract event 0x7f6552b688fa94306ca59e44dd4454ff550542445a3f1cb39b8c768be6f5c08a.
//
// Solidity: event DepositERC1155(address indexed _l1Token, address indexed _l2Token, address indexed _from, address _to, uint256 _tokenId, uint256 _amount)
func (_L1ERC1155Gateway *L1ERC1155GatewayFilterer) ParseDepositERC1155(log types.Log) (*L1ERC1155GatewayDepositERC1155, error) {
	event := new(L1ERC1155GatewayDepositERC1155)
	if err := _L1ERC1155Gateway.contract.UnpackLog(event, "DepositERC1155", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// L1ERC1155GatewayFinalizeBatchWithdrawERC1155Iterator is returned from FilterFinalizeBatchWithdrawERC1155 and is used to iterate over the raw logs and unpacked data for FinalizeBatchWithdrawERC1155 events raised by the L1ERC1155Gateway contract.
type L1ERC1155GatewayFinalizeBatchWithdrawERC1155Iterator struct {
	Event *L1ERC1155GatewayFinalizeBatchWithdrawERC1155 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *L1ERC1155GatewayFinalizeBatchWithdrawERC1155Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(L1ERC1155GatewayFinalizeBatchWithdrawERC1155)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(L1ERC1155GatewayFinalizeBatchWithdrawERC1155)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *L1ERC1155GatewayFinalizeBatchWithdrawERC1155Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *L1ERC1155GatewayFinalizeBatchWithdrawERC1155Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// L1ERC1155GatewayFinalizeBatchWithdrawERC1155 represents a FinalizeBatchWithdrawERC1155 event raised by the L1ERC1155Gateway contract.
type L1ERC1155GatewayFinalizeBatchWithdrawERC1155 struct {
	L1Token  common.Address
	L2Token  common.Address
	From     common.Address
	To       common.Address
	TokenIds []*big.Int
	Amounts  []*big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterFinalizeBatchWithdrawERC1155 is a free log retrieval operation binding the contract event 0x45294b6ad6ad2408cc3ee9a37203aa1b0480616667a97b157c52ac9294cbc258.
//
// Solidity: event FinalizeBatchWithdrawERC1155(address indexed _l1Token, address indexed _l2Token, address indexed _from, address _to, uint256[] _tokenIds, uint256[] _amounts)
func (_L1ERC1155Gateway *L1ERC1155GatewayFilterer) FilterFinalizeBatchWithdrawERC1155(opts *bind.FilterOpts, _l1Token []common.Address, _l2Token []common.Address, _from []common.Address) (*L1ERC1155GatewayFinalizeBatchWithdrawERC1155Iterator, error) {

	var _l1TokenRule []interface{}
	for _, _l1TokenItem := range _l1Token {
		_l1TokenRule = append(_l1TokenRule, _l1TokenItem)
	}
	var _l2TokenRule []interface{}
	for _, _l2TokenItem := range _l2Token {
		_l2TokenRule = append(_l2TokenRule, _l2TokenItem)
	}
	var _fromRule []interface{}
	for _, _fromItem := range _from {
		_fromRule = append(_fromRule, _fromItem)
	}

	logs, sub, err := _L1ERC1155Gateway.contract.FilterLogs(opts, "FinalizeBatchWithdrawERC1155", _l1TokenRule, _l2TokenRule, _fromRule)
	if err != nil {
		return nil, err
	}
	return &L1ERC1155GatewayFinalizeBatchWithdrawERC1155Iterator{contract: _L1ERC1155Gateway.contract, event: "FinalizeBatchWithdrawERC1155", logs: logs, sub: sub}, nil
}

// WatchFinalizeBatchWithdrawERC1155 is a free log subscription operation binding the contract event 0x45294b6ad6ad2408cc3ee9a37203aa1b0480616667a97b157c52ac9294cbc258.
//
// Solidity: event FinalizeBatchWithdrawERC1155(address indexed _l1Token, address indexed _l2Token, address indexed _from, address _to, uint256[] _tokenIds, uint256[] _amounts)
func (_L1ERC1155Gateway *L1ERC1155GatewayFilterer) WatchFinalizeBatchWithdrawERC1155(opts *bind.WatchOpts, sink chan<- *L1ERC1155GatewayFinalizeBatchWithdrawERC1155, _l1Token []common.Address, _l2Token []common.Address, _from []common.Address) (event.Subscription, error) {

	var _l1TokenRule []interface{}
	for _, _l1TokenItem := range _l1Token {
		_l1TokenRule = append(_l1TokenRule, _l1TokenItem)
	}
	var _l2TokenRule []interface{}
	for _, _l2TokenItem := range _l2Token {
		_l2TokenRule = append(_l2TokenRule, _l2TokenItem)
	}
	var _fromRule []interface{}
	for _, _fromItem := range _from {
		_fromRule = append(_fromRule, _fromItem)
	}

	logs, sub, err := _L1ERC1155Gateway.contract.WatchLogs(opts, "FinalizeBatchWithdrawERC1155", _l1TokenRule, _l2TokenRule, _fromRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(L1ERC1155GatewayFinalizeBatchWithdrawERC1155)
				if err := _L1ERC1155Gateway.contract.UnpackLog(event, "FinalizeBatchWithdrawERC1155", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseFinalizeBatchWithdrawERC1155 is a log parse operation binding the contract event 0x45294b6ad6ad2408cc3ee9a37203aa1b0480616667a97b157c52ac9294cbc258.
//
// Solidity: event FinalizeBatchWithdrawERC1155(address indexed _l1Token, address indexed _l2Token, address indexed _from, address _to, uint256[] _tokenIds, uint256[] _amounts)
func (_L1ERC1155Gateway *L1ERC1155GatewayFilterer) ParseFinalizeBatchWithdrawERC1155(log types.Log) (*L1ERC1155GatewayFinalizeBatchWithdrawERC1155, error) {
	event := new(L1ERC1155GatewayFinalizeBatchWithdrawERC1155)
	if err := _L1ERC1155Gateway.contract.UnpackLog(event, "FinalizeBatchWithdrawERC1155", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// L1ERC1155GatewayFinalizeWithdrawERC1155Iterator is returned from FilterFinalizeWithdrawERC1155 and is used to iterate over the raw logs and unpacked data for FinalizeWithdrawERC1155 events raised by the L1ERC1155Gateway contract.
type L1ERC1155GatewayFinalizeWithdrawERC1155Iterator struct {
	Event *L1ERC1155GatewayFinalizeWithdrawERC1155 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *L1ERC1155GatewayFinalizeWithdrawERC1155Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(L1ERC1155GatewayFinalizeWithdrawERC1155)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(L1ERC1155GatewayFinalizeWithdrawERC1155)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *L1ERC1155GatewayFinalizeWithdrawERC1155Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *L1ERC1155GatewayFinalizeWithdrawERC1155Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// L1ERC1155GatewayFinalizeWithdrawERC1155 represents a FinalizeWithdrawERC1155 event raised by the L1ERC1155Gateway contract.
type L1ERC1155GatewayFinalizeWithdrawERC1155 struct {
	L1Token common.Address
	L2Token common.Address
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Amount  *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterFinalizeWithdrawERC1155 is a free log retrieval operation binding the contract event 0xfcc2841e9e72e6d610944e1b668912e92d5df94003055dbe06d615ba8d9efad4.
//
// Solidity: event FinalizeWithdrawERC1155(address indexed _l1Token, address indexed _l2Token, address indexed _from, address _to, uint256 _tokenId, uint256 _amount)
func (_L1ERC1155Gateway *L1ERC1155GatewayFilterer) FilterFinalizeWithdrawERC1155(opts *bind.FilterOpts, _l1Token []common.Address, _l2Token []common.Address, _from []common.Address) (*L1ERC1155GatewayFinalizeWithdrawERC1155Iterator, error) {

	var _l1TokenRule []interface{}
	for _, _l1TokenItem := range _l1Token {
		_l1TokenRule = append(_l1TokenRule, _l1TokenItem)
	}
	var _l2TokenRule []interface{}
	for _, _l2TokenItem := range _l2Token {
		_l2TokenRule = append(_l2TokenRule, _l2TokenItem)
	}
	var _fromRule []interface{}
	for _, _fromItem := range _from {
		_fromRule = append(_fromRule, _fromItem)
	}

	logs, sub, err := _L1ERC1155Gateway.contract.FilterLogs(opts, "FinalizeWithdrawERC1155", _l1TokenRule, _l2TokenRule, _fromRule)
	if err != nil {
		return nil, err
	}
	return &L1ERC1155GatewayFinalizeWithdrawERC1155Iterator{contract: _L1ERC1155Gateway.contract, event: "FinalizeWithdrawERC1155", logs: logs, sub: sub}, nil
}

// WatchFinalizeWithdrawERC1155 is a free log subscription operation binding the contract event 0xfcc2841e9e72e6d610944e1b668912e92d5df94003055dbe06d615ba8d9efad4.
//
// Solidity: event FinalizeWithdrawERC1155(address indexed _l1Token, address indexed _l2Token, address indexed _from, address _to, uint256 _tokenId, uint256 _amount)
func (_L1ERC1155Gateway *L1ERC1155GatewayFilterer) WatchFinalizeWithdrawERC1155(opts *bind.WatchOpts, sink chan<- *L1ERC1155GatewayFinalizeWithdrawERC1155, _l1Token []common.Address, _l2Token []common.Address, _from []common.Address) (event.Subscription, error) {

	var _l1TokenRule []interface{}
	for _, _l1TokenItem := range _l1Token {
		_l1TokenRule = append(_l1TokenRule, _l1TokenItem)
	}
	var _l2TokenRule []interface{}
	for _, _l2TokenItem := range _l2Token {
		_l2TokenRule = append(_l2TokenRule, _l2TokenItem)
	}
	var _fromRule []interface{}
	for _, _fromItem := range _from {
		_fromRule = append(_fromRule, _fromItem)
	}

	logs, sub, err := _L1ERC1155Gateway.contract.WatchLogs(opts, "FinalizeWithdrawERC1155", _l1TokenRule, _l2TokenRule, _fromRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(L1ERC1155GatewayFinalizeWithdrawERC1155)
				if err := _L1ERC1155Gateway.contract.UnpackLog(event, "FinalizeWithdrawERC1155", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseFinalizeWithdrawERC1155 is a log parse operation binding the contract event 0xfcc2841e9e72e6d610944e1b668912e92d5df94003055dbe06d615ba8d9efad4.
//
// Solidity: event FinalizeWithdrawERC1155(address indexed _l1Token, address indexed _l2Token, address indexed _from, address _to, uint256 _tokenId, uint256 _amount)
func (_L1ERC1155Gateway *L1ERC1155GatewayFilterer) ParseFinalizeWithdrawERC1155(log types.Log) (*L1ERC1155GatewayFinalizeWithdrawERC1155, error) {
	event := new(L1ERC1155GatewayFinalizeWithdrawERC1155)
	if err := _L1ERC1155Gateway.contract.UnpackLog(event, "FinalizeWithdrawERC1155", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// L1ERC1155GatewayInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the L1ERC1155Gateway contract.
type L1ERC1155GatewayInitializedIterator struct {
	Event *L1ERC1155GatewayInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *L1ERC1155GatewayInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(L1ERC1155GatewayInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(L1ERC1155GatewayInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *L1ERC1155GatewayInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *L1ERC1155GatewayInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// L1ERC1155GatewayInitialized represents a Initialized event raised by the L1ERC1155Gateway contract.
type L1ERC1155GatewayInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_L1ERC1155Gateway *L1ERC1155GatewayFilterer) FilterInitialized(opts *bind.FilterOpts) (*L1ERC1155GatewayInitializedIterator, error) {

	logs, sub, err := _L1ERC1155Gateway.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &L1ERC1155GatewayInitializedIterator{contract: _L1ERC1155Gateway.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_L1ERC1155Gateway *L1ERC1155GatewayFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *L1ERC1155GatewayInitialized) (event.Subscription, error) {

	logs, sub, err := _L1ERC1155Gateway.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(L1ERC1155GatewayInitialized)
				if err := _L1ERC1155Gateway.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_L1ERC1155Gateway *L1ERC1155GatewayFilterer) ParseInitialized(log types.Log) (*L1ERC1155GatewayInitialized, error) {
	event := new(L1ERC1155GatewayInitialized)
	if err := _L1ERC1155Gateway.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// L1ERC1155GatewayOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the L1ERC1155Gateway contract.
type L1ERC1155GatewayOwnershipTransferredIterator struct {
	Event *L1ERC1155GatewayOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *L1ERC1155GatewayOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(L1ERC1155GatewayOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(L1ERC1155GatewayOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *L1ERC1155GatewayOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *L1ERC1155GatewayOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// L1ERC1155GatewayOwnershipTransferred represents a OwnershipTransferred event raised by the L1ERC1155Gateway contract.
type L1ERC1155GatewayOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_L1ERC1155Gateway *L1ERC1155GatewayFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*L1ERC1155GatewayOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _L1ERC1155Gateway.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &L1ERC1155GatewayOwnershipTransferredIterator{contract: _L1ERC1155Gateway.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_L1ERC1155Gateway *L1ERC1155GatewayFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *L1ERC1155GatewayOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _L1ERC1155Gateway.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(L1ERC1155GatewayOwnershipTransferred)
				if err := _L1ERC1155Gateway.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_L1ERC1155Gateway *L1ERC1155GatewayFilterer) ParseOwnershipTransferred(log types.Log) (*L1ERC1155GatewayOwnershipTransferred, error) {
	event := new(L1ERC1155GatewayOwnershipTransferred)
	if err := _L1ERC1155Gateway.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// L1ERC1155GatewayRefundERC1155Iterator is returned from FilterRefundERC1155 and is used to iterate over the raw logs and unpacked data for RefundERC1155 events raised by the L1ERC1155Gateway contract.
type L1ERC1155GatewayRefundERC1155Iterator struct {
	Event *L1ERC1155GatewayRefundERC1155 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *L1ERC1155GatewayRefundERC1155Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(L1ERC1155GatewayRefundERC1155)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(L1ERC1155GatewayRefundERC1155)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *L1ERC1155GatewayRefundERC1155Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *L1ERC1155GatewayRefundERC1155Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// L1ERC1155GatewayRefundERC1155 represents a RefundERC1155 event raised by the L1ERC1155Gateway contract.
type L1ERC1155GatewayRefundERC1155 struct {
	Token     common.Address
	Recipient common.Address
	TokenId   *big.Int
	Amount    *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterRefundERC1155 is a free log retrieval operation binding the contract event 0xee285671d9ac3b0e0ed40037cb6db081095aa6cd68363f3e56989dde39e0df09.
//
// Solidity: event RefundERC1155(address indexed token, address indexed recipient, uint256 tokenId, uint256 amount)
func (_L1ERC1155Gateway *L1ERC1155GatewayFilterer) FilterRefundERC1155(opts *bind.FilterOpts, token []common.Address, recipient []common.Address) (*L1ERC1155GatewayRefundERC1155Iterator, error) {

	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}
	var recipientRule []interface{}
	for _, recipientItem := range recipient {
		recipientRule = append(recipientRule, recipientItem)
	}

	logs, sub, err := _L1ERC1155Gateway.contract.FilterLogs(opts, "RefundERC1155", tokenRule, recipientRule)
	if err != nil {
		return nil, err
	}
	return &L1ERC1155GatewayRefundERC1155Iterator{contract: _L1ERC1155Gateway.contract, event: "RefundERC1155", logs: logs, sub: sub}, nil
}

// WatchRefundERC1155 is a free log subscription operation binding the contract event 0xee285671d9ac3b0e0ed40037cb6db081095aa6cd68363f3e56989dde39e0df09.
//
// Solidity: event RefundERC1155(address indexed token, address indexed recipient, uint256 tokenId, uint256 amount)
func (_L1ERC1155Gateway *L1ERC1155GatewayFilterer) WatchRefundERC1155(opts *bind.WatchOpts, sink chan<- *L1ERC1155GatewayRefundERC1155, token []common.Address, recipient []common.Address) (event.Subscription, error) {

	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}
	var recipientRule []interface{}
	for _, recipientItem := range recipient {
		recipientRule = append(recipientRule, recipientItem)
	}

	logs, sub, err := _L1ERC1155Gateway.contract.WatchLogs(opts, "RefundERC1155", tokenRule, recipientRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(L1ERC1155GatewayRefundERC1155)
				if err := _L1ERC1155Gateway.contract.UnpackLog(event, "RefundERC1155", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRefundERC1155 is a log parse operation binding the contract event 0xee285671d9ac3b0e0ed40037cb6db081095aa6cd68363f3e56989dde39e0df09.
//
// Solidity: event RefundERC1155(address indexed token, address indexed recipient, uint256 tokenId, uint256 amount)
func (_L1ERC1155Gateway *L1ERC1155GatewayFilterer) ParseRefundERC1155(log types.Log) (*L1ERC1155GatewayRefundERC1155, error) {
	event := new(L1ERC1155GatewayRefundERC1155)
	if err := _L1ERC1155Gateway.contract.UnpackLog(event, "RefundERC1155", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// L1ERC1155GatewayUpdateTokenMappingIterator is returned from FilterUpdateTokenMapping and is used to iterate over the raw logs and unpacked data for UpdateTokenMapping events raised by the L1ERC1155Gateway contract.
type L1ERC1155GatewayUpdateTokenMappingIterator struct {
	Event *L1ERC1155GatewayUpdateTokenMapping // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *L1ERC1155GatewayUpdateTokenMappingIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(L1ERC1155GatewayUpdateTokenMapping)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(L1ERC1155GatewayUpdateTokenMapping)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *L1ERC1155GatewayUpdateTokenMappingIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *L1ERC1155GatewayUpdateTokenMappingIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// L1ERC1155GatewayUpdateTokenMapping represents a UpdateTokenMapping event raised by the L1ERC1155Gateway contract.
type L1ERC1155GatewayUpdateTokenMapping struct {
	L1Token    common.Address
	OldL2Token common.Address
	NewL2Token common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterUpdateTokenMapping is a free log retrieval operation binding the contract event 0x2069a26c43c36ffaabe0c2d19bf65e55dd03abecdc449f5cc9663491e97f709d.
//
// Solidity: event UpdateTokenMapping(address indexed l1Token, address indexed oldL2Token, address indexed newL2Token)
func (_L1ERC1155Gateway *L1ERC1155GatewayFilterer) FilterUpdateTokenMapping(opts *bind.FilterOpts, l1Token []common.Address, oldL2Token []common.Address, newL2Token []common.Address) (*L1ERC1155GatewayUpdateTokenMappingIterator, error) {

	var l1TokenRule []interface{}
	for _, l1TokenItem := range l1Token {
		l1TokenRule = append(l1TokenRule, l1TokenItem)
	}
	var oldL2TokenRule []interface{}
	for _, oldL2TokenItem := range oldL2Token {
		oldL2TokenRule = append(oldL2TokenRule, oldL2TokenItem)
	}
	var newL2TokenRule []interface{}
	for _, newL2TokenItem := range newL2Token {
		newL2TokenRule = append(newL2TokenRule, newL2TokenItem)
	}

	logs, sub, err := _L1ERC1155Gateway.contract.FilterLogs(opts, "UpdateTokenMapping", l1TokenRule, oldL2TokenRule, newL2TokenRule)
	if err != nil {
		return nil, err
	}
	return &L1ERC1155GatewayUpdateTokenMappingIterator{contract: _L1ERC1155Gateway.contract, event: "UpdateTokenMapping", logs: logs, sub: sub}, nil
}

// WatchUpdateTokenMapping is a free log subscription operation binding the contract event 0x2069a26c43c36ffaabe0c2d19bf65e55dd03abecdc449f5cc9663491e97f709d.
//
// Solidity: event UpdateTokenMapping(address indexed l1Token, address indexed oldL2Token, address indexed newL2Token)
func (_L1ERC1155Gateway *L1ERC1155GatewayFilterer) WatchUpdateTokenMapping(opts *bind.WatchOpts, sink chan<- *L1ERC1155GatewayUpdateTokenMapping, l1Token []common.Address, oldL2Token []common.Address, newL2Token []common.Address) (event.Subscription, error) {

	var l1TokenRule []interface{}
	for _, l1TokenItem := range l1Token {
		l1TokenRule = append(l1TokenRule, l1TokenItem)
	}
	var oldL2TokenRule []interface{}
	for _, oldL2TokenItem := range oldL2Token {
		oldL2TokenRule = append(oldL2TokenRule, oldL2TokenItem)
	}
	var newL2TokenRule []interface{}
	for _, newL2TokenItem := range newL2Token {
		newL2TokenRule = append(newL2TokenRule, newL2TokenItem)
	}

	logs, sub, err := _L1ERC1155Gateway.contract.WatchLogs(opts, "UpdateTokenMapping", l1TokenRule, oldL2TokenRule, newL2TokenRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(L1ERC1155GatewayUpdateTokenMapping)
				if err := _L1ERC1155Gateway.contract.UnpackLog(event, "UpdateTokenMapping", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateTokenMapping is a log parse operation binding the contract event 0x2069a26c43c36ffaabe0c2d19bf65e55dd03abecdc449f5cc9663491e97f709d.
//
// Solidity: event UpdateTokenMapping(address indexed l1Token, address indexed oldL2Token, address indexed newL2Token)
func (_L1ERC1155Gateway *L1ERC1155GatewayFilterer) ParseUpdateTokenMapping(log types.Log) (*L1ERC1155GatewayUpdateTokenMapping, error) {
	event := new(L1ERC1155GatewayUpdateTokenMapping)
	if err := _L1ERC1155Gateway.contract.UnpackLog(event, "UpdateTokenMapping", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
