// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package bindings

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/morph-l2/go-ethereum"
	"github.com/morph-l2/go-ethereum/accounts/abi"
	"github.com/morph-l2/go-ethereum/accounts/abi/bind"
	"github.com/morph-l2/go-ethereum/common"
	"github.com/morph-l2/go-ethereum/core/types"
	"github.com/morph-l2/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// IRecordBatchSubmission is an auto generated low-level Go binding around an user-defined struct.
type IRecordBatchSubmission struct {
	Index       *big.Int
	Submitter   common.Address
	StartBlock  *big.Int
	EndBlock    *big.Int
	RollupTime  *big.Int
	RollupBlock *big.Int
}

// IRecordRewardEpochInfo is an auto generated low-level Go binding around an user-defined struct.
type IRecordRewardEpochInfo struct {
	Index                *big.Int
	BlockCount           *big.Int
	Sequencers           []common.Address
	SequencerBlocks      []*big.Int
	SequencerRatios      []*big.Int
	SequencerCommissions []*big.Int
}

// IRecordRollupEpochInfo is an auto generated low-level Go binding around an user-defined struct.
type IRecordRollupEpochInfo struct {
	Index     *big.Int
	Submitter common.Address
	StartTime *big.Int
	EndTime   *big.Int
	EndBlock  *big.Int
}

// RecordMetaData contains all meta data concerning the Record contract.
var RecordMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"startIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dataLength\",\"type\":\"uint256\"}],\"name\":\"BatchSubmissionsUploaded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"startIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dataLength\",\"type\":\"uint256\"}],\"name\":\"RewardEpochsUploaded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"startIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dataLength\",\"type\":\"uint256\"}],\"name\":\"RollupEpochsUploaded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DISTRIBUTE_CONTRACT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GOV_CONTRACT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"L2_STAKING_CONTRACT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MORPH_TOKEN_CONTRACT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SEQUENCER_CONTRACT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"batchIndex\",\"type\":\"uint256\"}],\"name\":\"batchSubmissions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"submitter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rollupTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rollupBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"getBatchSubmissions\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"submitter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rollupTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rollupBlock\",\"type\":\"uint256\"}],\"internalType\":\"structIRecord.BatchSubmission[]\",\"name\":\"res\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"getRewardEpochs\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockCount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"sequencers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"sequencerBlocks\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"sequencerRatios\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"sequencerCommissions\",\"type\":\"uint256[]\"}],\"internalType\":\"structIRecord.RewardEpochInfo[]\",\"name\":\"res\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"getRollupEpochs\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"submitter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"}],\"internalType\":\"structIRecord.RollupEpochInfo[]\",\"name\":\"res\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nextBatchSubmissionIndex\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestRewardEpochBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextBatchSubmissionIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextRewardEpochIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextRollupEpochIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"submitter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rollupTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rollupBlock\",\"type\":\"uint256\"}],\"internalType\":\"structIRecord.BatchSubmission[]\",\"name\":\"_batchSubmissions\",\"type\":\"tuple[]\"}],\"name\":\"recordFinalizedBatchSubmissions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockCount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"sequencers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"sequencerBlocks\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"sequencerRatios\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"sequencerCommissions\",\"type\":\"uint256[]\"}],\"internalType\":\"structIRecord.RewardEpochInfo[]\",\"name\":\"_rewardEpochs\",\"type\":\"tuple[]\"}],\"name\":\"recordRewardEpochs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"submitter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"}],\"internalType\":\"structIRecord.RollupEpochInfo[]\",\"name\":\"_rollupEpochs\",\"type\":\"tuple[]\"}],\"name\":\"recordRollupEpochs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardEpochIndex\",\"type\":\"uint256\"}],\"name\":\"rewardEpochs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rollupEpochIndex\",\"type\":\"uint256\"}],\"name\":\"rollupEpochs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"submitter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_latestBlock\",\"type\":\"uint256\"}],\"name\":\"setLatestRewardEpochBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"}],\"name\":\"setOracleAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x61012060405234801562000011575f80fd5b5073530000000000000000000000000000000000001360805273530000000000000000000000000000000000001560a05273530000000000000000000000000000000000001760c05273530000000000000000000000000000000000001460e05273530000000000000000000000000000000000000461010052620000956200009b565b62000159565b5f54610100900460ff1615620001075760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b5f5460ff9081161462000157575f805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b60805160a05160c05160e05161010051612c94620001b35f395f6102cf01525f81816101f90152611c5e01525f6103f601525f81816103b101526111b301525f8181610508015281816112cd01526118050152612c945ff3fe608060405234801561000f575f80fd5b506004361061019a575f3560e01c8063715018a6116100e85780638e21d5fb11610093578063cb6293e81161006e578063cb6293e8146104e3578063d557714114610503578063f2fde38b1461052a578063fe49dbc91461053d575f80fd5b80638e21d5fb146103f1578063a24231e814610418578063a795f409146104a8575f80fd5b80637dc0d1d0116100c35780637dc0d1d01461038c578063807de443146103ac5780638da5cb5b146103d3575f80fd5b8063715018a6146102c25780637828a905146102ca57806378f908e1146102f1575f80fd5b806341ed047f116101485780634e3ca406116101235780634e3ca4061461026f57806364b4abe31461028f5780636ea0396e146102af575f80fd5b806341ed047f14610240578063484f8d0f146102535780634c69c00f1461025c575f80fd5b80631794bb3c116101785780631794bb3c146101d85780632fbf6487146101eb5780633d9353fe146101f4575f80fd5b80630776c0f71461019e57806310c9873f146101ba5780631511e1b1146101cf575b5f80fd5b6101a7606c5481565b6040519081526020015b60405180910390f35b6101cd6101c83660046125b9565b610550565b005b6101a760695481565b6101cd6101e63660046125f8565b610676565b6101a7606b5481565b61021b7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101b1565b6101cd61024e366004612631565b61096c565b6101a7606a5481565b6101cd61026a3660046126a0565b610cab565b61028261027d3660046126c0565b610d5d565b6040516101b191906126e0565b6102a261029d3660046126c0565b610ef5565b6040516101b19190612763565b6101cd6102bd3660046127e3565b611096565b6101cd611d98565b61021b7f000000000000000000000000000000000000000000000000000000000000000081565b61034a6102ff3660046125b9565b60666020525f9081526040902080546001820154600283015460038401546004850154600590950154939473ffffffffffffffffffffffffffffffffffffffff909316939192909186565b6040805196875273ffffffffffffffffffffffffffffffffffffffff9095166020870152938501929092526060840152608083015260a082015260c0016101b1565b60655461021b9073ffffffffffffffffffffffffffffffffffffffff1681565b61021b7f000000000000000000000000000000000000000000000000000000000000000081565b60335473ffffffffffffffffffffffffffffffffffffffff1661021b565b61021b7f000000000000000000000000000000000000000000000000000000000000000081565b61046b6104263660046125b9565b60676020525f908152604090208054600182015460028301546003840154600490940154929373ffffffffffffffffffffffffffffffffffffffff9092169290919085565b6040805195865273ffffffffffffffffffffffffffffffffffffffff9094166020860152928401919091526060830152608082015260a0016101b1565b6104ce6104b63660046125b9565b60686020525f90815260409020805460019091015482565b604080519283526020830191909152016101b1565b6104f66104f13660046126c0565b611dab565b6040516101b1919061287a565b61021b7f000000000000000000000000000000000000000000000000000000000000000081565b6101cd6105383660046126a0565b61205f565b6101cd61054b3660046129a8565b6120fc565b60655473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146105d25760405162461bcd60e51b815260206004820152601360248201527f6f6e6c79206f7261636c6520616c6c6f7765640000000000000000000000000060448201526064015b60405180910390fd5b606c54156106225760405162461bcd60e51b815260206004820152600b60248201527f616c72656164792073657400000000000000000000000000000000000000000060448201526064016105c9565b5f81116106715760405162461bcd60e51b815260206004820152601460248201527f696e76616c6964206c617465737420626c6f636b00000000000000000000000060448201526064016105c9565b606c55565b5f54610100900460ff161580801561069457505f54600160ff909116105b806106ad5750303b1580156106ad57505f5460ff166001145b61071f5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016105c9565b5f80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055801561077b575f80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b73ffffffffffffffffffffffffffffffffffffffff84166107de5760405162461bcd60e51b815260206004820152601560248201527f696e76616c6964206f776e65722061646472657373000000000000000000000060448201526064016105c9565b815f036108535760405162461bcd60e51b815260206004820152602360248201527f696e76616c6964206e657874206261746368207375626d697373696f6e20696e60448201527f646578000000000000000000000000000000000000000000000000000000000060648201526084016105c9565b73ffffffffffffffffffffffffffffffffffffffff83166108b65760405162461bcd60e51b815260206004820152601660248201527f696e76616c6964206f7261636c6520616464726573730000000000000000000060448201526064016105c9565b6108bf84612407565b606580547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff851617905560698290558015610966575f80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b60655473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146109e95760405162461bcd60e51b815260206004820152601360248201527f6f6e6c79206f7261636c6520616c6c6f7765640000000000000000000000000060448201526064016105c9565b80610a365760405162461bcd60e51b815260206004820152601760248201527f656d707479206261746368207375626d697373696f6e7300000000000000000060448201526064016105c9565b5f5b81811015610c575780606954610a4e9190612a32565b838383818110610a6057610a60612a4b565b905060c002015f013514610ab65760405162461bcd60e51b815260206004820152600d60248201527f696e76616c696420696e6465780000000000000000000000000000000000000060448201526064016105c9565b6040518060c00160405280848484818110610ad357610ad3612a4b565b905060c002015f01358152602001848484818110610af357610af3612a4b565b905060c002016020016020810190610b0b91906126a0565b73ffffffffffffffffffffffffffffffffffffffff168152602001848484818110610b3857610b38612a4b565b905060c00201604001358152602001848484818110610b5957610b59612a4b565b905060c00201606001358152602001848484818110610b7a57610b7a612a4b565b905060c00201608001358152602001848484818110610b9b57610b9b612a4b565b905060c0020160a0013581525060665f858585818110610bbd57610bbd612a4b565b60c002919091013582525060208082019290925260409081015f208351815591830151600180840180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff90931692909217909155908301516002830155606083015160038301556080830151600483015560a09092015160059091015501610a38565b506069546040518281527f1c517c9850aa84483b0b2434e58bab4c7967f0b1a34d8b18a6ad22436add010e9060200160405180910390a28181905060695f828254610ca29190612a32565b90915550505050565b610cb361247d565b73ffffffffffffffffffffffffffffffffffffffff8116610d165760405162461bcd60e51b815260206004820152601660248201527f696e76616c6964206f7261636c6520616464726573730000000000000000000060448201526064016105c9565b606580547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b606082821015610daf5760405162461bcd60e51b815260206004820152600d60248201527f696e76616c696420696e6465780000000000000000000000000000000000000060448201526064016105c9565b610db98383612a78565b610dc4906001612a32565b67ffffffffffffffff811115610ddc57610ddc612a8b565b604051908082528060200260200182016040528015610e5057816020015b610e3d6040518060a001604052805f81526020015f73ffffffffffffffffffffffffffffffffffffffff1681526020015f81526020015f81526020015f81525090565b815260200190600190039081610dfa5790505b509050825b828111610eee575f81815260676020908152604091829020825160a08101845281548152600182015473ffffffffffffffffffffffffffffffffffffffff16928101929092526002810154928201929092526003820154606082015260049091015460808201528251839083908110610ed057610ed0612a4b565b60200260200101819052508080610ee690612ab8565b915050610e55565b5092915050565b606082821015610f475760405162461bcd60e51b815260206004820152600d60248201527f696e76616c696420696e6465780000000000000000000000000000000000000060448201526064016105c9565b610f518383612a78565b610f5c906001612a32565b67ffffffffffffffff811115610f7457610f74612a8b565b604051908082528060200260200182016040528015610fee57816020015b610fdb6040518060c001604052805f81526020015f73ffffffffffffffffffffffffffffffffffffffff1681526020015f81526020015f81526020015f81526020015f81525090565b815260200190600190039081610f925790505b509050825b828111610eee575f81815260666020908152604091829020825160c08101845281548152600182015473ffffffffffffffffffffffffffffffffffffffff1692810192909252600281015492820192909252600382015460608201526004820154608082015260059091015460a0820152825183908390811061107857611078612a4b565b6020026020010181905250808061108e90612ab8565b915050610ff3565b60655473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146111135760405162461bcd60e51b815260206004820152601360248201527f6f6e6c79206f7261636c6520616c6c6f7765640000000000000000000000000060448201526064016105c9565b806111605760405162461bcd60e51b815260206004820152601360248201527f656d707479207265776172642065706f6368730000000000000000000000000060448201526064016105c9565b5f606c54116111b15760405162461bcd60e51b815260206004820152601960248201527f737461727420626c6f636b2073686f756c64206265207365740000000000000060448201526064016105c9565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663766718086040518163ffffffff1660e01b8152600401602060405180830381865afa15801561121a573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061123e9190612aef565b606b5460019061124f908490612a32565b6112599190612a78565b106112cb5760405162461bcd60e51b8152602060048201526024808201527f756e66696e69736865642065706f6368732063616e6e6f742062652075706c6f60448201527f616465640000000000000000000000000000000000000000000000000000000060648201526084016105c9565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a29bfb2c600184849050606b5461131a9190612a32565b6113249190612a78565b6040518263ffffffff1660e01b815260040161134291815260200190565b5f604051808303815f87803b158015611359575f80fd5b505af115801561136b573d5f803e3d5ffd5b505f9250829150505b82811015611d2d575f84848381811061138f5761138f612a4b565b90506020028101906113a19190612b06565b6113af906040810190612b42565b905090505f8585848181106113c6576113c6612a4b565b90506020028101906113d89190612b06565b606b54903591506113ea908490612a32565b81146114385760405162461bcd60e51b815260206004820152601360248201527f696e76616c69642065706f636820696e6465780000000000000000000000000060448201526064016105c9565b8186868581811061144b5761144b612a4b565b905060200281019061145d9190612b06565b61146b906060810190612b42565b90501480156114ac57508186868581811061148857611488612a4b565b905060200281019061149a9190612b06565b6114a8906080810190612b42565b9050145b80156114ea5750818686858181106114c6576114c6612a4b565b90506020028101906114d89190612b06565b6114e69060a0810190612b42565b9050145b6115365760405162461bcd60e51b815260206004820152601360248201527f696e76616c69642064617461206c656e6774680000000000000000000000000060448201526064016105c9565b85858481811061154857611548612a4b565b905060200281019061155a9190612b06565b611568906020013585612a32565b93506040518060c0016040528082815260200187878681811061158d5761158d612a4b565b905060200281019061159f9190612b06565b6020013581526020018787868181106115ba576115ba612a4b565b90506020028101906115cc9190612b06565b6115da906040810190612b42565b808060200260200160405190810160405280939291908181526020018383602002808284375f9201919091525050509082525060200187878681811061162257611622612a4b565b90506020028101906116349190612b06565b611642906060810190612b42565b808060200260200160405190810160405280939291908181526020018383602002808284375f9201919091525050509082525060200187878681811061168a5761168a612a4b565b905060200281019061169c9190612b06565b6116aa906080810190612b42565b808060200260200160405190810160405280939291908181526020018383602002808284375f920191909152505050908252506020018787868181106116f2576116f2612a4b565b90506020028101906117049190612b06565b6117129060a0810190612b42565b808060200260200160405190810160405280939291908181526020018383602002808284375f920182905250939094525050838152606860209081526040918290208451815584820151600182015591840151805192935061177d92600285019291909101906124e4565b506060820151805161179991600384019160209091019061256c565b50608082015180516117b591600484019160209091019061256c565b5060a082015180516117d191600584019160209091019061256c565b50506040517f944fa746000000000000000000000000000000000000000000000000000000008152600481018390525f91507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063944fa74690602401602060405180830381865afa15801561185f573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906118839190612aef565b90505f805f8567ffffffffffffffff8111156118a1576118a1612a8b565b6040519080825280602002602001820160405280156118ca578160200160208202803683370190505b5090505f8667ffffffffffffffff8111156118e7576118e7612a8b565b604051908082528060200260200182016040528015611910578160200160208202803683370190505b5090505f5b87811015611b915760148c8c8b81811061193157611931612a4b565b90506020028101906119439190612b06565b6119519060a0810190612b42565b8381811061196157611961612a4b565b9050602002013511156119b65760405162461bcd60e51b815260206004820152601d60248201527f696e76616c69642073657175656e6365727320636f6d6d697373696f6e00000060448201526064016105c9565b8b8b8a8181106119c8576119c8612a4b565b90506020028101906119da9190612b06565b6119e8906080810190612b42565b828181106119f8576119f8612a4b565b9050602002013584611a0a9190612a32565b93508b8b8a818110611a1e57611a1e612a4b565b9050602002810190611a309190612b06565b611a3e906060810190612b42565b82818110611a4e57611a4e612a4b565b9050602002013585611a609190612a32565b94505f6305f5e1008d8d8c818110611a7a57611a7a612a4b565b9050602002810190611a8c9190612b06565b611a9a906080810190612b42565b84818110611aaa57611aaa612a4b565b9050602002013588611abc9190612bad565b611ac69190612bc4565b905060648d8d8c818110611adc57611adc612a4b565b9050602002810190611aee9190612b06565b611afc9060a0810190612b42565b84818110611b0c57611b0c612a4b565b9050602002013582611b1e9190612bad565b611b289190612bc4565b838381518110611b3a57611b3a612a4b565b602002602001018181525050828281518110611b5857611b58612a4b565b602002602001015181611b6b9190612a78565b848381518110611b7d57611b7d612a4b565b602090810291909101015250600101611915565b508a8a89818110611ba457611ba4612a4b565b9050602002810190611bb69190612b06565b602001358414611c085760405162461bcd60e51b815260206004820152601960248201527f696e76616c69642073657175656e6365727320626c6f636b730000000000000060448201526064016105c9565b6305f5e100831115611c5c5760405162461bcd60e51b815260206004820152601960248201527f696e76616c69642073657175656e6365727320726174696f730000000000000060448201526064016105c9565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663cdd0c50e878d8d8c818110611cab57611cab612a4b565b9050602002810190611cbd9190612b06565b611ccb906040810190612b42565b86866040518663ffffffff1660e01b8152600401611ced959493929190612bfc565b5f604051808303815f87803b158015611d04575f80fd5b505af1158015611d16573d5f803e3d5ffd5b505060019099019850611374975050505050505050565b50606b546040518381527f4aa68efd05426e59a9d43654a55a2a74c3e8840894d6e291f8f83085e3a6d1ea9060200160405180910390a280606c5f828254611d759190612a32565b9091555050606b80548391905f90611d8e908490612a32565b9091555050505050565b611da061247d565b611da95f612407565b565b606082821015611dfd5760405162461bcd60e51b815260206004820152600d60248201527f696e76616c696420696e6465780000000000000000000000000000000000000060448201526064016105c9565b611e078383612a78565b611e12906001612a32565b67ffffffffffffffff811115611e2a57611e2a612a8b565b604051908082528060200260200182016040528015611e9257816020015b611e7f6040518060c001604052805f81526020015f8152602001606081526020016060815260200160608152602001606081525090565b815260200190600190039081611e485790505b509050825b828111610eee575f81815260686020908152604091829020825160c0810184528154815260018201548184015260028201805485518186028101860187528181529295939493860193830182828015611f2457602002820191905f5260205f20905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311611ef9575b5050505050815260200160038201805480602002602001604051908101604052809291908181526020018280548015611f7a57602002820191905f5260205f20905b815481526020019060010190808311611f66575b5050505050815260200160048201805480602002602001604051908101604052809291908181526020018280548015611fd057602002820191905f5260205f20905b815481526020019060010190808311611fbc575b505050505081526020016005820180548060200260200160405190810160405280929190818152602001828054801561202657602002820191905f5260205f20905b815481526020019060010190808311612012575b50505050508152505082828151811061204157612041612a4b565b6020026020010181905250808061205790612ab8565b915050611e97565b61206761247d565b73ffffffffffffffffffffffffffffffffffffffff81166120f05760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016105c9565b6120f981612407565b50565b60655473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146121795760405162461bcd60e51b815260206004820152601360248201527f6f6e6c79206f7261636c6520616c6c6f7765640000000000000000000000000060448201526064016105c9565b806121c65760405162461bcd60e51b815260206004820152601360248201527f656d70747920726f6c6c75702065706f6368730000000000000000000000000060448201526064016105c9565b5f5b818110156123bc5780606a546121de9190612a32565b8383838181106121f0576121f0612a4b565b905060a002015f0135146122465760405162461bcd60e51b815260206004820152600d60248201527f696e76616c696420696e6465780000000000000000000000000000000000000060448201526064016105c9565b6040518060a0016040528084848481811061226357612263612a4b565b905060a002015f0135815260200184848481811061228357612283612a4b565b905060a00201602001602081019061229b91906126a0565b73ffffffffffffffffffffffffffffffffffffffff1681526020018484848181106122c8576122c8612a4b565b905060a002016040013581526020018484848181106122e9576122e9612a4b565b905060a0020160600135815260200184848481811061230a5761230a612a4b565b905060a002016080013581525060675f85858581811061232c5761232c612a4b565b60a002919091013582525060208082019290925260409081015f208351815591830151600180840180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9093169290921790915590830151600283015560608301516003830155608090920151600490910155016121c8565b50606a546040518281527f0c53377f3eed25c9883c67adabc3f817b4fdcde29f550a6a26c0676ed29929299060200160405180910390a281819050606a5f828254610ca29190612a32565b6033805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35050565b60335473ffffffffffffffffffffffffffffffffffffffff163314611da95760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016105c9565b828054828255905f5260205f2090810192821561255c579160200282015b8281111561255c57825182547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909116178255602090920191600190910190612502565b506125689291506125a5565b5090565b828054828255905f5260205f2090810192821561255c579160200282015b8281111561255c57825182559160200191906001019061258a565b5b80821115612568575f81556001016125a6565b5f602082840312156125c9575f80fd5b5035919050565b803573ffffffffffffffffffffffffffffffffffffffff811681146125f3575f80fd5b919050565b5f805f6060848603121561260a575f80fd5b612613846125d0565b9250612621602085016125d0565b9150604084013590509250925092565b5f8060208385031215612642575f80fd5b823567ffffffffffffffff80821115612659575f80fd5b818501915085601f83011261266c575f80fd5b81358181111561267a575f80fd5b86602060c08302850101111561268e575f80fd5b60209290920196919550909350505050565b5f602082840312156126b0575f80fd5b6126b9826125d0565b9392505050565b5f80604083850312156126d1575f80fd5b50508035926020909101359150565b602080825282518282018190525f919060409081850190868401855b82811015612756578151805185528681015173ffffffffffffffffffffffffffffffffffffffff16878601528581015186860152606080820151908601526080908101519085015260a090930192908501906001016126fc565b5091979650505050505050565b602080825282518282018190525f919060409081850190868401855b82811015612756578151805185528681015173ffffffffffffffffffffffffffffffffffffffff16878601528581015186860152606080820151908601526080808201519086015260a0908101519085015260c0909301929085019060010161277f565b5f80602083850312156127f4575f80fd5b823567ffffffffffffffff8082111561280b575f80fd5b818501915085601f83011261281e575f80fd5b81358181111561282c575f80fd5b8660208260051b850101111561268e575f80fd5b5f815180845260208085019450602084015f5b8381101561286f57815187529582019590820190600101612853565b509495945050505050565b5f60208083018184528085518083526040925060408601915060408160051b8701018488015f5b8381101561299a578883037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc001855281518051845287810151888501528681015160c0888601819052815190860181905260e08601918a01905f905b8082101561293357825173ffffffffffffffffffffffffffffffffffffffff168452928b0192918b0191600191909101906128fd565b5050506060808301518683038288015261294d8382612840565b92505050608080830151868303828801526129688382612840565b9250505060a080830151925085820381870152506129868183612840565b9689019694505050908601906001016128a1565b509098975050505050505050565b5f80602083850312156129b9575f80fd5b823567ffffffffffffffff808211156129d0575f80fd5b818501915085601f8301126129e3575f80fd5b8135818111156129f1575f80fd5b86602060a08302850101111561268e575f80fd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b80820180821115612a4557612a45612a05565b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b81810381811115612a4557612a45612a05565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b5f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612ae857612ae8612a05565b5060010190565b5f60208284031215612aff575f80fd5b5051919050565b5f82357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff41833603018112612b38575f80fd5b9190910192915050565b5f8083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112612b75575f80fd5b83018035915067ffffffffffffffff821115612b8f575f80fd5b6020019150600581901b3603821315612ba6575f80fd5b9250929050565b8082028115828204841417612a4557612a45612a05565b5f82612bf7577f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b500490565b858152608060208083018290529082018590525f90869060a08401835b88811015612c525773ffffffffffffffffffffffffffffffffffffffff612c3f856125d0565b1682529282019290820190600101612c19565b508481036040860152612c658188612840565b925050508281036060840152612c7b8185612840565b9897505050505050505056fea164736f6c6343000818000a",
}

// RecordABI is the input ABI used to generate the binding from.
// Deprecated: Use RecordMetaData.ABI instead.
var RecordABI = RecordMetaData.ABI

// RecordBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use RecordMetaData.Bin instead.
var RecordBin = RecordMetaData.Bin

// DeployRecord deploys a new Ethereum contract, binding an instance of Record to it.
func DeployRecord(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Record, error) {
	parsed, err := RecordMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(RecordBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Record{RecordCaller: RecordCaller{contract: contract}, RecordTransactor: RecordTransactor{contract: contract}, RecordFilterer: RecordFilterer{contract: contract}}, nil
}

// Record is an auto generated Go binding around an Ethereum contract.
type Record struct {
	RecordCaller     // Read-only binding to the contract
	RecordTransactor // Write-only binding to the contract
	RecordFilterer   // Log filterer for contract events
}

// RecordCaller is an auto generated read-only Go binding around an Ethereum contract.
type RecordCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RecordTransactor is an auto generated write-only Go binding around an Ethereum contract.
type RecordTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RecordFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type RecordFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RecordSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type RecordSession struct {
	Contract     *Record           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// RecordCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type RecordCallerSession struct {
	Contract *RecordCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// RecordTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type RecordTransactorSession struct {
	Contract     *RecordTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// RecordRaw is an auto generated low-level Go binding around an Ethereum contract.
type RecordRaw struct {
	Contract *Record // Generic contract binding to access the raw methods on
}

// RecordCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type RecordCallerRaw struct {
	Contract *RecordCaller // Generic read-only contract binding to access the raw methods on
}

// RecordTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type RecordTransactorRaw struct {
	Contract *RecordTransactor // Generic write-only contract binding to access the raw methods on
}

// NewRecord creates a new instance of Record, bound to a specific deployed contract.
func NewRecord(address common.Address, backend bind.ContractBackend) (*Record, error) {
	contract, err := bindRecord(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Record{RecordCaller: RecordCaller{contract: contract}, RecordTransactor: RecordTransactor{contract: contract}, RecordFilterer: RecordFilterer{contract: contract}}, nil
}

// NewRecordCaller creates a new read-only instance of Record, bound to a specific deployed contract.
func NewRecordCaller(address common.Address, caller bind.ContractCaller) (*RecordCaller, error) {
	contract, err := bindRecord(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &RecordCaller{contract: contract}, nil
}

// NewRecordTransactor creates a new write-only instance of Record, bound to a specific deployed contract.
func NewRecordTransactor(address common.Address, transactor bind.ContractTransactor) (*RecordTransactor, error) {
	contract, err := bindRecord(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &RecordTransactor{contract: contract}, nil
}

// NewRecordFilterer creates a new log filterer instance of Record, bound to a specific deployed contract.
func NewRecordFilterer(address common.Address, filterer bind.ContractFilterer) (*RecordFilterer, error) {
	contract, err := bindRecord(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &RecordFilterer{contract: contract}, nil
}

// bindRecord binds a generic wrapper to an already deployed contract.
func bindRecord(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := RecordMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Record *RecordRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Record.Contract.RecordCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Record *RecordRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Record.Contract.RecordTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Record *RecordRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Record.Contract.RecordTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Record *RecordCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Record.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Record *RecordTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Record.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Record *RecordTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Record.Contract.contract.Transact(opts, method, params...)
}

// DISTRIBUTECONTRACT is a free data retrieval call binding the contract method 0x3d9353fe.
//
// Solidity: function DISTRIBUTE_CONTRACT() view returns(address)
func (_Record *RecordCaller) DISTRIBUTECONTRACT(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Record.contract.Call(opts, &out, "DISTRIBUTE_CONTRACT")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// DISTRIBUTECONTRACT is a free data retrieval call binding the contract method 0x3d9353fe.
//
// Solidity: function DISTRIBUTE_CONTRACT() view returns(address)
func (_Record *RecordSession) DISTRIBUTECONTRACT() (common.Address, error) {
	return _Record.Contract.DISTRIBUTECONTRACT(&_Record.CallOpts)
}

// DISTRIBUTECONTRACT is a free data retrieval call binding the contract method 0x3d9353fe.
//
// Solidity: function DISTRIBUTE_CONTRACT() view returns(address)
func (_Record *RecordCallerSession) DISTRIBUTECONTRACT() (common.Address, error) {
	return _Record.Contract.DISTRIBUTECONTRACT(&_Record.CallOpts)
}

// GOVCONTRACT is a free data retrieval call binding the contract method 0x7828a905.
//
// Solidity: function GOV_CONTRACT() view returns(address)
func (_Record *RecordCaller) GOVCONTRACT(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Record.contract.Call(opts, &out, "GOV_CONTRACT")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GOVCONTRACT is a free data retrieval call binding the contract method 0x7828a905.
//
// Solidity: function GOV_CONTRACT() view returns(address)
func (_Record *RecordSession) GOVCONTRACT() (common.Address, error) {
	return _Record.Contract.GOVCONTRACT(&_Record.CallOpts)
}

// GOVCONTRACT is a free data retrieval call binding the contract method 0x7828a905.
//
// Solidity: function GOV_CONTRACT() view returns(address)
func (_Record *RecordCallerSession) GOVCONTRACT() (common.Address, error) {
	return _Record.Contract.GOVCONTRACT(&_Record.CallOpts)
}

// L2STAKINGCONTRACT is a free data retrieval call binding the contract method 0x807de443.
//
// Solidity: function L2_STAKING_CONTRACT() view returns(address)
func (_Record *RecordCaller) L2STAKINGCONTRACT(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Record.contract.Call(opts, &out, "L2_STAKING_CONTRACT")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// L2STAKINGCONTRACT is a free data retrieval call binding the contract method 0x807de443.
//
// Solidity: function L2_STAKING_CONTRACT() view returns(address)
func (_Record *RecordSession) L2STAKINGCONTRACT() (common.Address, error) {
	return _Record.Contract.L2STAKINGCONTRACT(&_Record.CallOpts)
}

// L2STAKINGCONTRACT is a free data retrieval call binding the contract method 0x807de443.
//
// Solidity: function L2_STAKING_CONTRACT() view returns(address)
func (_Record *RecordCallerSession) L2STAKINGCONTRACT() (common.Address, error) {
	return _Record.Contract.L2STAKINGCONTRACT(&_Record.CallOpts)
}

// MORPHTOKENCONTRACT is a free data retrieval call binding the contract method 0xd5577141.
//
// Solidity: function MORPH_TOKEN_CONTRACT() view returns(address)
func (_Record *RecordCaller) MORPHTOKENCONTRACT(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Record.contract.Call(opts, &out, "MORPH_TOKEN_CONTRACT")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// MORPHTOKENCONTRACT is a free data retrieval call binding the contract method 0xd5577141.
//
// Solidity: function MORPH_TOKEN_CONTRACT() view returns(address)
func (_Record *RecordSession) MORPHTOKENCONTRACT() (common.Address, error) {
	return _Record.Contract.MORPHTOKENCONTRACT(&_Record.CallOpts)
}

// MORPHTOKENCONTRACT is a free data retrieval call binding the contract method 0xd5577141.
//
// Solidity: function MORPH_TOKEN_CONTRACT() view returns(address)
func (_Record *RecordCallerSession) MORPHTOKENCONTRACT() (common.Address, error) {
	return _Record.Contract.MORPHTOKENCONTRACT(&_Record.CallOpts)
}

// SEQUENCERCONTRACT is a free data retrieval call binding the contract method 0x8e21d5fb.
//
// Solidity: function SEQUENCER_CONTRACT() view returns(address)
func (_Record *RecordCaller) SEQUENCERCONTRACT(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Record.contract.Call(opts, &out, "SEQUENCER_CONTRACT")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// SEQUENCERCONTRACT is a free data retrieval call binding the contract method 0x8e21d5fb.
//
// Solidity: function SEQUENCER_CONTRACT() view returns(address)
func (_Record *RecordSession) SEQUENCERCONTRACT() (common.Address, error) {
	return _Record.Contract.SEQUENCERCONTRACT(&_Record.CallOpts)
}

// SEQUENCERCONTRACT is a free data retrieval call binding the contract method 0x8e21d5fb.
//
// Solidity: function SEQUENCER_CONTRACT() view returns(address)
func (_Record *RecordCallerSession) SEQUENCERCONTRACT() (common.Address, error) {
	return _Record.Contract.SEQUENCERCONTRACT(&_Record.CallOpts)
}

// BatchSubmissions is a free data retrieval call binding the contract method 0x78f908e1.
//
// Solidity: function batchSubmissions(uint256 batchIndex) view returns(uint256 index, address submitter, uint256 startBlock, uint256 endBlock, uint256 rollupTime, uint256 rollupBlock)
func (_Record *RecordCaller) BatchSubmissions(opts *bind.CallOpts, batchIndex *big.Int) (struct {
	Index       *big.Int
	Submitter   common.Address
	StartBlock  *big.Int
	EndBlock    *big.Int
	RollupTime  *big.Int
	RollupBlock *big.Int
}, error) {
	var out []interface{}
	err := _Record.contract.Call(opts, &out, "batchSubmissions", batchIndex)

	outstruct := new(struct {
		Index       *big.Int
		Submitter   common.Address
		StartBlock  *big.Int
		EndBlock    *big.Int
		RollupTime  *big.Int
		RollupBlock *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Index = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Submitter = *abi.ConvertType(out[1], new(common.Address)).(*common.Address)
	outstruct.StartBlock = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.EndBlock = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.RollupTime = *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)
	outstruct.RollupBlock = *abi.ConvertType(out[5], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// BatchSubmissions is a free data retrieval call binding the contract method 0x78f908e1.
//
// Solidity: function batchSubmissions(uint256 batchIndex) view returns(uint256 index, address submitter, uint256 startBlock, uint256 endBlock, uint256 rollupTime, uint256 rollupBlock)
func (_Record *RecordSession) BatchSubmissions(batchIndex *big.Int) (struct {
	Index       *big.Int
	Submitter   common.Address
	StartBlock  *big.Int
	EndBlock    *big.Int
	RollupTime  *big.Int
	RollupBlock *big.Int
}, error) {
	return _Record.Contract.BatchSubmissions(&_Record.CallOpts, batchIndex)
}

// BatchSubmissions is a free data retrieval call binding the contract method 0x78f908e1.
//
// Solidity: function batchSubmissions(uint256 batchIndex) view returns(uint256 index, address submitter, uint256 startBlock, uint256 endBlock, uint256 rollupTime, uint256 rollupBlock)
func (_Record *RecordCallerSession) BatchSubmissions(batchIndex *big.Int) (struct {
	Index       *big.Int
	Submitter   common.Address
	StartBlock  *big.Int
	EndBlock    *big.Int
	RollupTime  *big.Int
	RollupBlock *big.Int
}, error) {
	return _Record.Contract.BatchSubmissions(&_Record.CallOpts, batchIndex)
}

// GetBatchSubmissions is a free data retrieval call binding the contract method 0x64b4abe3.
//
// Solidity: function getBatchSubmissions(uint256 start, uint256 end) view returns((uint256,address,uint256,uint256,uint256,uint256)[] res)
func (_Record *RecordCaller) GetBatchSubmissions(opts *bind.CallOpts, start *big.Int, end *big.Int) ([]IRecordBatchSubmission, error) {
	var out []interface{}
	err := _Record.contract.Call(opts, &out, "getBatchSubmissions", start, end)

	if err != nil {
		return *new([]IRecordBatchSubmission), err
	}

	out0 := *abi.ConvertType(out[0], new([]IRecordBatchSubmission)).(*[]IRecordBatchSubmission)

	return out0, err

}

// GetBatchSubmissions is a free data retrieval call binding the contract method 0x64b4abe3.
//
// Solidity: function getBatchSubmissions(uint256 start, uint256 end) view returns((uint256,address,uint256,uint256,uint256,uint256)[] res)
func (_Record *RecordSession) GetBatchSubmissions(start *big.Int, end *big.Int) ([]IRecordBatchSubmission, error) {
	return _Record.Contract.GetBatchSubmissions(&_Record.CallOpts, start, end)
}

// GetBatchSubmissions is a free data retrieval call binding the contract method 0x64b4abe3.
//
// Solidity: function getBatchSubmissions(uint256 start, uint256 end) view returns((uint256,address,uint256,uint256,uint256,uint256)[] res)
func (_Record *RecordCallerSession) GetBatchSubmissions(start *big.Int, end *big.Int) ([]IRecordBatchSubmission, error) {
	return _Record.Contract.GetBatchSubmissions(&_Record.CallOpts, start, end)
}

// GetRewardEpochs is a free data retrieval call binding the contract method 0xcb6293e8.
//
// Solidity: function getRewardEpochs(uint256 start, uint256 end) view returns((uint256,uint256,address[],uint256[],uint256[],uint256[])[] res)
func (_Record *RecordCaller) GetRewardEpochs(opts *bind.CallOpts, start *big.Int, end *big.Int) ([]IRecordRewardEpochInfo, error) {
	var out []interface{}
	err := _Record.contract.Call(opts, &out, "getRewardEpochs", start, end)

	if err != nil {
		return *new([]IRecordRewardEpochInfo), err
	}

	out0 := *abi.ConvertType(out[0], new([]IRecordRewardEpochInfo)).(*[]IRecordRewardEpochInfo)

	return out0, err

}

// GetRewardEpochs is a free data retrieval call binding the contract method 0xcb6293e8.
//
// Solidity: function getRewardEpochs(uint256 start, uint256 end) view returns((uint256,uint256,address[],uint256[],uint256[],uint256[])[] res)
func (_Record *RecordSession) GetRewardEpochs(start *big.Int, end *big.Int) ([]IRecordRewardEpochInfo, error) {
	return _Record.Contract.GetRewardEpochs(&_Record.CallOpts, start, end)
}

// GetRewardEpochs is a free data retrieval call binding the contract method 0xcb6293e8.
//
// Solidity: function getRewardEpochs(uint256 start, uint256 end) view returns((uint256,uint256,address[],uint256[],uint256[],uint256[])[] res)
func (_Record *RecordCallerSession) GetRewardEpochs(start *big.Int, end *big.Int) ([]IRecordRewardEpochInfo, error) {
	return _Record.Contract.GetRewardEpochs(&_Record.CallOpts, start, end)
}

// GetRollupEpochs is a free data retrieval call binding the contract method 0x4e3ca406.
//
// Solidity: function getRollupEpochs(uint256 start, uint256 end) view returns((uint256,address,uint256,uint256,uint256)[] res)
func (_Record *RecordCaller) GetRollupEpochs(opts *bind.CallOpts, start *big.Int, end *big.Int) ([]IRecordRollupEpochInfo, error) {
	var out []interface{}
	err := _Record.contract.Call(opts, &out, "getRollupEpochs", start, end)

	if err != nil {
		return *new([]IRecordRollupEpochInfo), err
	}

	out0 := *abi.ConvertType(out[0], new([]IRecordRollupEpochInfo)).(*[]IRecordRollupEpochInfo)

	return out0, err

}

// GetRollupEpochs is a free data retrieval call binding the contract method 0x4e3ca406.
//
// Solidity: function getRollupEpochs(uint256 start, uint256 end) view returns((uint256,address,uint256,uint256,uint256)[] res)
func (_Record *RecordSession) GetRollupEpochs(start *big.Int, end *big.Int) ([]IRecordRollupEpochInfo, error) {
	return _Record.Contract.GetRollupEpochs(&_Record.CallOpts, start, end)
}

// GetRollupEpochs is a free data retrieval call binding the contract method 0x4e3ca406.
//
// Solidity: function getRollupEpochs(uint256 start, uint256 end) view returns((uint256,address,uint256,uint256,uint256)[] res)
func (_Record *RecordCallerSession) GetRollupEpochs(start *big.Int, end *big.Int) ([]IRecordRollupEpochInfo, error) {
	return _Record.Contract.GetRollupEpochs(&_Record.CallOpts, start, end)
}

// LatestRewardEpochBlock is a free data retrieval call binding the contract method 0x0776c0f7.
//
// Solidity: function latestRewardEpochBlock() view returns(uint256)
func (_Record *RecordCaller) LatestRewardEpochBlock(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Record.contract.Call(opts, &out, "latestRewardEpochBlock")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// LatestRewardEpochBlock is a free data retrieval call binding the contract method 0x0776c0f7.
//
// Solidity: function latestRewardEpochBlock() view returns(uint256)
func (_Record *RecordSession) LatestRewardEpochBlock() (*big.Int, error) {
	return _Record.Contract.LatestRewardEpochBlock(&_Record.CallOpts)
}

// LatestRewardEpochBlock is a free data retrieval call binding the contract method 0x0776c0f7.
//
// Solidity: function latestRewardEpochBlock() view returns(uint256)
func (_Record *RecordCallerSession) LatestRewardEpochBlock() (*big.Int, error) {
	return _Record.Contract.LatestRewardEpochBlock(&_Record.CallOpts)
}

// NextBatchSubmissionIndex is a free data retrieval call binding the contract method 0x1511e1b1.
//
// Solidity: function nextBatchSubmissionIndex() view returns(uint256)
func (_Record *RecordCaller) NextBatchSubmissionIndex(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Record.contract.Call(opts, &out, "nextBatchSubmissionIndex")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// NextBatchSubmissionIndex is a free data retrieval call binding the contract method 0x1511e1b1.
//
// Solidity: function nextBatchSubmissionIndex() view returns(uint256)
func (_Record *RecordSession) NextBatchSubmissionIndex() (*big.Int, error) {
	return _Record.Contract.NextBatchSubmissionIndex(&_Record.CallOpts)
}

// NextBatchSubmissionIndex is a free data retrieval call binding the contract method 0x1511e1b1.
//
// Solidity: function nextBatchSubmissionIndex() view returns(uint256)
func (_Record *RecordCallerSession) NextBatchSubmissionIndex() (*big.Int, error) {
	return _Record.Contract.NextBatchSubmissionIndex(&_Record.CallOpts)
}

// NextRewardEpochIndex is a free data retrieval call binding the contract method 0x2fbf6487.
//
// Solidity: function nextRewardEpochIndex() view returns(uint256)
func (_Record *RecordCaller) NextRewardEpochIndex(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Record.contract.Call(opts, &out, "nextRewardEpochIndex")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// NextRewardEpochIndex is a free data retrieval call binding the contract method 0x2fbf6487.
//
// Solidity: function nextRewardEpochIndex() view returns(uint256)
func (_Record *RecordSession) NextRewardEpochIndex() (*big.Int, error) {
	return _Record.Contract.NextRewardEpochIndex(&_Record.CallOpts)
}

// NextRewardEpochIndex is a free data retrieval call binding the contract method 0x2fbf6487.
//
// Solidity: function nextRewardEpochIndex() view returns(uint256)
func (_Record *RecordCallerSession) NextRewardEpochIndex() (*big.Int, error) {
	return _Record.Contract.NextRewardEpochIndex(&_Record.CallOpts)
}

// NextRollupEpochIndex is a free data retrieval call binding the contract method 0x484f8d0f.
//
// Solidity: function nextRollupEpochIndex() view returns(uint256)
func (_Record *RecordCaller) NextRollupEpochIndex(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Record.contract.Call(opts, &out, "nextRollupEpochIndex")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// NextRollupEpochIndex is a free data retrieval call binding the contract method 0x484f8d0f.
//
// Solidity: function nextRollupEpochIndex() view returns(uint256)
func (_Record *RecordSession) NextRollupEpochIndex() (*big.Int, error) {
	return _Record.Contract.NextRollupEpochIndex(&_Record.CallOpts)
}

// NextRollupEpochIndex is a free data retrieval call binding the contract method 0x484f8d0f.
//
// Solidity: function nextRollupEpochIndex() view returns(uint256)
func (_Record *RecordCallerSession) NextRollupEpochIndex() (*big.Int, error) {
	return _Record.Contract.NextRollupEpochIndex(&_Record.CallOpts)
}

// Oracle is a free data retrieval call binding the contract method 0x7dc0d1d0.
//
// Solidity: function oracle() view returns(address)
func (_Record *RecordCaller) Oracle(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Record.contract.Call(opts, &out, "oracle")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Oracle is a free data retrieval call binding the contract method 0x7dc0d1d0.
//
// Solidity: function oracle() view returns(address)
func (_Record *RecordSession) Oracle() (common.Address, error) {
	return _Record.Contract.Oracle(&_Record.CallOpts)
}

// Oracle is a free data retrieval call binding the contract method 0x7dc0d1d0.
//
// Solidity: function oracle() view returns(address)
func (_Record *RecordCallerSession) Oracle() (common.Address, error) {
	return _Record.Contract.Oracle(&_Record.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Record *RecordCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Record.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Record *RecordSession) Owner() (common.Address, error) {
	return _Record.Contract.Owner(&_Record.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Record *RecordCallerSession) Owner() (common.Address, error) {
	return _Record.Contract.Owner(&_Record.CallOpts)
}

// RewardEpochs is a free data retrieval call binding the contract method 0xa795f409.
//
// Solidity: function rewardEpochs(uint256 rewardEpochIndex) view returns(uint256 index, uint256 blockCount)
func (_Record *RecordCaller) RewardEpochs(opts *bind.CallOpts, rewardEpochIndex *big.Int) (struct {
	Index      *big.Int
	BlockCount *big.Int
}, error) {
	var out []interface{}
	err := _Record.contract.Call(opts, &out, "rewardEpochs", rewardEpochIndex)

	outstruct := new(struct {
		Index      *big.Int
		BlockCount *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Index = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.BlockCount = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// RewardEpochs is a free data retrieval call binding the contract method 0xa795f409.
//
// Solidity: function rewardEpochs(uint256 rewardEpochIndex) view returns(uint256 index, uint256 blockCount)
func (_Record *RecordSession) RewardEpochs(rewardEpochIndex *big.Int) (struct {
	Index      *big.Int
	BlockCount *big.Int
}, error) {
	return _Record.Contract.RewardEpochs(&_Record.CallOpts, rewardEpochIndex)
}

// RewardEpochs is a free data retrieval call binding the contract method 0xa795f409.
//
// Solidity: function rewardEpochs(uint256 rewardEpochIndex) view returns(uint256 index, uint256 blockCount)
func (_Record *RecordCallerSession) RewardEpochs(rewardEpochIndex *big.Int) (struct {
	Index      *big.Int
	BlockCount *big.Int
}, error) {
	return _Record.Contract.RewardEpochs(&_Record.CallOpts, rewardEpochIndex)
}

// RollupEpochs is a free data retrieval call binding the contract method 0xa24231e8.
//
// Solidity: function rollupEpochs(uint256 rollupEpochIndex) view returns(uint256 index, address submitter, uint256 startTime, uint256 endTime, uint256 endBlock)
func (_Record *RecordCaller) RollupEpochs(opts *bind.CallOpts, rollupEpochIndex *big.Int) (struct {
	Index     *big.Int
	Submitter common.Address
	StartTime *big.Int
	EndTime   *big.Int
	EndBlock  *big.Int
}, error) {
	var out []interface{}
	err := _Record.contract.Call(opts, &out, "rollupEpochs", rollupEpochIndex)

	outstruct := new(struct {
		Index     *big.Int
		Submitter common.Address
		StartTime *big.Int
		EndTime   *big.Int
		EndBlock  *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Index = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Submitter = *abi.ConvertType(out[1], new(common.Address)).(*common.Address)
	outstruct.StartTime = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.EndTime = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.EndBlock = *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// RollupEpochs is a free data retrieval call binding the contract method 0xa24231e8.
//
// Solidity: function rollupEpochs(uint256 rollupEpochIndex) view returns(uint256 index, address submitter, uint256 startTime, uint256 endTime, uint256 endBlock)
func (_Record *RecordSession) RollupEpochs(rollupEpochIndex *big.Int) (struct {
	Index     *big.Int
	Submitter common.Address
	StartTime *big.Int
	EndTime   *big.Int
	EndBlock  *big.Int
}, error) {
	return _Record.Contract.RollupEpochs(&_Record.CallOpts, rollupEpochIndex)
}

// RollupEpochs is a free data retrieval call binding the contract method 0xa24231e8.
//
// Solidity: function rollupEpochs(uint256 rollupEpochIndex) view returns(uint256 index, address submitter, uint256 startTime, uint256 endTime, uint256 endBlock)
func (_Record *RecordCallerSession) RollupEpochs(rollupEpochIndex *big.Int) (struct {
	Index     *big.Int
	Submitter common.Address
	StartTime *big.Int
	EndTime   *big.Int
	EndBlock  *big.Int
}, error) {
	return _Record.Contract.RollupEpochs(&_Record.CallOpts, rollupEpochIndex)
}

// Initialize is a paid mutator transaction binding the contract method 0x1794bb3c.
//
// Solidity: function initialize(address _owner, address _oracle, uint256 _nextBatchSubmissionIndex) returns()
func (_Record *RecordTransactor) Initialize(opts *bind.TransactOpts, _owner common.Address, _oracle common.Address, _nextBatchSubmissionIndex *big.Int) (*types.Transaction, error) {
	return _Record.contract.Transact(opts, "initialize", _owner, _oracle, _nextBatchSubmissionIndex)
}

// Initialize is a paid mutator transaction binding the contract method 0x1794bb3c.
//
// Solidity: function initialize(address _owner, address _oracle, uint256 _nextBatchSubmissionIndex) returns()
func (_Record *RecordSession) Initialize(_owner common.Address, _oracle common.Address, _nextBatchSubmissionIndex *big.Int) (*types.Transaction, error) {
	return _Record.Contract.Initialize(&_Record.TransactOpts, _owner, _oracle, _nextBatchSubmissionIndex)
}

// Initialize is a paid mutator transaction binding the contract method 0x1794bb3c.
//
// Solidity: function initialize(address _owner, address _oracle, uint256 _nextBatchSubmissionIndex) returns()
func (_Record *RecordTransactorSession) Initialize(_owner common.Address, _oracle common.Address, _nextBatchSubmissionIndex *big.Int) (*types.Transaction, error) {
	return _Record.Contract.Initialize(&_Record.TransactOpts, _owner, _oracle, _nextBatchSubmissionIndex)
}

// RecordFinalizedBatchSubmissions is a paid mutator transaction binding the contract method 0x41ed047f.
//
// Solidity: function recordFinalizedBatchSubmissions((uint256,address,uint256,uint256,uint256,uint256)[] _batchSubmissions) returns()
func (_Record *RecordTransactor) RecordFinalizedBatchSubmissions(opts *bind.TransactOpts, _batchSubmissions []IRecordBatchSubmission) (*types.Transaction, error) {
	return _Record.contract.Transact(opts, "recordFinalizedBatchSubmissions", _batchSubmissions)
}

// RecordFinalizedBatchSubmissions is a paid mutator transaction binding the contract method 0x41ed047f.
//
// Solidity: function recordFinalizedBatchSubmissions((uint256,address,uint256,uint256,uint256,uint256)[] _batchSubmissions) returns()
func (_Record *RecordSession) RecordFinalizedBatchSubmissions(_batchSubmissions []IRecordBatchSubmission) (*types.Transaction, error) {
	return _Record.Contract.RecordFinalizedBatchSubmissions(&_Record.TransactOpts, _batchSubmissions)
}

// RecordFinalizedBatchSubmissions is a paid mutator transaction binding the contract method 0x41ed047f.
//
// Solidity: function recordFinalizedBatchSubmissions((uint256,address,uint256,uint256,uint256,uint256)[] _batchSubmissions) returns()
func (_Record *RecordTransactorSession) RecordFinalizedBatchSubmissions(_batchSubmissions []IRecordBatchSubmission) (*types.Transaction, error) {
	return _Record.Contract.RecordFinalizedBatchSubmissions(&_Record.TransactOpts, _batchSubmissions)
}

// RecordRewardEpochs is a paid mutator transaction binding the contract method 0x6ea0396e.
//
// Solidity: function recordRewardEpochs((uint256,uint256,address[],uint256[],uint256[],uint256[])[] _rewardEpochs) returns()
func (_Record *RecordTransactor) RecordRewardEpochs(opts *bind.TransactOpts, _rewardEpochs []IRecordRewardEpochInfo) (*types.Transaction, error) {
	return _Record.contract.Transact(opts, "recordRewardEpochs", _rewardEpochs)
}

// RecordRewardEpochs is a paid mutator transaction binding the contract method 0x6ea0396e.
//
// Solidity: function recordRewardEpochs((uint256,uint256,address[],uint256[],uint256[],uint256[])[] _rewardEpochs) returns()
func (_Record *RecordSession) RecordRewardEpochs(_rewardEpochs []IRecordRewardEpochInfo) (*types.Transaction, error) {
	return _Record.Contract.RecordRewardEpochs(&_Record.TransactOpts, _rewardEpochs)
}

// RecordRewardEpochs is a paid mutator transaction binding the contract method 0x6ea0396e.
//
// Solidity: function recordRewardEpochs((uint256,uint256,address[],uint256[],uint256[],uint256[])[] _rewardEpochs) returns()
func (_Record *RecordTransactorSession) RecordRewardEpochs(_rewardEpochs []IRecordRewardEpochInfo) (*types.Transaction, error) {
	return _Record.Contract.RecordRewardEpochs(&_Record.TransactOpts, _rewardEpochs)
}

// RecordRollupEpochs is a paid mutator transaction binding the contract method 0xfe49dbc9.
//
// Solidity: function recordRollupEpochs((uint256,address,uint256,uint256,uint256)[] _rollupEpochs) returns()
func (_Record *RecordTransactor) RecordRollupEpochs(opts *bind.TransactOpts, _rollupEpochs []IRecordRollupEpochInfo) (*types.Transaction, error) {
	return _Record.contract.Transact(opts, "recordRollupEpochs", _rollupEpochs)
}

// RecordRollupEpochs is a paid mutator transaction binding the contract method 0xfe49dbc9.
//
// Solidity: function recordRollupEpochs((uint256,address,uint256,uint256,uint256)[] _rollupEpochs) returns()
func (_Record *RecordSession) RecordRollupEpochs(_rollupEpochs []IRecordRollupEpochInfo) (*types.Transaction, error) {
	return _Record.Contract.RecordRollupEpochs(&_Record.TransactOpts, _rollupEpochs)
}

// RecordRollupEpochs is a paid mutator transaction binding the contract method 0xfe49dbc9.
//
// Solidity: function recordRollupEpochs((uint256,address,uint256,uint256,uint256)[] _rollupEpochs) returns()
func (_Record *RecordTransactorSession) RecordRollupEpochs(_rollupEpochs []IRecordRollupEpochInfo) (*types.Transaction, error) {
	return _Record.Contract.RecordRollupEpochs(&_Record.TransactOpts, _rollupEpochs)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Record *RecordTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Record.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Record *RecordSession) RenounceOwnership() (*types.Transaction, error) {
	return _Record.Contract.RenounceOwnership(&_Record.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Record *RecordTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Record.Contract.RenounceOwnership(&_Record.TransactOpts)
}

// SetLatestRewardEpochBlock is a paid mutator transaction binding the contract method 0x10c9873f.
//
// Solidity: function setLatestRewardEpochBlock(uint256 _latestBlock) returns()
func (_Record *RecordTransactor) SetLatestRewardEpochBlock(opts *bind.TransactOpts, _latestBlock *big.Int) (*types.Transaction, error) {
	return _Record.contract.Transact(opts, "setLatestRewardEpochBlock", _latestBlock)
}

// SetLatestRewardEpochBlock is a paid mutator transaction binding the contract method 0x10c9873f.
//
// Solidity: function setLatestRewardEpochBlock(uint256 _latestBlock) returns()
func (_Record *RecordSession) SetLatestRewardEpochBlock(_latestBlock *big.Int) (*types.Transaction, error) {
	return _Record.Contract.SetLatestRewardEpochBlock(&_Record.TransactOpts, _latestBlock)
}

// SetLatestRewardEpochBlock is a paid mutator transaction binding the contract method 0x10c9873f.
//
// Solidity: function setLatestRewardEpochBlock(uint256 _latestBlock) returns()
func (_Record *RecordTransactorSession) SetLatestRewardEpochBlock(_latestBlock *big.Int) (*types.Transaction, error) {
	return _Record.Contract.SetLatestRewardEpochBlock(&_Record.TransactOpts, _latestBlock)
}

// SetOracleAddress is a paid mutator transaction binding the contract method 0x4c69c00f.
//
// Solidity: function setOracleAddress(address _oracle) returns()
func (_Record *RecordTransactor) SetOracleAddress(opts *bind.TransactOpts, _oracle common.Address) (*types.Transaction, error) {
	return _Record.contract.Transact(opts, "setOracleAddress", _oracle)
}

// SetOracleAddress is a paid mutator transaction binding the contract method 0x4c69c00f.
//
// Solidity: function setOracleAddress(address _oracle) returns()
func (_Record *RecordSession) SetOracleAddress(_oracle common.Address) (*types.Transaction, error) {
	return _Record.Contract.SetOracleAddress(&_Record.TransactOpts, _oracle)
}

// SetOracleAddress is a paid mutator transaction binding the contract method 0x4c69c00f.
//
// Solidity: function setOracleAddress(address _oracle) returns()
func (_Record *RecordTransactorSession) SetOracleAddress(_oracle common.Address) (*types.Transaction, error) {
	return _Record.Contract.SetOracleAddress(&_Record.TransactOpts, _oracle)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Record *RecordTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Record.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Record *RecordSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Record.Contract.TransferOwnership(&_Record.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Record *RecordTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Record.Contract.TransferOwnership(&_Record.TransactOpts, newOwner)
}

// RecordBatchSubmissionsUploadedIterator is returned from FilterBatchSubmissionsUploaded and is used to iterate over the raw logs and unpacked data for BatchSubmissionsUploaded events raised by the Record contract.
type RecordBatchSubmissionsUploadedIterator struct {
	Event *RecordBatchSubmissionsUploaded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RecordBatchSubmissionsUploadedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RecordBatchSubmissionsUploaded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RecordBatchSubmissionsUploaded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RecordBatchSubmissionsUploadedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RecordBatchSubmissionsUploadedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RecordBatchSubmissionsUploaded represents a BatchSubmissionsUploaded event raised by the Record contract.
type RecordBatchSubmissionsUploaded struct {
	StartIndex *big.Int
	DataLength *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterBatchSubmissionsUploaded is a free log retrieval operation binding the contract event 0x1c517c9850aa84483b0b2434e58bab4c7967f0b1a34d8b18a6ad22436add010e.
//
// Solidity: event BatchSubmissionsUploaded(uint256 indexed startIndex, uint256 dataLength)
func (_Record *RecordFilterer) FilterBatchSubmissionsUploaded(opts *bind.FilterOpts, startIndex []*big.Int) (*RecordBatchSubmissionsUploadedIterator, error) {

	var startIndexRule []interface{}
	for _, startIndexItem := range startIndex {
		startIndexRule = append(startIndexRule, startIndexItem)
	}

	logs, sub, err := _Record.contract.FilterLogs(opts, "BatchSubmissionsUploaded", startIndexRule)
	if err != nil {
		return nil, err
	}
	return &RecordBatchSubmissionsUploadedIterator{contract: _Record.contract, event: "BatchSubmissionsUploaded", logs: logs, sub: sub}, nil
}

// WatchBatchSubmissionsUploaded is a free log subscription operation binding the contract event 0x1c517c9850aa84483b0b2434e58bab4c7967f0b1a34d8b18a6ad22436add010e.
//
// Solidity: event BatchSubmissionsUploaded(uint256 indexed startIndex, uint256 dataLength)
func (_Record *RecordFilterer) WatchBatchSubmissionsUploaded(opts *bind.WatchOpts, sink chan<- *RecordBatchSubmissionsUploaded, startIndex []*big.Int) (event.Subscription, error) {

	var startIndexRule []interface{}
	for _, startIndexItem := range startIndex {
		startIndexRule = append(startIndexRule, startIndexItem)
	}

	logs, sub, err := _Record.contract.WatchLogs(opts, "BatchSubmissionsUploaded", startIndexRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RecordBatchSubmissionsUploaded)
				if err := _Record.contract.UnpackLog(event, "BatchSubmissionsUploaded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBatchSubmissionsUploaded is a log parse operation binding the contract event 0x1c517c9850aa84483b0b2434e58bab4c7967f0b1a34d8b18a6ad22436add010e.
//
// Solidity: event BatchSubmissionsUploaded(uint256 indexed startIndex, uint256 dataLength)
func (_Record *RecordFilterer) ParseBatchSubmissionsUploaded(log types.Log) (*RecordBatchSubmissionsUploaded, error) {
	event := new(RecordBatchSubmissionsUploaded)
	if err := _Record.contract.UnpackLog(event, "BatchSubmissionsUploaded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RecordInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the Record contract.
type RecordInitializedIterator struct {
	Event *RecordInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RecordInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RecordInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RecordInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RecordInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RecordInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RecordInitialized represents a Initialized event raised by the Record contract.
type RecordInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Record *RecordFilterer) FilterInitialized(opts *bind.FilterOpts) (*RecordInitializedIterator, error) {

	logs, sub, err := _Record.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &RecordInitializedIterator{contract: _Record.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Record *RecordFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *RecordInitialized) (event.Subscription, error) {

	logs, sub, err := _Record.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RecordInitialized)
				if err := _Record.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Record *RecordFilterer) ParseInitialized(log types.Log) (*RecordInitialized, error) {
	event := new(RecordInitialized)
	if err := _Record.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RecordOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Record contract.
type RecordOwnershipTransferredIterator struct {
	Event *RecordOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RecordOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RecordOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RecordOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RecordOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RecordOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RecordOwnershipTransferred represents a OwnershipTransferred event raised by the Record contract.
type RecordOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Record *RecordFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*RecordOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Record.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &RecordOwnershipTransferredIterator{contract: _Record.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Record *RecordFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *RecordOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Record.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RecordOwnershipTransferred)
				if err := _Record.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Record *RecordFilterer) ParseOwnershipTransferred(log types.Log) (*RecordOwnershipTransferred, error) {
	event := new(RecordOwnershipTransferred)
	if err := _Record.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RecordRewardEpochsUploadedIterator is returned from FilterRewardEpochsUploaded and is used to iterate over the raw logs and unpacked data for RewardEpochsUploaded events raised by the Record contract.
type RecordRewardEpochsUploadedIterator struct {
	Event *RecordRewardEpochsUploaded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RecordRewardEpochsUploadedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RecordRewardEpochsUploaded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RecordRewardEpochsUploaded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RecordRewardEpochsUploadedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RecordRewardEpochsUploadedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RecordRewardEpochsUploaded represents a RewardEpochsUploaded event raised by the Record contract.
type RecordRewardEpochsUploaded struct {
	StartIndex *big.Int
	DataLength *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterRewardEpochsUploaded is a free log retrieval operation binding the contract event 0x4aa68efd05426e59a9d43654a55a2a74c3e8840894d6e291f8f83085e3a6d1ea.
//
// Solidity: event RewardEpochsUploaded(uint256 indexed startIndex, uint256 dataLength)
func (_Record *RecordFilterer) FilterRewardEpochsUploaded(opts *bind.FilterOpts, startIndex []*big.Int) (*RecordRewardEpochsUploadedIterator, error) {

	var startIndexRule []interface{}
	for _, startIndexItem := range startIndex {
		startIndexRule = append(startIndexRule, startIndexItem)
	}

	logs, sub, err := _Record.contract.FilterLogs(opts, "RewardEpochsUploaded", startIndexRule)
	if err != nil {
		return nil, err
	}
	return &RecordRewardEpochsUploadedIterator{contract: _Record.contract, event: "RewardEpochsUploaded", logs: logs, sub: sub}, nil
}

// WatchRewardEpochsUploaded is a free log subscription operation binding the contract event 0x4aa68efd05426e59a9d43654a55a2a74c3e8840894d6e291f8f83085e3a6d1ea.
//
// Solidity: event RewardEpochsUploaded(uint256 indexed startIndex, uint256 dataLength)
func (_Record *RecordFilterer) WatchRewardEpochsUploaded(opts *bind.WatchOpts, sink chan<- *RecordRewardEpochsUploaded, startIndex []*big.Int) (event.Subscription, error) {

	var startIndexRule []interface{}
	for _, startIndexItem := range startIndex {
		startIndexRule = append(startIndexRule, startIndexItem)
	}

	logs, sub, err := _Record.contract.WatchLogs(opts, "RewardEpochsUploaded", startIndexRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RecordRewardEpochsUploaded)
				if err := _Record.contract.UnpackLog(event, "RewardEpochsUploaded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRewardEpochsUploaded is a log parse operation binding the contract event 0x4aa68efd05426e59a9d43654a55a2a74c3e8840894d6e291f8f83085e3a6d1ea.
//
// Solidity: event RewardEpochsUploaded(uint256 indexed startIndex, uint256 dataLength)
func (_Record *RecordFilterer) ParseRewardEpochsUploaded(log types.Log) (*RecordRewardEpochsUploaded, error) {
	event := new(RecordRewardEpochsUploaded)
	if err := _Record.contract.UnpackLog(event, "RewardEpochsUploaded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RecordRollupEpochsUploadedIterator is returned from FilterRollupEpochsUploaded and is used to iterate over the raw logs and unpacked data for RollupEpochsUploaded events raised by the Record contract.
type RecordRollupEpochsUploadedIterator struct {
	Event *RecordRollupEpochsUploaded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RecordRollupEpochsUploadedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RecordRollupEpochsUploaded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RecordRollupEpochsUploaded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RecordRollupEpochsUploadedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RecordRollupEpochsUploadedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RecordRollupEpochsUploaded represents a RollupEpochsUploaded event raised by the Record contract.
type RecordRollupEpochsUploaded struct {
	StartIndex *big.Int
	DataLength *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterRollupEpochsUploaded is a free log retrieval operation binding the contract event 0x0c53377f3eed25c9883c67adabc3f817b4fdcde29f550a6a26c0676ed2992929.
//
// Solidity: event RollupEpochsUploaded(uint256 indexed startIndex, uint256 dataLength)
func (_Record *RecordFilterer) FilterRollupEpochsUploaded(opts *bind.FilterOpts, startIndex []*big.Int) (*RecordRollupEpochsUploadedIterator, error) {

	var startIndexRule []interface{}
	for _, startIndexItem := range startIndex {
		startIndexRule = append(startIndexRule, startIndexItem)
	}

	logs, sub, err := _Record.contract.FilterLogs(opts, "RollupEpochsUploaded", startIndexRule)
	if err != nil {
		return nil, err
	}
	return &RecordRollupEpochsUploadedIterator{contract: _Record.contract, event: "RollupEpochsUploaded", logs: logs, sub: sub}, nil
}

// WatchRollupEpochsUploaded is a free log subscription operation binding the contract event 0x0c53377f3eed25c9883c67adabc3f817b4fdcde29f550a6a26c0676ed2992929.
//
// Solidity: event RollupEpochsUploaded(uint256 indexed startIndex, uint256 dataLength)
func (_Record *RecordFilterer) WatchRollupEpochsUploaded(opts *bind.WatchOpts, sink chan<- *RecordRollupEpochsUploaded, startIndex []*big.Int) (event.Subscription, error) {

	var startIndexRule []interface{}
	for _, startIndexItem := range startIndex {
		startIndexRule = append(startIndexRule, startIndexItem)
	}

	logs, sub, err := _Record.contract.WatchLogs(opts, "RollupEpochsUploaded", startIndexRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RecordRollupEpochsUploaded)
				if err := _Record.contract.UnpackLog(event, "RollupEpochsUploaded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRollupEpochsUploaded is a log parse operation binding the contract event 0x0c53377f3eed25c9883c67adabc3f817b4fdcde29f550a6a26c0676ed2992929.
//
// Solidity: event RollupEpochsUploaded(uint256 indexed startIndex, uint256 dataLength)
func (_Record *RecordFilterer) ParseRollupEpochsUploaded(log types.Log) (*RecordRollupEpochsUploaded, error) {
	event := new(RecordRollupEpochsUploaded)
	if err := _Record.contract.UnpackLog(event, "RollupEpochsUploaded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
