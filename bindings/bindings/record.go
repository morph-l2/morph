// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package bindings

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/scroll-tech/go-ethereum"
	"github.com/scroll-tech/go-ethereum/accounts/abi"
	"github.com/scroll-tech/go-ethereum/accounts/abi/bind"
	"github.com/scroll-tech/go-ethereum/common"
	"github.com/scroll-tech/go-ethereum/core/types"
	"github.com/scroll-tech/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// IRecordBatchSubmission is an auto generated low-level Go binding around an user-defined struct.
type IRecordBatchSubmission struct {
	Index      *big.Int
	Submitter  common.Address
	StartBlock *big.Int
	EndBlock   *big.Int
	RollupTime *big.Int
}

// IRecordRewardEpochInfo is an auto generated low-level Go binding around an user-defined struct.
type IRecordRewardEpochInfo struct {
	Index                *big.Int
	BlockCount           *big.Int
	Sequencers           []common.Address
	SequencerBlocks      []*big.Int
	SequencerRatios      []*big.Int
	SequencerCommissions []*big.Int
}

// IRecordRollupEpochInfo is an auto generated low-level Go binding around an user-defined struct.
type IRecordRollupEpochInfo struct {
	Index     *big.Int
	Submitter common.Address
	StartTime *big.Int
	EndTime   *big.Int
}

// RecordMetaData contains all meta data concerning the Record contract.
var RecordMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DISTRIBUTE_CONTRACT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GOV_CONTRACT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"L2_STAKING_CONTRACT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MORPH_TOKEN_CONTRACT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ORACLE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SEQUENCER_CONTRACT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"batchSubmissions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"submitter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rollupTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"getBatchSubmissions\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"submitter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rollupTime\",\"type\":\"uint256\"}],\"internalType\":\"structIRecord.BatchSubmission[]\",\"name\":\"res\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"getRewardEpochs\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockCount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"sequencers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"sequencerBlocks\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"sequencerRatios\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"sequencerCommissions\",\"type\":\"uint256[]\"}],\"internalType\":\"structIRecord.RewardEpochInfo[]\",\"name\":\"res\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"getRollupEpochs\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"submitter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"internalType\":\"structIRecord.RollupEpochInfo[]\",\"name\":\"res\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestRewardEpochBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextBatchSubmissionIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextRewardEpochIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextRollupEpochIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"submitter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rollupTime\",\"type\":\"uint256\"}],\"internalType\":\"structIRecord.BatchSubmission[]\",\"name\":\"_batchSubmissions\",\"type\":\"tuple[]\"}],\"name\":\"recordFinalizedBatchSubmissions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockCount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"sequencers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"sequencerBlocks\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"sequencerRatios\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"sequencerCommissions\",\"type\":\"uint256[]\"}],\"internalType\":\"structIRecord.RewardEpochInfo[]\",\"name\":\"_rewardEpochs\",\"type\":\"tuple[]\"}],\"name\":\"recordRewardEpochs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"submitter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"internalType\":\"structIRecord.RollupEpochInfo[]\",\"name\":\"_rollupEpochs\",\"type\":\"tuple[]\"}],\"name\":\"recordRollupEpochs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardEpochs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rollupEpochs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"submitter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_latestBlock\",\"type\":\"uint256\"}],\"name\":\"setLatestRewardEpochBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"}],\"name\":\"setOracleAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x61014060405261271061012052348015610017575f80fd5b5073530000000000000000000000000000000000001060805273530000000000000000000000000000000000001260a05273530000000000000000000000000000000000000360c05273530000000000000000000000000000000000001160e0527353000000000000000000000000000000000000046101005260805160a05160c05160e051610100516101205161298d6100fb5f395f81816117fb015261198e01525f61030201525f818161022b01526119fe01525f6103fe01525f81816103b9015261112501525f81816105000152818161121a01526115d1015261298d5ff3fe608060405234801561000f575f80fd5b506004361061019a575f3560e01c806364b4abe3116100e85780638da5cb5b11610093578063a795f4091161006e578063a795f409146104a0578063cb6293e8146104db578063d5577141146104fb578063f2fde38b14610522575f80fd5b80638da5cb5b146103db5780638e21d5fb146103f9578063a24231e814610420575f80fd5b80637828a905116100c35780637828a905146102fd57806378f908e114610324578063807de443146103b4575f80fd5b806364b4abe3146102c25780636ea0396e146102e2578063715018a6146102f5575f80fd5b8063484f8d0f116101485780634c69c00f116101235780634c69c00f1461027c5780634e3ca4061461028f5780634ecff524146102af575f80fd5b8063484f8d0f1461024d578063485cc955146102565780634897504714610269575f80fd5b80632fbf6487116101785780632fbf6487146101d857806338013f02146101e15780633d9353fe14610226575f80fd5b80630776c0f71461019e57806310c9873f146101ba5780631511e1b1146101cf575b5f80fd5b6101a7606c5481565b6040519081526020015b60405180910390f35b6101cd6101c8366004611ff0565b610535565b005b6101a760695481565b6101a7606b5481565b6065546102019073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101b1565b6102017f000000000000000000000000000000000000000000000000000000000000000081565b6101a7606a5481565b6101cd61026436600461202f565b6105f5565b6101cd61027736600461216e565b61080d565b6101cd61028a36600461223d565b610a42565b6102a261029d36600461225d565b610af4565b6040516101b1919061227d565b6101cd6102bd3660046122f6565b610c7c565b6102d56102d036600461225d565b610eda565b6040516101b191906123c8565b6101cd6102f0366004612508565b61106b565b6101cd611ada565b6102017f000000000000000000000000000000000000000000000000000000000000000081565b610377610332366004611ff0565b60666020525f908152604090208054600182015460028301546003840154600490940154929373ffffffffffffffffffffffffffffffffffffffff9092169290919085565b6040805195865273ffffffffffffffffffffffffffffffffffffffff9094166020860152928401919091526060830152608082015260a0016101b1565b6102017f000000000000000000000000000000000000000000000000000000000000000081565b60335473ffffffffffffffffffffffffffffffffffffffff16610201565b6102017f000000000000000000000000000000000000000000000000000000000000000081565b61046b61042e366004611ff0565b60676020525f90815260409020805460018201546002830154600390930154919273ffffffffffffffffffffffffffffffffffffffff9091169184565b6040805194855273ffffffffffffffffffffffffffffffffffffffff90931660208501529183015260608201526080016101b1565b6104c66104ae366004611ff0565b60686020525f90815260409020805460019091015482565b604080519283526020830191909152016101b1565b6104ee6104e936600461225d565b611aed565b6040516101b19190612706565b6102017f000000000000000000000000000000000000000000000000000000000000000081565b6101cd61053036600461223d565b611da1565b60655473ffffffffffffffffffffffffffffffffffffffff1633146105a15760405162461bcd60e51b815260206004820152601360248201527f6f6e6c79206f7261636c6520616c6c6f7765640000000000000000000000000060448201526064015b60405180910390fd5b5f81116105f05760405162461bcd60e51b815260206004820152601460248201527f696e76616c6964206c617465737420626c6f636b0000000000000000000000006044820152606401610598565b606c55565b5f54610100900460ff161580801561061357505f54600160ff909116105b8061062c5750303b15801561062c57505f5460ff166001145b61069e5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610598565b5f80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905580156106fa575f80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b73ffffffffffffffffffffffffffffffffffffffff821661075d5760405162461bcd60e51b815260206004820152601660248201527f696e76616c6964206f7261636c652061646472657373000000000000000000006044820152606401610598565b606580547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff84161790556107a683611e3e565b8015610808575f80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b60655473ffffffffffffffffffffffffffffffffffffffff1633146108745760405162461bcd60e51b815260206004820152601360248201527f6f6e6c79206f7261636c6520616c6c6f776564000000000000000000000000006044820152606401610598565b5f5b8151811015610a3e5780606a5461088d9190612823565b82828151811061089f5761089f61283c565b60200260200101515f0151146108f75760405162461bcd60e51b815260206004820152600d60248201527f696e76616c696420696e646578000000000000000000000000000000000000006044820152606401610598565b60405180608001604052808383815181106109145761091461283c565b60200260200101515f015181526020018383815181106109365761093661283c565b60200260200101516020015173ffffffffffffffffffffffffffffffffffffffff16815260200183838151811061096f5761096f61283c565b60200260200101516040015181526020018383815181106109925761099261283c565b60200260200101516060015181525060675f8484815181106109b6576109b661283c565b6020908102919091018101515182528181019290925260409081015f208351815591830151600180840180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9093169290921790915590830151600283015560609092015160039091015501610876565b5050565b610a4a611eb4565b73ffffffffffffffffffffffffffffffffffffffff8116610aad5760405162461bcd60e51b815260206004820152601660248201527f696e76616c6964206f7261636c652061646472657373000000000000000000006044820152606401610598565b606580547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b606082821015610b465760405162461bcd60e51b815260206004820152600d60248201527f696e76616c696420696e646578000000000000000000000000000000000000006044820152606401610598565b610b508383612869565b610b5b906001612823565b67ffffffffffffffff811115610b7357610b73612060565b604051908082528060200260200182016040528015610be157816020015b610bce60405180608001604052805f81526020015f73ffffffffffffffffffffffffffffffffffffffff1681526020015f81526020015f81525090565b815260200190600190039081610b915790505b509050825b828111610c75575f81815260676020908152604091829020825160808101845281548152600182015473ffffffffffffffffffffffffffffffffffffffff169281019290925260028101549282019290925260039091015460608201528251839083908110610c5757610c5761283c565b60200260200101819052508080610c6d9061287c565b915050610be6565b5092915050565b60655473ffffffffffffffffffffffffffffffffffffffff163314610ce35760405162461bcd60e51b815260206004820152601360248201527f6f6e6c79206f7261636c6520616c6c6f776564000000000000000000000000006044820152606401610598565b5f5b8151811015610a3e5780606954610cfc9190612823565b828281518110610d0e57610d0e61283c565b60200260200101515f015114610d665760405162461bcd60e51b815260206004820152600d60248201527f696e76616c696420696e646578000000000000000000000000000000000000006044820152606401610598565b6040518060a00160405280838381518110610d8357610d8361283c565b60200260200101515f01518152602001838381518110610da557610da561283c565b60200260200101516020015173ffffffffffffffffffffffffffffffffffffffff168152602001838381518110610dde57610dde61283c565b6020026020010151604001518152602001838381518110610e0157610e0161283c565b6020026020010151606001518152602001838381518110610e2457610e2461283c565b60200260200101516080015181525060665f848481518110610e4857610e4861283c565b6020908102919091018101515182528181019290925260409081015f208351815591830151600180840180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909316929092179091559083015160028301556060830151600383015560809092015160049091015501610ce5565b606082821015610f2c5760405162461bcd60e51b815260206004820152600d60248201527f696e76616c696420696e646578000000000000000000000000000000000000006044820152606401610598565b610f368383612869565b610f41906001612823565b67ffffffffffffffff811115610f5957610f59612060565b604051908082528060200260200182016040528015610fcd57816020015b610fba6040518060a001604052805f81526020015f73ffffffffffffffffffffffffffffffffffffffff1681526020015f81526020015f81526020015f81525090565b815260200190600190039081610f775790505b509050825b828111610c75575f81815260666020908152604091829020825160a08101845281548152600182015473ffffffffffffffffffffffffffffffffffffffff1692810192909252600281015492820192909252600382015460608201526004909101546080820152825183908390811061104d5761104d61283c565b602002602001018190525080806110639061287c565b915050610fd2565b60655473ffffffffffffffffffffffffffffffffffffffff1633146110d25760405162461bcd60e51b815260206004820152601360248201527f6f6e6c79206f7261636c6520616c6c6f776564000000000000000000000000006044820152606401610598565b5f606c54116111235760405162461bcd60e51b815260206004820152601960248201527f737461727420626c6f636b2073686f756c6420626520736574000000000000006044820152606401610598565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663766718086040518163ffffffff1660e01b8152600401602060405180830381865afa15801561118c573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906111b091906128b3565b60018251606b546111c19190612823565b6111cb9190612869565b106112185760405162461bcd60e51b815260206004820152601e60248201527f66757475726520646174612063616e6e6f742062652075706c6f6164656400006044820152606401610598565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a29bfb2c60018351606b546112659190612823565b61126f9190612869565b6040518263ffffffff1660e01b815260040161128d91815260200190565b5f604051808303815f87803b1580156112a4575f80fd5b505af11580156112b6573d5f803e3d5ffd5b5050606c5491505f90505b8251811015611ab8575f8382815181106112dd576112dd61283c565b6020026020010151604001515190505f8483815181106112ff576112ff61283c565b60200260200101515f0151905082606b5461131a9190612823565b81146113685760405162461bcd60e51b815260206004820152601360248201527f696e76616c69642065706f636820696e646578000000000000000000000000006044820152606401610598565b8185848151811061137b5761137b61283c565b602002602001015160600151511480156113b25750818584815181106113a3576113a361283c565b60200260200101516080015151145b80156113db5750818584815181106113cc576113cc61283c565b602002602001015160a0015151145b6114275760405162461bcd60e51b815260206004820152601360248201527f696e76616c69642064617461206c656e677468000000000000000000000000006044820152606401610598565b8483815181106114395761143961283c565b602002602001015160200151846114509190612823565b93506040518060c001604052808281526020018685815181106114755761147561283c565b60200260200101516020015181526020018685815181106114985761149861283c565b60200260200101516040015181526020018685815181106114bb576114bb61283c565b60200260200101516060015181526020018685815181106114de576114de61283c565b60200260200101516080015181526020018685815181106115015761150161283c565b60209081029190910181015160a001519091525f8381526068825260409081902083518155838301516001820155908301518051919261154992600285019290910190611f1b565b5060608201518051611565916003840191602090910190611fa3565b5060808201518051611581916004840191602090910190611fa3565b5060a0820151805161159d916005840191602090910190611fa3565b50506040517f944fa746000000000000000000000000000000000000000000000000000000008152600481018390525f91507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063944fa74690602401602060405180830381865afa15801561162b573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061164f91906128b3565b90505f805f8567ffffffffffffffff81111561166d5761166d612060565b604051908082528060200260200182016040528015611696578160200160208202803683370190505b5090505f8667ffffffffffffffff8111156116b3576116b3612060565b6040519080825280602002602001820160405280156116dc578160200160208202803683370190505b5090505f5b8781101561191f5760148b8a815181106116fd576116fd61283c565b602002602001015160a00151828151811061171a5761171a61283c565b602002602001015111156117705760405162461bcd60e51b815260206004820152601d60248201527f696e76616c69642073657175656e6365727320636f6d6d697373696f6e0000006044820152606401610598565b8a89815181106117825761178261283c565b602002602001015160800151818151811061179f5761179f61283c565b6020026020010151846117b29190612823565b93508a89815181106117c6576117c661283c565b60200260200101516060015181815181106117e3576117e361283c565b6020026020010151856117f69190612823565b94505f7f00000000000000000000000000000000000000000000000000000000000000008c8b8151811061182c5761182c61283c565b60200260200101516080015183815181106118495761184961283c565b60200260200101518861185c91906128ca565b61186691906128e1565b905060648c8b8151811061187c5761187c61283c565b602002602001015160a0015183815181106118995761189961283c565b6020026020010151826118ac91906128ca565b6118b691906128e1565b8383815181106118c8576118c861283c565b6020026020010181815250508282815181106118e6576118e661283c565b6020026020010151816118f99190612869565b84838151811061190b5761190b61283c565b6020908102919091010152506001016116e1565b508988815181106119325761193261283c565b602002602001015160200151841461198c5760405162461bcd60e51b815260206004820152601960248201527f696e76616c69642073657175656e6365727320626c6f636b73000000000000006044820152606401610598565b7f00000000000000000000000000000000000000000000000000000000000000008311156119fc5760405162461bcd60e51b815260206004820152601960248201527f696e76616c69642073657175656e6365727320726174696f73000000000000006044820152606401610598565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663cdd0c50e878c8b81518110611a4b57611a4b61283c565b60200260200101516040015185856040518563ffffffff1660e01b8152600401611a789493929190612919565b5f604051808303815f87803b158015611a8f575f80fd5b505af1158015611aa1573d5f803e3d5ffd5b5050600190990198506112c1975050505050505050565b50606c8190558151606b80545f90611ad1908490612823565b90915550505050565b611ae2611eb4565b611aeb5f611e3e565b565b606082821015611b3f5760405162461bcd60e51b815260206004820152600d60248201527f696e76616c696420696e646578000000000000000000000000000000000000006044820152606401610598565b611b498383612869565b611b54906001612823565b67ffffffffffffffff811115611b6c57611b6c612060565b604051908082528060200260200182016040528015611bd457816020015b611bc16040518060c001604052805f81526020015f8152602001606081526020016060815260200160608152602001606081525090565b815260200190600190039081611b8a5790505b509050825b828111610c75575f81815260686020908152604091829020825160c0810184528154815260018201548184015260028201805485518186028101860187528181529295939493860193830182828015611c6657602002820191905f5260205f20905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311611c3b575b5050505050815260200160038201805480602002602001604051908101604052809291908181526020018280548015611cbc57602002820191905f5260205f20905b815481526020019060010190808311611ca8575b5050505050815260200160048201805480602002602001604051908101604052809291908181526020018280548015611d1257602002820191905f5260205f20905b815481526020019060010190808311611cfe575b5050505050815260200160058201805480602002602001604051908101604052809291908181526020018280548015611d6857602002820191905f5260205f20905b815481526020019060010190808311611d54575b505050505081525050828281518110611d8357611d8361283c565b60200260200101819052508080611d999061287c565b915050611bd9565b611da9611eb4565b73ffffffffffffffffffffffffffffffffffffffff8116611e325760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610598565b611e3b81611e3e565b50565b6033805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35050565b60335473ffffffffffffffffffffffffffffffffffffffff163314611aeb5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610598565b828054828255905f5260205f20908101928215611f93579160200282015b82811115611f9357825182547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909116178255602090920191600190910190611f39565b50611f9f929150611fdc565b5090565b828054828255905f5260205f20908101928215611f93579160200282015b82811115611f93578251825591602001919060010190611fc1565b5b80821115611f9f575f8155600101611fdd565b5f60208284031215612000575f80fd5b5035919050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461202a575f80fd5b919050565b5f8060408385031215612040575f80fd5b61204983612007565b915061205760208401612007565b90509250929050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6040516080810167ffffffffffffffff811182821017156120b0576120b0612060565b60405290565b60405160a0810167ffffffffffffffff811182821017156120b0576120b0612060565b60405160c0810167ffffffffffffffff811182821017156120b0576120b0612060565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561214357612143612060565b604052919050565b5f67ffffffffffffffff82111561216457612164612060565b5060051b60200190565b5f602080838503121561217f575f80fd5b823567ffffffffffffffff811115612195575f80fd5b8301601f810185136121a5575f80fd5b80356121b86121b38261214b565b6120fc565b81815260079190911b820183019083810190878311156121d6575f80fd5b928401925b8284101561223257608084890312156121f2575f80fd5b6121fa61208d565b84358152612209868601612007565b8187015260408581013590820152606080860135908201528252608090930192908401906121db565b979650505050505050565b5f6020828403121561224d575f80fd5b61225682612007565b9392505050565b5f806040838503121561226e575f80fd5b50508035926020909101359150565b602080825282518282018190525f919060409081850190868401855b828110156122e9578151805185528681015173ffffffffffffffffffffffffffffffffffffffff168786015285810151868601526060908101519085015260809093019290850190600101612299565b5091979650505050505050565b5f6020808385031215612307575f80fd5b823567ffffffffffffffff81111561231d575f80fd5b8301601f8101851361232d575f80fd5b803561233b6121b38261214b565b81815260a09182028301840191848201919088841115612359575f80fd5b938501935b838510156123bc5780858a031215612374575f80fd5b61237c6120b6565b8535815261238b878701612007565b818801526040868101359082015260608087013590820152608080870135908201528352938401939185019161235e565b50979650505050505050565b602080825282518282018190525f919060409081850190868401855b828110156122e9578151805185528681015173ffffffffffffffffffffffffffffffffffffffff16878601528581015186860152606080820151908601526080908101519085015260a090930192908501906001016123e4565b5f82601f83011261244d575f80fd5b8135602061245d6121b38361214b565b8083825260208201915060208460051b87010193508684111561247e575f80fd5b602086015b848110156124a15761249481612007565b8352918301918301612483565b509695505050505050565b5f82601f8301126124bb575f80fd5b813560206124cb6121b38361214b565b8083825260208201915060208460051b8701019350868411156124ec575f80fd5b602086015b848110156124a157803583529183019183016124f1565b5f6020808385031215612519575f80fd5b823567ffffffffffffffff80821115612530575f80fd5b818501915085601f830112612543575f80fd5b81356125516121b38261214b565b81815260059190911b8301840190848101908883111561256f575f80fd5b8585015b8381101561267a57803585811115612589575f80fd5b860160c0818c037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe00112156125bc575f80fd5b6125c46120d9565b8882013581526040808301358a830152606080840135898111156125e6575f80fd5b6125f48f8d8388010161243e565b838501525060809150818401358981111561260d575f80fd5b61261b8f8d838801016124ac565b82850152505060a08084013589811115612633575f80fd5b6126418f8d838801016124ac565b838501525060c0840135915088821115612659575f80fd5b6126678e8c848701016124ac565b9083015250845250918601918601612573565b5098975050505050505050565b5f815180845260208085019450602084015f5b838110156126cc57815173ffffffffffffffffffffffffffffffffffffffff168752958201959082019060010161269a565b509495945050505050565b5f815180845260208085019450602084015f5b838110156126cc578151875295820195908201906001016126ea565b5f60208083018184528085518083526040925060408601915060408160051b8701018488015f5b838110156127e8577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0898403018552815160c081518552888201518986015287820151818987015261278182870182612687565b9150506060808301518683038288015261279b83826126d7565b92505050608080830151868303828801526127b683826126d7565b9250505060a080830151925085820381870152506127d481836126d7565b96890196945050509086019060010161272d565b509098975050505050505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b80820180821115612836576128366127f6565b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b81810381811115612836576128366127f6565b5f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036128ac576128ac6127f6565b5060010190565b5f602082840312156128c3575f80fd5b5051919050565b8082028115828204841417612836576128366127f6565b5f82612914577f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b500490565b848152608060208201525f6129316080830186612687565b828103604084015261294381866126d7565b9050828103606084015261223281856126d756fea264697066735822122037d2538065db73c0bb95fc97719a2d6b9a77504999dd3311b492acb93ba9339a64736f6c63430008180033",
}

// RecordABI is the input ABI used to generate the binding from.
// Deprecated: Use RecordMetaData.ABI instead.
var RecordABI = RecordMetaData.ABI

// RecordBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use RecordMetaData.Bin instead.
var RecordBin = RecordMetaData.Bin

// DeployRecord deploys a new Ethereum contract, binding an instance of Record to it.
func DeployRecord(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Record, error) {
	parsed, err := RecordMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(RecordBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Record{RecordCaller: RecordCaller{contract: contract}, RecordTransactor: RecordTransactor{contract: contract}, RecordFilterer: RecordFilterer{contract: contract}}, nil
}

// Record is an auto generated Go binding around an Ethereum contract.
type Record struct {
	RecordCaller     // Read-only binding to the contract
	RecordTransactor // Write-only binding to the contract
	RecordFilterer   // Log filterer for contract events
}

// RecordCaller is an auto generated read-only Go binding around an Ethereum contract.
type RecordCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RecordTransactor is an auto generated write-only Go binding around an Ethereum contract.
type RecordTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RecordFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type RecordFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RecordSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type RecordSession struct {
	Contract     *Record           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// RecordCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type RecordCallerSession struct {
	Contract *RecordCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// RecordTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type RecordTransactorSession struct {
	Contract     *RecordTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// RecordRaw is an auto generated low-level Go binding around an Ethereum contract.
type RecordRaw struct {
	Contract *Record // Generic contract binding to access the raw methods on
}

// RecordCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type RecordCallerRaw struct {
	Contract *RecordCaller // Generic read-only contract binding to access the raw methods on
}

// RecordTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type RecordTransactorRaw struct {
	Contract *RecordTransactor // Generic write-only contract binding to access the raw methods on
}

// NewRecord creates a new instance of Record, bound to a specific deployed contract.
func NewRecord(address common.Address, backend bind.ContractBackend) (*Record, error) {
	contract, err := bindRecord(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Record{RecordCaller: RecordCaller{contract: contract}, RecordTransactor: RecordTransactor{contract: contract}, RecordFilterer: RecordFilterer{contract: contract}}, nil
}

// NewRecordCaller creates a new read-only instance of Record, bound to a specific deployed contract.
func NewRecordCaller(address common.Address, caller bind.ContractCaller) (*RecordCaller, error) {
	contract, err := bindRecord(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &RecordCaller{contract: contract}, nil
}

// NewRecordTransactor creates a new write-only instance of Record, bound to a specific deployed contract.
func NewRecordTransactor(address common.Address, transactor bind.ContractTransactor) (*RecordTransactor, error) {
	contract, err := bindRecord(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &RecordTransactor{contract: contract}, nil
}

// NewRecordFilterer creates a new log filterer instance of Record, bound to a specific deployed contract.
func NewRecordFilterer(address common.Address, filterer bind.ContractFilterer) (*RecordFilterer, error) {
	contract, err := bindRecord(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &RecordFilterer{contract: contract}, nil
}

// bindRecord binds a generic wrapper to an already deployed contract.
func bindRecord(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := RecordMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Record *RecordRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Record.Contract.RecordCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Record *RecordRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Record.Contract.RecordTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Record *RecordRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Record.Contract.RecordTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Record *RecordCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Record.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Record *RecordTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Record.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Record *RecordTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Record.Contract.contract.Transact(opts, method, params...)
}

// DISTRIBUTECONTRACT is a free data retrieval call binding the contract method 0x3d9353fe.
//
// Solidity: function DISTRIBUTE_CONTRACT() view returns(address)
func (_Record *RecordCaller) DISTRIBUTECONTRACT(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Record.contract.Call(opts, &out, "DISTRIBUTE_CONTRACT")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// DISTRIBUTECONTRACT is a free data retrieval call binding the contract method 0x3d9353fe.
//
// Solidity: function DISTRIBUTE_CONTRACT() view returns(address)
func (_Record *RecordSession) DISTRIBUTECONTRACT() (common.Address, error) {
	return _Record.Contract.DISTRIBUTECONTRACT(&_Record.CallOpts)
}

// DISTRIBUTECONTRACT is a free data retrieval call binding the contract method 0x3d9353fe.
//
// Solidity: function DISTRIBUTE_CONTRACT() view returns(address)
func (_Record *RecordCallerSession) DISTRIBUTECONTRACT() (common.Address, error) {
	return _Record.Contract.DISTRIBUTECONTRACT(&_Record.CallOpts)
}

// GOVCONTRACT is a free data retrieval call binding the contract method 0x7828a905.
//
// Solidity: function GOV_CONTRACT() view returns(address)
func (_Record *RecordCaller) GOVCONTRACT(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Record.contract.Call(opts, &out, "GOV_CONTRACT")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GOVCONTRACT is a free data retrieval call binding the contract method 0x7828a905.
//
// Solidity: function GOV_CONTRACT() view returns(address)
func (_Record *RecordSession) GOVCONTRACT() (common.Address, error) {
	return _Record.Contract.GOVCONTRACT(&_Record.CallOpts)
}

// GOVCONTRACT is a free data retrieval call binding the contract method 0x7828a905.
//
// Solidity: function GOV_CONTRACT() view returns(address)
func (_Record *RecordCallerSession) GOVCONTRACT() (common.Address, error) {
	return _Record.Contract.GOVCONTRACT(&_Record.CallOpts)
}

// L2STAKINGCONTRACT is a free data retrieval call binding the contract method 0x807de443.
//
// Solidity: function L2_STAKING_CONTRACT() view returns(address)
func (_Record *RecordCaller) L2STAKINGCONTRACT(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Record.contract.Call(opts, &out, "L2_STAKING_CONTRACT")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// L2STAKINGCONTRACT is a free data retrieval call binding the contract method 0x807de443.
//
// Solidity: function L2_STAKING_CONTRACT() view returns(address)
func (_Record *RecordSession) L2STAKINGCONTRACT() (common.Address, error) {
	return _Record.Contract.L2STAKINGCONTRACT(&_Record.CallOpts)
}

// L2STAKINGCONTRACT is a free data retrieval call binding the contract method 0x807de443.
//
// Solidity: function L2_STAKING_CONTRACT() view returns(address)
func (_Record *RecordCallerSession) L2STAKINGCONTRACT() (common.Address, error) {
	return _Record.Contract.L2STAKINGCONTRACT(&_Record.CallOpts)
}

// MORPHTOKENCONTRACT is a free data retrieval call binding the contract method 0xd5577141.
//
// Solidity: function MORPH_TOKEN_CONTRACT() view returns(address)
func (_Record *RecordCaller) MORPHTOKENCONTRACT(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Record.contract.Call(opts, &out, "MORPH_TOKEN_CONTRACT")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// MORPHTOKENCONTRACT is a free data retrieval call binding the contract method 0xd5577141.
//
// Solidity: function MORPH_TOKEN_CONTRACT() view returns(address)
func (_Record *RecordSession) MORPHTOKENCONTRACT() (common.Address, error) {
	return _Record.Contract.MORPHTOKENCONTRACT(&_Record.CallOpts)
}

// MORPHTOKENCONTRACT is a free data retrieval call binding the contract method 0xd5577141.
//
// Solidity: function MORPH_TOKEN_CONTRACT() view returns(address)
func (_Record *RecordCallerSession) MORPHTOKENCONTRACT() (common.Address, error) {
	return _Record.Contract.MORPHTOKENCONTRACT(&_Record.CallOpts)
}

// ORACLE is a free data retrieval call binding the contract method 0x38013f02.
//
// Solidity: function ORACLE() view returns(address)
func (_Record *RecordCaller) ORACLE(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Record.contract.Call(opts, &out, "ORACLE")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ORACLE is a free data retrieval call binding the contract method 0x38013f02.
//
// Solidity: function ORACLE() view returns(address)
func (_Record *RecordSession) ORACLE() (common.Address, error) {
	return _Record.Contract.ORACLE(&_Record.CallOpts)
}

// ORACLE is a free data retrieval call binding the contract method 0x38013f02.
//
// Solidity: function ORACLE() view returns(address)
func (_Record *RecordCallerSession) ORACLE() (common.Address, error) {
	return _Record.Contract.ORACLE(&_Record.CallOpts)
}

// SEQUENCERCONTRACT is a free data retrieval call binding the contract method 0x8e21d5fb.
//
// Solidity: function SEQUENCER_CONTRACT() view returns(address)
func (_Record *RecordCaller) SEQUENCERCONTRACT(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Record.contract.Call(opts, &out, "SEQUENCER_CONTRACT")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// SEQUENCERCONTRACT is a free data retrieval call binding the contract method 0x8e21d5fb.
//
// Solidity: function SEQUENCER_CONTRACT() view returns(address)
func (_Record *RecordSession) SEQUENCERCONTRACT() (common.Address, error) {
	return _Record.Contract.SEQUENCERCONTRACT(&_Record.CallOpts)
}

// SEQUENCERCONTRACT is a free data retrieval call binding the contract method 0x8e21d5fb.
//
// Solidity: function SEQUENCER_CONTRACT() view returns(address)
func (_Record *RecordCallerSession) SEQUENCERCONTRACT() (common.Address, error) {
	return _Record.Contract.SEQUENCERCONTRACT(&_Record.CallOpts)
}

// BatchSubmissions is a free data retrieval call binding the contract method 0x78f908e1.
//
// Solidity: function batchSubmissions(uint256 ) view returns(uint256 index, address submitter, uint256 startBlock, uint256 endBlock, uint256 rollupTime)
func (_Record *RecordCaller) BatchSubmissions(opts *bind.CallOpts, arg0 *big.Int) (struct {
	Index      *big.Int
	Submitter  common.Address
	StartBlock *big.Int
	EndBlock   *big.Int
	RollupTime *big.Int
}, error) {
	var out []interface{}
	err := _Record.contract.Call(opts, &out, "batchSubmissions", arg0)

	outstruct := new(struct {
		Index      *big.Int
		Submitter  common.Address
		StartBlock *big.Int
		EndBlock   *big.Int
		RollupTime *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Index = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Submitter = *abi.ConvertType(out[1], new(common.Address)).(*common.Address)
	outstruct.StartBlock = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.EndBlock = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.RollupTime = *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// BatchSubmissions is a free data retrieval call binding the contract method 0x78f908e1.
//
// Solidity: function batchSubmissions(uint256 ) view returns(uint256 index, address submitter, uint256 startBlock, uint256 endBlock, uint256 rollupTime)
func (_Record *RecordSession) BatchSubmissions(arg0 *big.Int) (struct {
	Index      *big.Int
	Submitter  common.Address
	StartBlock *big.Int
	EndBlock   *big.Int
	RollupTime *big.Int
}, error) {
	return _Record.Contract.BatchSubmissions(&_Record.CallOpts, arg0)
}

// BatchSubmissions is a free data retrieval call binding the contract method 0x78f908e1.
//
// Solidity: function batchSubmissions(uint256 ) view returns(uint256 index, address submitter, uint256 startBlock, uint256 endBlock, uint256 rollupTime)
func (_Record *RecordCallerSession) BatchSubmissions(arg0 *big.Int) (struct {
	Index      *big.Int
	Submitter  common.Address
	StartBlock *big.Int
	EndBlock   *big.Int
	RollupTime *big.Int
}, error) {
	return _Record.Contract.BatchSubmissions(&_Record.CallOpts, arg0)
}

// GetBatchSubmissions is a free data retrieval call binding the contract method 0x64b4abe3.
//
// Solidity: function getBatchSubmissions(uint256 start, uint256 end) view returns((uint256,address,uint256,uint256,uint256)[] res)
func (_Record *RecordCaller) GetBatchSubmissions(opts *bind.CallOpts, start *big.Int, end *big.Int) ([]IRecordBatchSubmission, error) {
	var out []interface{}
	err := _Record.contract.Call(opts, &out, "getBatchSubmissions", start, end)

	if err != nil {
		return *new([]IRecordBatchSubmission), err
	}

	out0 := *abi.ConvertType(out[0], new([]IRecordBatchSubmission)).(*[]IRecordBatchSubmission)

	return out0, err

}

// GetBatchSubmissions is a free data retrieval call binding the contract method 0x64b4abe3.
//
// Solidity: function getBatchSubmissions(uint256 start, uint256 end) view returns((uint256,address,uint256,uint256,uint256)[] res)
func (_Record *RecordSession) GetBatchSubmissions(start *big.Int, end *big.Int) ([]IRecordBatchSubmission, error) {
	return _Record.Contract.GetBatchSubmissions(&_Record.CallOpts, start, end)
}

// GetBatchSubmissions is a free data retrieval call binding the contract method 0x64b4abe3.
//
// Solidity: function getBatchSubmissions(uint256 start, uint256 end) view returns((uint256,address,uint256,uint256,uint256)[] res)
func (_Record *RecordCallerSession) GetBatchSubmissions(start *big.Int, end *big.Int) ([]IRecordBatchSubmission, error) {
	return _Record.Contract.GetBatchSubmissions(&_Record.CallOpts, start, end)
}

// GetRewardEpochs is a free data retrieval call binding the contract method 0xcb6293e8.
//
// Solidity: function getRewardEpochs(uint256 start, uint256 end) view returns((uint256,uint256,address[],uint256[],uint256[],uint256[])[] res)
func (_Record *RecordCaller) GetRewardEpochs(opts *bind.CallOpts, start *big.Int, end *big.Int) ([]IRecordRewardEpochInfo, error) {
	var out []interface{}
	err := _Record.contract.Call(opts, &out, "getRewardEpochs", start, end)

	if err != nil {
		return *new([]IRecordRewardEpochInfo), err
	}

	out0 := *abi.ConvertType(out[0], new([]IRecordRewardEpochInfo)).(*[]IRecordRewardEpochInfo)

	return out0, err

}

// GetRewardEpochs is a free data retrieval call binding the contract method 0xcb6293e8.
//
// Solidity: function getRewardEpochs(uint256 start, uint256 end) view returns((uint256,uint256,address[],uint256[],uint256[],uint256[])[] res)
func (_Record *RecordSession) GetRewardEpochs(start *big.Int, end *big.Int) ([]IRecordRewardEpochInfo, error) {
	return _Record.Contract.GetRewardEpochs(&_Record.CallOpts, start, end)
}

// GetRewardEpochs is a free data retrieval call binding the contract method 0xcb6293e8.
//
// Solidity: function getRewardEpochs(uint256 start, uint256 end) view returns((uint256,uint256,address[],uint256[],uint256[],uint256[])[] res)
func (_Record *RecordCallerSession) GetRewardEpochs(start *big.Int, end *big.Int) ([]IRecordRewardEpochInfo, error) {
	return _Record.Contract.GetRewardEpochs(&_Record.CallOpts, start, end)
}

// GetRollupEpochs is a free data retrieval call binding the contract method 0x4e3ca406.
//
// Solidity: function getRollupEpochs(uint256 start, uint256 end) view returns((uint256,address,uint256,uint256)[] res)
func (_Record *RecordCaller) GetRollupEpochs(opts *bind.CallOpts, start *big.Int, end *big.Int) ([]IRecordRollupEpochInfo, error) {
	var out []interface{}
	err := _Record.contract.Call(opts, &out, "getRollupEpochs", start, end)

	if err != nil {
		return *new([]IRecordRollupEpochInfo), err
	}

	out0 := *abi.ConvertType(out[0], new([]IRecordRollupEpochInfo)).(*[]IRecordRollupEpochInfo)

	return out0, err

}

// GetRollupEpochs is a free data retrieval call binding the contract method 0x4e3ca406.
//
// Solidity: function getRollupEpochs(uint256 start, uint256 end) view returns((uint256,address,uint256,uint256)[] res)
func (_Record *RecordSession) GetRollupEpochs(start *big.Int, end *big.Int) ([]IRecordRollupEpochInfo, error) {
	return _Record.Contract.GetRollupEpochs(&_Record.CallOpts, start, end)
}

// GetRollupEpochs is a free data retrieval call binding the contract method 0x4e3ca406.
//
// Solidity: function getRollupEpochs(uint256 start, uint256 end) view returns((uint256,address,uint256,uint256)[] res)
func (_Record *RecordCallerSession) GetRollupEpochs(start *big.Int, end *big.Int) ([]IRecordRollupEpochInfo, error) {
	return _Record.Contract.GetRollupEpochs(&_Record.CallOpts, start, end)
}

// LatestRewardEpochBlock is a free data retrieval call binding the contract method 0x0776c0f7.
//
// Solidity: function latestRewardEpochBlock() view returns(uint256)
func (_Record *RecordCaller) LatestRewardEpochBlock(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Record.contract.Call(opts, &out, "latestRewardEpochBlock")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// LatestRewardEpochBlock is a free data retrieval call binding the contract method 0x0776c0f7.
//
// Solidity: function latestRewardEpochBlock() view returns(uint256)
func (_Record *RecordSession) LatestRewardEpochBlock() (*big.Int, error) {
	return _Record.Contract.LatestRewardEpochBlock(&_Record.CallOpts)
}

// LatestRewardEpochBlock is a free data retrieval call binding the contract method 0x0776c0f7.
//
// Solidity: function latestRewardEpochBlock() view returns(uint256)
func (_Record *RecordCallerSession) LatestRewardEpochBlock() (*big.Int, error) {
	return _Record.Contract.LatestRewardEpochBlock(&_Record.CallOpts)
}

// NextBatchSubmissionIndex is a free data retrieval call binding the contract method 0x1511e1b1.
//
// Solidity: function nextBatchSubmissionIndex() view returns(uint256)
func (_Record *RecordCaller) NextBatchSubmissionIndex(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Record.contract.Call(opts, &out, "nextBatchSubmissionIndex")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// NextBatchSubmissionIndex is a free data retrieval call binding the contract method 0x1511e1b1.
//
// Solidity: function nextBatchSubmissionIndex() view returns(uint256)
func (_Record *RecordSession) NextBatchSubmissionIndex() (*big.Int, error) {
	return _Record.Contract.NextBatchSubmissionIndex(&_Record.CallOpts)
}

// NextBatchSubmissionIndex is a free data retrieval call binding the contract method 0x1511e1b1.
//
// Solidity: function nextBatchSubmissionIndex() view returns(uint256)
func (_Record *RecordCallerSession) NextBatchSubmissionIndex() (*big.Int, error) {
	return _Record.Contract.NextBatchSubmissionIndex(&_Record.CallOpts)
}

// NextRewardEpochIndex is a free data retrieval call binding the contract method 0x2fbf6487.
//
// Solidity: function nextRewardEpochIndex() view returns(uint256)
func (_Record *RecordCaller) NextRewardEpochIndex(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Record.contract.Call(opts, &out, "nextRewardEpochIndex")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// NextRewardEpochIndex is a free data retrieval call binding the contract method 0x2fbf6487.
//
// Solidity: function nextRewardEpochIndex() view returns(uint256)
func (_Record *RecordSession) NextRewardEpochIndex() (*big.Int, error) {
	return _Record.Contract.NextRewardEpochIndex(&_Record.CallOpts)
}

// NextRewardEpochIndex is a free data retrieval call binding the contract method 0x2fbf6487.
//
// Solidity: function nextRewardEpochIndex() view returns(uint256)
func (_Record *RecordCallerSession) NextRewardEpochIndex() (*big.Int, error) {
	return _Record.Contract.NextRewardEpochIndex(&_Record.CallOpts)
}

// NextRollupEpochIndex is a free data retrieval call binding the contract method 0x484f8d0f.
//
// Solidity: function nextRollupEpochIndex() view returns(uint256)
func (_Record *RecordCaller) NextRollupEpochIndex(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Record.contract.Call(opts, &out, "nextRollupEpochIndex")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// NextRollupEpochIndex is a free data retrieval call binding the contract method 0x484f8d0f.
//
// Solidity: function nextRollupEpochIndex() view returns(uint256)
func (_Record *RecordSession) NextRollupEpochIndex() (*big.Int, error) {
	return _Record.Contract.NextRollupEpochIndex(&_Record.CallOpts)
}

// NextRollupEpochIndex is a free data retrieval call binding the contract method 0x484f8d0f.
//
// Solidity: function nextRollupEpochIndex() view returns(uint256)
func (_Record *RecordCallerSession) NextRollupEpochIndex() (*big.Int, error) {
	return _Record.Contract.NextRollupEpochIndex(&_Record.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Record *RecordCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Record.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Record *RecordSession) Owner() (common.Address, error) {
	return _Record.Contract.Owner(&_Record.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Record *RecordCallerSession) Owner() (common.Address, error) {
	return _Record.Contract.Owner(&_Record.CallOpts)
}

// RewardEpochs is a free data retrieval call binding the contract method 0xa795f409.
//
// Solidity: function rewardEpochs(uint256 ) view returns(uint256 index, uint256 blockCount)
func (_Record *RecordCaller) RewardEpochs(opts *bind.CallOpts, arg0 *big.Int) (struct {
	Index      *big.Int
	BlockCount *big.Int
}, error) {
	var out []interface{}
	err := _Record.contract.Call(opts, &out, "rewardEpochs", arg0)

	outstruct := new(struct {
		Index      *big.Int
		BlockCount *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Index = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.BlockCount = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// RewardEpochs is a free data retrieval call binding the contract method 0xa795f409.
//
// Solidity: function rewardEpochs(uint256 ) view returns(uint256 index, uint256 blockCount)
func (_Record *RecordSession) RewardEpochs(arg0 *big.Int) (struct {
	Index      *big.Int
	BlockCount *big.Int
}, error) {
	return _Record.Contract.RewardEpochs(&_Record.CallOpts, arg0)
}

// RewardEpochs is a free data retrieval call binding the contract method 0xa795f409.
//
// Solidity: function rewardEpochs(uint256 ) view returns(uint256 index, uint256 blockCount)
func (_Record *RecordCallerSession) RewardEpochs(arg0 *big.Int) (struct {
	Index      *big.Int
	BlockCount *big.Int
}, error) {
	return _Record.Contract.RewardEpochs(&_Record.CallOpts, arg0)
}

// RollupEpochs is a free data retrieval call binding the contract method 0xa24231e8.
//
// Solidity: function rollupEpochs(uint256 ) view returns(uint256 index, address submitter, uint256 startTime, uint256 endTime)
func (_Record *RecordCaller) RollupEpochs(opts *bind.CallOpts, arg0 *big.Int) (struct {
	Index     *big.Int
	Submitter common.Address
	StartTime *big.Int
	EndTime   *big.Int
}, error) {
	var out []interface{}
	err := _Record.contract.Call(opts, &out, "rollupEpochs", arg0)

	outstruct := new(struct {
		Index     *big.Int
		Submitter common.Address
		StartTime *big.Int
		EndTime   *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Index = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Submitter = *abi.ConvertType(out[1], new(common.Address)).(*common.Address)
	outstruct.StartTime = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.EndTime = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// RollupEpochs is a free data retrieval call binding the contract method 0xa24231e8.
//
// Solidity: function rollupEpochs(uint256 ) view returns(uint256 index, address submitter, uint256 startTime, uint256 endTime)
func (_Record *RecordSession) RollupEpochs(arg0 *big.Int) (struct {
	Index     *big.Int
	Submitter common.Address
	StartTime *big.Int
	EndTime   *big.Int
}, error) {
	return _Record.Contract.RollupEpochs(&_Record.CallOpts, arg0)
}

// RollupEpochs is a free data retrieval call binding the contract method 0xa24231e8.
//
// Solidity: function rollupEpochs(uint256 ) view returns(uint256 index, address submitter, uint256 startTime, uint256 endTime)
func (_Record *RecordCallerSession) RollupEpochs(arg0 *big.Int) (struct {
	Index     *big.Int
	Submitter common.Address
	StartTime *big.Int
	EndTime   *big.Int
}, error) {
	return _Record.Contract.RollupEpochs(&_Record.CallOpts, arg0)
}

// Initialize is a paid mutator transaction binding the contract method 0x485cc955.
//
// Solidity: function initialize(address _admin, address _oracle) returns()
func (_Record *RecordTransactor) Initialize(opts *bind.TransactOpts, _admin common.Address, _oracle common.Address) (*types.Transaction, error) {
	return _Record.contract.Transact(opts, "initialize", _admin, _oracle)
}

// Initialize is a paid mutator transaction binding the contract method 0x485cc955.
//
// Solidity: function initialize(address _admin, address _oracle) returns()
func (_Record *RecordSession) Initialize(_admin common.Address, _oracle common.Address) (*types.Transaction, error) {
	return _Record.Contract.Initialize(&_Record.TransactOpts, _admin, _oracle)
}

// Initialize is a paid mutator transaction binding the contract method 0x485cc955.
//
// Solidity: function initialize(address _admin, address _oracle) returns()
func (_Record *RecordTransactorSession) Initialize(_admin common.Address, _oracle common.Address) (*types.Transaction, error) {
	return _Record.Contract.Initialize(&_Record.TransactOpts, _admin, _oracle)
}

// RecordFinalizedBatchSubmissions is a paid mutator transaction binding the contract method 0x4ecff524.
//
// Solidity: function recordFinalizedBatchSubmissions((uint256,address,uint256,uint256,uint256)[] _batchSubmissions) returns()
func (_Record *RecordTransactor) RecordFinalizedBatchSubmissions(opts *bind.TransactOpts, _batchSubmissions []IRecordBatchSubmission) (*types.Transaction, error) {
	return _Record.contract.Transact(opts, "recordFinalizedBatchSubmissions", _batchSubmissions)
}

// RecordFinalizedBatchSubmissions is a paid mutator transaction binding the contract method 0x4ecff524.
//
// Solidity: function recordFinalizedBatchSubmissions((uint256,address,uint256,uint256,uint256)[] _batchSubmissions) returns()
func (_Record *RecordSession) RecordFinalizedBatchSubmissions(_batchSubmissions []IRecordBatchSubmission) (*types.Transaction, error) {
	return _Record.Contract.RecordFinalizedBatchSubmissions(&_Record.TransactOpts, _batchSubmissions)
}

// RecordFinalizedBatchSubmissions is a paid mutator transaction binding the contract method 0x4ecff524.
//
// Solidity: function recordFinalizedBatchSubmissions((uint256,address,uint256,uint256,uint256)[] _batchSubmissions) returns()
func (_Record *RecordTransactorSession) RecordFinalizedBatchSubmissions(_batchSubmissions []IRecordBatchSubmission) (*types.Transaction, error) {
	return _Record.Contract.RecordFinalizedBatchSubmissions(&_Record.TransactOpts, _batchSubmissions)
}

// RecordRewardEpochs is a paid mutator transaction binding the contract method 0x6ea0396e.
//
// Solidity: function recordRewardEpochs((uint256,uint256,address[],uint256[],uint256[],uint256[])[] _rewardEpochs) returns()
func (_Record *RecordTransactor) RecordRewardEpochs(opts *bind.TransactOpts, _rewardEpochs []IRecordRewardEpochInfo) (*types.Transaction, error) {
	return _Record.contract.Transact(opts, "recordRewardEpochs", _rewardEpochs)
}

// RecordRewardEpochs is a paid mutator transaction binding the contract method 0x6ea0396e.
//
// Solidity: function recordRewardEpochs((uint256,uint256,address[],uint256[],uint256[],uint256[])[] _rewardEpochs) returns()
func (_Record *RecordSession) RecordRewardEpochs(_rewardEpochs []IRecordRewardEpochInfo) (*types.Transaction, error) {
	return _Record.Contract.RecordRewardEpochs(&_Record.TransactOpts, _rewardEpochs)
}

// RecordRewardEpochs is a paid mutator transaction binding the contract method 0x6ea0396e.
//
// Solidity: function recordRewardEpochs((uint256,uint256,address[],uint256[],uint256[],uint256[])[] _rewardEpochs) returns()
func (_Record *RecordTransactorSession) RecordRewardEpochs(_rewardEpochs []IRecordRewardEpochInfo) (*types.Transaction, error) {
	return _Record.Contract.RecordRewardEpochs(&_Record.TransactOpts, _rewardEpochs)
}

// RecordRollupEpochs is a paid mutator transaction binding the contract method 0x48975047.
//
// Solidity: function recordRollupEpochs((uint256,address,uint256,uint256)[] _rollupEpochs) returns()
func (_Record *RecordTransactor) RecordRollupEpochs(opts *bind.TransactOpts, _rollupEpochs []IRecordRollupEpochInfo) (*types.Transaction, error) {
	return _Record.contract.Transact(opts, "recordRollupEpochs", _rollupEpochs)
}

// RecordRollupEpochs is a paid mutator transaction binding the contract method 0x48975047.
//
// Solidity: function recordRollupEpochs((uint256,address,uint256,uint256)[] _rollupEpochs) returns()
func (_Record *RecordSession) RecordRollupEpochs(_rollupEpochs []IRecordRollupEpochInfo) (*types.Transaction, error) {
	return _Record.Contract.RecordRollupEpochs(&_Record.TransactOpts, _rollupEpochs)
}

// RecordRollupEpochs is a paid mutator transaction binding the contract method 0x48975047.
//
// Solidity: function recordRollupEpochs((uint256,address,uint256,uint256)[] _rollupEpochs) returns()
func (_Record *RecordTransactorSession) RecordRollupEpochs(_rollupEpochs []IRecordRollupEpochInfo) (*types.Transaction, error) {
	return _Record.Contract.RecordRollupEpochs(&_Record.TransactOpts, _rollupEpochs)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Record *RecordTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Record.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Record *RecordSession) RenounceOwnership() (*types.Transaction, error) {
	return _Record.Contract.RenounceOwnership(&_Record.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Record *RecordTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Record.Contract.RenounceOwnership(&_Record.TransactOpts)
}

// SetLatestRewardEpochBlock is a paid mutator transaction binding the contract method 0x10c9873f.
//
// Solidity: function setLatestRewardEpochBlock(uint256 _latestBlock) returns()
func (_Record *RecordTransactor) SetLatestRewardEpochBlock(opts *bind.TransactOpts, _latestBlock *big.Int) (*types.Transaction, error) {
	return _Record.contract.Transact(opts, "setLatestRewardEpochBlock", _latestBlock)
}

// SetLatestRewardEpochBlock is a paid mutator transaction binding the contract method 0x10c9873f.
//
// Solidity: function setLatestRewardEpochBlock(uint256 _latestBlock) returns()
func (_Record *RecordSession) SetLatestRewardEpochBlock(_latestBlock *big.Int) (*types.Transaction, error) {
	return _Record.Contract.SetLatestRewardEpochBlock(&_Record.TransactOpts, _latestBlock)
}

// SetLatestRewardEpochBlock is a paid mutator transaction binding the contract method 0x10c9873f.
//
// Solidity: function setLatestRewardEpochBlock(uint256 _latestBlock) returns()
func (_Record *RecordTransactorSession) SetLatestRewardEpochBlock(_latestBlock *big.Int) (*types.Transaction, error) {
	return _Record.Contract.SetLatestRewardEpochBlock(&_Record.TransactOpts, _latestBlock)
}

// SetOracleAddress is a paid mutator transaction binding the contract method 0x4c69c00f.
//
// Solidity: function setOracleAddress(address _oracle) returns()
func (_Record *RecordTransactor) SetOracleAddress(opts *bind.TransactOpts, _oracle common.Address) (*types.Transaction, error) {
	return _Record.contract.Transact(opts, "setOracleAddress", _oracle)
}

// SetOracleAddress is a paid mutator transaction binding the contract method 0x4c69c00f.
//
// Solidity: function setOracleAddress(address _oracle) returns()
func (_Record *RecordSession) SetOracleAddress(_oracle common.Address) (*types.Transaction, error) {
	return _Record.Contract.SetOracleAddress(&_Record.TransactOpts, _oracle)
}

// SetOracleAddress is a paid mutator transaction binding the contract method 0x4c69c00f.
//
// Solidity: function setOracleAddress(address _oracle) returns()
func (_Record *RecordTransactorSession) SetOracleAddress(_oracle common.Address) (*types.Transaction, error) {
	return _Record.Contract.SetOracleAddress(&_Record.TransactOpts, _oracle)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Record *RecordTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Record.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Record *RecordSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Record.Contract.TransferOwnership(&_Record.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Record *RecordTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Record.Contract.TransferOwnership(&_Record.TransactOpts, newOwner)
}

// RecordInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the Record contract.
type RecordInitializedIterator struct {
	Event *RecordInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RecordInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RecordInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RecordInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RecordInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RecordInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RecordInitialized represents a Initialized event raised by the Record contract.
type RecordInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Record *RecordFilterer) FilterInitialized(opts *bind.FilterOpts) (*RecordInitializedIterator, error) {

	logs, sub, err := _Record.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &RecordInitializedIterator{contract: _Record.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Record *RecordFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *RecordInitialized) (event.Subscription, error) {

	logs, sub, err := _Record.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RecordInitialized)
				if err := _Record.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Record *RecordFilterer) ParseInitialized(log types.Log) (*RecordInitialized, error) {
	event := new(RecordInitialized)
	if err := _Record.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RecordOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Record contract.
type RecordOwnershipTransferredIterator struct {
	Event *RecordOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RecordOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RecordOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RecordOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RecordOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RecordOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RecordOwnershipTransferred represents a OwnershipTransferred event raised by the Record contract.
type RecordOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Record *RecordFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*RecordOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Record.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &RecordOwnershipTransferredIterator{contract: _Record.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Record *RecordFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *RecordOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Record.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RecordOwnershipTransferred)
				if err := _Record.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Record *RecordFilterer) ParseOwnershipTransferred(log types.Log) (*RecordOwnershipTransferred, error) {
	event := new(RecordOwnershipTransferred)
	if err := _Record.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
