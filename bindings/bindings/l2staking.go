// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package bindings

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/morph-l2/go-ethereum"
	"github.com/morph-l2/go-ethereum/accounts/abi"
	"github.com/morph-l2/go-ethereum/accounts/abi/bind"
	"github.com/morph-l2/go-ethereum/common"
	"github.com/morph-l2/go-ethereum/core/types"
	"github.com/morph-l2/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// IL2StakingUndelegation is an auto generated low-level Go binding around an user-defined struct.
type IL2StakingUndelegation struct {
	Delegatee   common.Address
	Amount      *big.Int
	UnlockEpoch *big.Int
}

// TypesStakerInfo is an auto generated low-level Go binding around an user-defined struct.
type TypesStakerInfo struct {
	Addr   common.Address
	TmKey  [32]byte
	BlsKey []byte
}

// L2StakingMetaData contains all meta data concerning the L2Staking contract.
var L2StakingMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"_otherStaking\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epochEffective\",\"type\":\"uint256\"}],\"name\":\"CommissionUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"effectiveEpoch\",\"type\":\"uint256\"}],\"name\":\"Delegated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTime\",\"type\":\"uint256\"}],\"name\":\"RewardStartTimeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldSize\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSize\",\"type\":\"uint256\"}],\"name\":\"SequencerSetMaxSizeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"tmKey\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"blsKey\",\"type\":\"bytes\"}],\"name\":\"StakerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"stakerAddresses\",\"type\":\"address[]\"}],\"name\":\"StakerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"effectiveEpoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unlockEpoch\",\"type\":\"uint256\"}],\"name\":\"Undelegated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unlockEpoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UndelegationClaimed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DISTRIBUTE_CONTRACT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MESSENGER\",\"outputs\":[{\"internalType\":\"contractICrossDomainMessenger\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MORPH_TOKEN_CONTRACT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OTHER_STAKING\",\"outputs\":[{\"internalType\":\"contractStaking\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SEQUENCER_CONTRACT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"tmKey\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"blsKey\",\"type\":\"bytes\"}],\"internalType\":\"structTypes.StakerInfo\",\"name\":\"add\",\"type\":\"tuple\"}],\"name\":\"addStaker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"candidateNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"targetEpochIndex\",\"type\":\"uint256\"}],\"name\":\"claimCommission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"targetEpochIndex\",\"type\":\"uint256\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimUndelegation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"commissions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"delegateStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"}],\"name\":\"delegations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getDelegators\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakerAddressesLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakers\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"tmKey\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"blsKey\",\"type\":\"bytes\"}],\"internalType\":\"structTypes.StakerInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_stakerAddresses\",\"type\":\"address[]\"}],\"name\":\"getStakesInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"tmKey\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"blsKey\",\"type\":\"bytes\"}],\"internalType\":\"structTypes.StakerInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"}],\"name\":\"getUndelegations\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockEpoch\",\"type\":\"uint256\"}],\"internalType\":\"structIL2Staking.Undelegation[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_sequencersMaxSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_undelegateLockEpochs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardStartTime\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"tmKey\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"blsKey\",\"type\":\"bytes\"}],\"internalType\":\"structTypes.StakerInfo[]\",\"name\":\"_stakers\",\"type\":\"tuple[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"isStakingTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestSequencerSetSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"messenger\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"remove\",\"type\":\"address[]\"}],\"name\":\"removeStakers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sequencerSetMaxSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"commission\",\"type\":\"uint256\"}],\"name\":\"setCommissionRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakerAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"stakerDelegations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalDelegationAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"stakerRankings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"stakers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"tmKey\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"blsKey\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"undelegateLockEpochs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"undelegateStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"undelegations\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockEpoch\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardStartTime\",\"type\":\"uint256\"}],\"name\":\"updateRewardStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sequencerSetMaxSize\",\"type\":\"uint256\"}],\"name\":\"updateSequencerSetMaxSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x61012060405234801562000011575f80fd5b5060405162004a8838038062004a888339810160408190526200003491620000a7565b7353000000000000000000000000000000000000076080526001600160a01b031660a05273530000000000000000000000000000000000001360c05273530000000000000000000000000000000000001760e05273530000000000000000000000000000000000001461010052620000d6565b5f60208284031215620000b8575f80fd5b81516001600160a01b0381168114620000cf575f80fd5b9392505050565b60805160a05160c05160e051610100516148ef620001995f395f818161040801528181610d2b01528181610dd3015281816116e201528181611dbd0152612eb901525f818161053d015261360001525f81816106350152818161381f015281816138d40152818161397b01528181613b8501528181613c320152613cd901525f81816104e2015281816106d0015261280f01525f81816103cb015281816105b8015281816106a6015281816106fa015281816127e5015261283901526148ef5ff3fe608060405234801561000f575f80fd5b50600436106102c2575f3560e01c80636d454d511161017c5780639168ae72116100dd578063c64814dd11610093578063ed70b3431161006e578063ed70b3431461065f578063f0261bc21461067f578063f2fde38b14610688575f80fd5b8063c64814dd14610606578063d557714114610630578063e10911b114610657575f80fd5b8063927ede2d116100c3578063927ede2d146105b357806396ab994d146105da578063b5d2e0dc146105e7575f80fd5b80639168ae721461057257806391bd43a414610594575f80fd5b8063831cfb58116101325780638da5cb5b116101185780638da5cb5b146105275780638e21d5fb146105385780638eca493a1461055f575f80fd5b8063831cfb58146104dd57806384d7d1d414610504575f80fd5b8063746c8ae111610162578063746c8ae1146104ae57806376671808146104b65780637b05afb5146104be575f80fd5b80636d454d5114610493578063715018a6146104a6575f80fd5b80633b8024211161022657806343352d61116101dc578063459598a2116101c2578063459598a21461045857806346cdc18a1461046b57806368e7634614610473575f80fd5b806343352d611461043d578063439162b514610445575f80fd5b80633cb747bf1161020c5780633cb747bf146103c95780633d9353fe1461040357806340b5c8371461042a575f80fd5b80633b802421146103ad5780633c323a1b146103b6575f80fd5b806319fac8fd1161027b5780632e787be3116102615780632e787be31461037157806330158eea1461037a5780633385ccc21461039a575f80fd5b806319fac8fd146103555780632cc138be14610368575f80fd5b80630f3b7059116102ab5780630f3b7059146102ee57806312a3e9471461032b578063174e31c414610342575f80fd5b80630be67fcc146102c65780630eb573af146102db575b5f80fd5b6102d96102d4366004614045565b61069b565b005b6102d96102e9366004614084565b610bdf565b6103016102fc3660046140af565b610cc3565b604080516001600160a01b0390941684526020840192909252908201526060015b60405180910390f35b610334609a5481565b604051908152602001610322565b6102d96103503660046140af565b610d0b565b6102d9610363366004614084565b610e7f565b61033460985481565b61033460995481565b61038d610388366004614045565b610fa1565b604051610322919061413a565b6102d96103a83660046141e0565b6111ca565b610334609c5481565b6102d96103c43660046140af565b6118ac565b7f00000000000000000000000000000000000000000000000000000000000000005b6040516001600160a01b039091168152602001610322565b6103eb7f000000000000000000000000000000000000000000000000000000000000000081565b6102d9610438366004614084565b611f17565b61038d612037565b6102d96104533660046141fb565b612253565b6103eb610466366004614084565b61278f565b609d54610334565b6104866104813660046141e0565b6127b7565b6040516103229190614269565b6102d96104a13660046142b5565b6127da565b6102d9612aab565b6102d9612abe565b610334612dae565b6103346104cc3660046141e0565b60a06020525f908152604090205481565b6103eb7f000000000000000000000000000000000000000000000000000000000000000081565b6105176105123660046141e0565b612e22565b6040519015158152602001610322565b6033546001600160a01b03166103eb565b6103eb7f000000000000000000000000000000000000000000000000000000000000000081565b6102d961056d366004614084565b612e4c565b6105856105803660046141e0565b612f5c565b604051610322939291906142ec565b6103346105a23660046141e0565b60a16020525f908152604090205481565b6103eb7f000000000000000000000000000000000000000000000000000000000000000081565b6097546105179060ff1681565b6103346105f53660046141e0565b609e6020525f908152604090205481565b61033461061436600461431c565b60a360209081525f928352604080842090915290825290205481565b6103eb7f000000000000000000000000000000000000000000000000000000000000000081565b6102d961300e565b61067261066d3660046141e0565b6133c7565b6040516103229190614353565b610334609b5481565b6102d96106963660046141e0565b61345d565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614801561078357507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316636e296e456040518163ffffffff1660e01b8152600401602060405180830381865afa158015610754573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061077891906143b4565b6001600160a01b0316145b6107fa5760405162461bcd60e51b815260206004820152602c60248201527f7374616b696e673a206f6e6c79206f74686572207374616b696e6720636f6e7460448201527f7261637420616c6c6f776564000000000000000000000000000000000000000060648201526084015b60405180910390fd5b5f805b82811015610b9257609b54609e5f86868581811061081d5761081d6143cf565b905060200201602081019061083291906141e0565b6001600160a01b03166001600160a01b031681526020019081526020015f20541161085c57600191505b5f609e5f868685818110610872576108726143cf565b905060200201602081019061088791906141e0565b6001600160a01b03166001600160a01b031681526020019081526020015f20541115610b09575f6001609e5f8787868181106108c5576108c56143cf565b90506020020160208101906108da91906141e0565b6001600160a01b03166001600160a01b031681526020019081526020015f20546109049190614429565b90505b609d5461091690600190614429565b8110156109e857609d61092a82600161443c565b8154811061093a5761093a6143cf565b5f91825260209091200154609d80546001600160a01b039092169183908110610965576109656143cf565b905f5260205f20015f6101000a8154816001600160a01b0302191690836001600160a01b031602179055506001609e5f609d84815481106109a8576109a86143cf565b5f9182526020808320909101546001600160a01b03168352820192909252604001812080549091906109db908490614429565b9091555050600101610907565b50609d8054806109fa576109fa61444f565b5f8281526020812082017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90810180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055909101909155609e90858584818110610a6957610a696143cf565b9050602002016020810190610a7e91906141e0565b6001600160a01b03166001600160a01b031681526020019081526020015f205f90555f60a15f868685818110610ab657610ab66143cf565b9050602002016020810190610acb91906141e0565b6001600160a01b03166001600160a01b031681526020019081526020015f20541115610b09576001609c5f828254610b039190614429565b90915550505b609f5f858584818110610b1e57610b1e6143cf565b9050602002016020810190610b3391906141e0565b6001600160a01b0316815260208101919091526040015f90812080547fffffffffffffffffffffffff00000000000000000000000000000000000000001681556001810182905590610b886002830182613fb3565b50506001016107fd565b507f3511bf213f9290ba907e91e12a43e8471251e1879580ae5509292a3514c23f618383604051610bc492919061447c565b60405180910390a18015610bda57610bda6134ea565b505050565b610be761366a565b5f81118015610bf857506099548114155b610c6a5760405162461bcd60e51b815260206004820152602260248201527f696e76616c6964206e65772073657175656e63657220736574206d617820736960448201527f7a6500000000000000000000000000000000000000000000000000000000000060648201526084016107f1565b609980549082905560408051828152602081018490527f98b982a120d9be7d9c68d85a1aed8158d1d52e517175bfb3eb4280692f19b1ed910160405180910390a1609b546099541015610cbf57610cbf6134ea565b5050565b60a4602052815f5260405f208181548110610cdc575f80fd5b5f9182526020909120600390910201805460018201546002909201546001600160a01b03909116935090915083565b610d136136c4565b6001600160a01b038216610dc9576001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016635cf20c7b336040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1681526001600160a01b039091166004820152602481018490526044015f604051808303815f87803b158015610dae575f80fd5b505af1158015610dc0573d5f803e3d5ffd5b50505050610e75565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663996cba6883336040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b03928316600482015291166024820152604481018490526064015f604051808303815f87803b158015610e5e575f80fd5b505af1158015610e70573d5f803e3d5ffd5b505050505b610cbf6001606555565b335f908152609e6020526040902054610eda5760405162461bcd60e51b815260206004820152601360248201527f6f6e6c79207374616b657220616c6c6f7765640000000000000000000000000060448201526064016107f1565b6014811115610f2b5760405162461bcd60e51b815260206004820152601260248201527f696e76616c696420636f6d6d697373696f6e000000000000000000000000000060448201526064016107f1565b335f90815260a06020526040812082905560975460ff16610f4c575f610f5f565b610f54612dae565b610f5f90600161443c565b604080518481526020810183905291925033917f6e500db30ce535d38852e318f333e9be41a3fec6c65d234ebb06203c896db9a5910160405180910390a25050565b60605f8267ffffffffffffffff811115610fbd57610fbd6144c9565b60405190808252806020026020018201604052801561100957816020015b60408051606080820183525f808352602083015291810191909152815260200190600190039081610fdb5790505b5090505f5b838110156111c0576040518060600160405280609f5f888886818110611036576110366143cf565b905060200201602081019061104b91906141e0565b6001600160a01b03908116825260208083019390935260409091015f908120549091168352910190609f90888886818110611088576110886143cf565b905060200201602081019061109d91906141e0565b6001600160a01b03166001600160a01b031681526020019081526020015f20600101548152602001609f5f8888868181106110da576110da6143cf565b90506020020160208101906110ef91906141e0565b6001600160a01b03166001600160a01b031681526020019081526020015f20600201805461111c906144f6565b80601f0160208091040260200160405190810160405280929190818152602001828054611148906144f6565b80156111935780601f1061116a57610100808354040283529160200191611193565b820191905f5260205f20905b81548152906001019060200180831161117657829003601f168201915b50505050508152508282815181106111ad576111ad6143cf565b602090810291909101015260010161100e565b5090505b92915050565b6111d26136c4565b6111dc3382613724565b156112295760405162461bcd60e51b815260206004820152601660248201527f756e64656c65676174696f6e20756e636c61696d65640000000000000000000060448201526064016107f1565b6001600160a01b0381165f90815260a3602090815260408083203384529091529020546112985760405162461bcd60e51b815260206004820152601660248201527f7374616b696e6720616d6f756e74206973207a65726f0000000000000000000060448201526064016107f1565b6001600160a01b0381165f908152609e60205260408120546097549015919060ff166112c4575f6112d7565b6112cc612dae565b6112d790600161443c565b6097549091505f9060ff1680156112ec575082155b6112f65781611303565b609a54611303908361443c565b604080516060810182526001600160a01b038781168083525f81815260a36020908152858220338084528183528784208054848901908152888a018b815283875260a486528a87208054600180820183559189528789208c5160039092020180547fffffffffffffffffffffffff00000000000000000000000000000000000000001691909b16178a558251908a015551600290980197909755908452908252829055925191815260a1909252928120805494955091936113c5908490614429565b90915550506001600160a01b0385165f90815260a2602052604090206113eb90336137ad565b506001600160a01b0385165f908152609e602052604090205484158015611414575060975460ff165b80156114215750609c5481105b15611698576001600160a01b0386165f908152609e602052604081205461144a90600190614429565b90505b6001609c5461145c9190614429565b8110156116965760a15f609d8381548110611479576114796143cf565b5f9182526020808320909101546001600160a01b031683528201929092526040018120549060a190609d6114ae85600161443c565b815481106114be576114be6143cf565b5f9182526020808320909101546001600160a01b03168352820192909252604001902054111561168e575f609d82815481106114fc576114fc6143cf565b5f918252602090912001546001600160a01b03169050609d61151f83600161443c565b8154811061152f5761152f6143cf565b5f91825260209091200154609d80546001600160a01b03909216918490811061155a5761155a6143cf565b5f91825260209091200180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b039290921691909117905580609d6115a884600161443c565b815481106115b8576115b86143cf565b5f91825260209091200180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b039290921691909117905561160382600161443c565b609e5f609d8581548110611619576116196143cf565b5f9182526020808320909101546001600160a01b0316835282019290925260400190205561164882600261443c565b609e5f609d61165886600161443c565b81548110611668576116686143cf565b5f9182526020808320909101546001600160a01b03168352820192909252604001902055505b60010161144d565b505b841580156116bb57506001600160a01b0386165f90815260a16020526040902054155b156116d8576001609c5f8282546116d29190614429565b90915550505b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663ad8e122387336001600160a01b038a165f90815260a1602090815260408083205460a2909252909120899190611738906137c8565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e088901b1681526001600160a01b03958616600482015294909316602485015260448401919091526064830152608482015260a4015f604051808303815f87803b1580156117a9575f80fd5b505af11580156117bb573d5f803e3d5ffd5b505050506117c63390565b6001600160a01b0316866001600160a01b03167f92039db29d8c0a1aa1433fe109c69488c8c5e51b23c9de7d303ad80c1fef778c84602001518787604051611821939291909283526020830191909152604082015260600190565b60405180910390a384158015611839575060975460ff165b80156118475750609b548111155b801561188d5750609b546001600160a01b0387165f908152609e6020526040902054118061188d5750609c546001600160a01b0387165f908152609e6020526040902054115b1561189a5761189a6134ea565b50505050506118a96001606555565b50565b6001600160a01b0382165f908152609e602052604090205482906119125760405162461bcd60e51b815260206004820152600a60248201527f6e6f74207374616b65720000000000000000000000000000000000000000000060448201526064016107f1565b61191a6136c4565b5f82116119695760405162461bcd60e51b815260206004820152601460248201527f696e76616c6964207374616b6520616d6f756e7400000000000000000000000060448201526064016107f1565b6119733384613724565b156119c05760405162461bcd60e51b815260206004820152601660248201527f756e64656c65676174696f6e20756e636c61696d65640000000000000000000060448201526064016107f1565b6001600160a01b0383165f90815260a16020526040812080548492906119e790849061443c565b90915550506001600160a01b0383165f90815260a36020908152604080832033845290915281208054849290611a1e90849061443c565b90915550506001600160a01b0383165f90815260a260205260409020611a4490336137d1565b506001600160a01b0383165f90815260a16020526040902054829003611a7c576001609c5f828254611a76919061443c565b90915550505b6001600160a01b0383165f908152609e602052604090205460975460ff168015611aa65750600181115b15611cf7575f611ab7600183614429565b90505b8015611cf55760a15f609d611ad0600185614429565b81548110611ae057611ae06143cf565b905f5260205f20015f9054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020019081526020015f205460a15f609d8481548110611b3157611b316143cf565b5f9182526020808320909101546001600160a01b031683528201929092526040019020541115611ce3575f609d611b69600184614429565b81548110611b7957611b796143cf565b5f91825260209091200154609d80546001600160a01b0390921692509083908110611ba657611ba66143cf565b5f918252602090912001546001600160a01b0316609d611bc7600185614429565b81548110611bd757611bd76143cf565b905f5260205f20015f6101000a8154816001600160a01b0302191690836001600160a01b0316021790555080609d8381548110611c1657611c166143cf565b5f918252602082200180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0393909316929092179091558290609e90609d611c68600185614429565b81548110611c7857611c786143cf565b5f9182526020808320909101546001600160a01b03168352820192909252604001902055611ca782600161443c565b609e5f609d8581548110611cbd57611cbd6143cf565b5f9182526020808320909101546001600160a01b03168352820192909252604001902055505b80611ced81614541565b915050611aba565b505b6097545f9060ff16611d09575f611d1c565b611d11612dae565b611d1c90600161443c565b6001600160a01b0386165f81815260a36020908152604080832033808552908352928190205481519081529182018990528181018590525193945090927fc4ad67bad2c1f682946a406d840f1b273f5cd5a53fcc1a03d078d92bfa2e07d09181900360600190a36001600160a01b038581165f81815260a360209081526040808320338085529083528184205494845260a183528184205460a290935292207f00000000000000000000000000000000000000000000000000000000000000009094169363e16bcc32938a93928792611df4906137c8565b6001600160a01b038d165f90815260a3602052604081208d91336001600160a01b039081168252602082019290925260409081015f205490517fffffffff0000000000000000000000000000000000000000000000000000000060e08c901b16815298821660048a01529616602488015260448701949094526064860192909252608485015260a48401521460c482015260e4015f604051808303815f87803b158015611e9f575f80fd5b505af1158015611eb1573d5f803e3d5ffd5b50505050611ec6611ebf3390565b30866137e5565b60975460ff168015611ed95750609b5482115b8015611efe57506099546001600160a01b0386165f908152609e602052604090205411155b15611f0b57611f0b6134ea565b5050610bda6001606555565b611f1f61366a565b60975460ff16158015611f33575042609854115b611f7f5760405162461bcd60e51b815260206004820152601660248201527f72657761726420616c726561647920737461727465640000000000000000000060448201526064016107f1565b4281118015611f985750611f9662015180826145a2565b155b8015611fa657506098548114155b611ff25760405162461bcd60e51b815260206004820152601960248201527f696e76616c6964207265776172642073746172742074696d650000000000000060448201526064016107f1565b609880549082905560408051828152602081018490527f91c38708087fb4ba51bd0e6a106cc1fbaf340479a2e81d18f2341e8c78f97555910160405180910390a15050565b609d546060905f9067ffffffffffffffff811115612057576120576144c9565b6040519080825280602002602001820160405280156120a357816020015b60408051606080820183525f8083526020830152918101919091528152602001906001900390816120755790505b5090505f5b609d5481101561224d576040518060600160405280609f5f609d85815481106120d3576120d36143cf565b5f9182526020808320909101546001600160a01b0390811684528382019490945260409092018120549092168352609d80549390910192609f9291908690811061211f5761211f6143cf565b905f5260205f20015f9054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020019081526020015f20600101548152602001609f5f609d8581548110612178576121786143cf565b5f9182526020808320909101546001600160a01b03168352820192909252604001902060020180546121a9906144f6565b80601f01602080910402602001604051908101604052809291908181526020018280546121d5906144f6565b80156122205780601f106121f757610100808354040283529160200191612220565b820191905f5260205f20905b81548152906001019060200180831161220357829003601f168201915b505050505081525082828151811061223a5761223a6143cf565b60209081029190910101526001016120a8565b50919050565b5f54610100900460ff161580801561227157505f54600160ff909116105b8061228a5750303b15801561228a57505f5460ff166001145b6122fc5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016107f1565b5f80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790558015612358575f80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b6001600160a01b0387166123ae5760405162461bcd60e51b815260206004820152601560248201527f696e76616c6964206f776e65722061646472657373000000000000000000000060448201526064016107f1565b5f86116124235760405162461bcd60e51b815260206004820152602260248201527f73657175656e6365727353697a65206d7573742067726561746572207468616e60448201527f203000000000000000000000000000000000000000000000000000000000000060648201526084016107f1565b5f85116124725760405162461bcd60e51b815260206004820152601c60248201527f696e76616c696420756e64656c65676174654c6f636b45706f6368730000000060448201526064016107f1565b428411801561248b575061248962015180856145a2565b155b6124d75760405162461bcd60e51b815260206004820152601960248201527f696e76616c6964207265776172642073746172742074696d650000000000000060448201526064016107f1565b816125245760405162461bcd60e51b815260206004820152601760248201527f696e76616c696420696e697469616c207374616b65727300000000000000000060448201526064016107f1565b61252d87613a52565b612535613abb565b6099869055609a8590556098849055609b8290555f5b609b548110156126b157838382818110612567576125676143cf565b905060200281019061257991906145b5565b609f5f86868581811061258e5761258e6143cf565b90506020028101906125a091906145b5565b6125ae9060208101906141e0565b6001600160a01b0316815260208101919091526040015f206125d08282614696565b905050609d8484838181106125e7576125e76143cf565b90506020028101906125f991906145b5565b6126079060208101906141e0565b8154600180820184555f93845260209093200180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b039290921691909117905561265b90829061443c565b609e5f868685818110612670576126706143cf565b905060200281019061268291906145b5565b6126909060208101906141e0565b6001600160a01b0316815260208101919091526040015f205560010161254b565b50604080515f8152602081018890527f98b982a120d9be7d9c68d85a1aed8158d1d52e517175bfb3eb4280692f19b1ed910160405180910390a1604080515f8152602081018690527f91c38708087fb4ba51bd0e6a106cc1fbaf340479a2e81d18f2341e8c78f97555910160405180910390a18015612786575f80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050505050565b609d818154811061279e575f80fd5b5f918252602090912001546001600160a01b0316905081565b6001600160a01b0381165f90815260a2602052604090206060906111c490613b3f565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480156128c257507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316636e296e456040518163ffffffff1660e01b8152600401602060405180830381865afa158015612893573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906128b791906143b4565b6001600160a01b0316145b6129345760405162461bcd60e51b815260206004820152602c60248201527f7374616b696e673a206f6e6c79206f74686572207374616b696e6720636f6e7460448201527f7261637420616c6c6f776564000000000000000000000000000000000000000060648201526084016107f1565b609e5f61294460208401846141e0565b6001600160a01b03166001600160a01b031681526020019081526020015f20545f036129f157609d61297960208301836141e0565b81546001810183555f928352602080842090910180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b039390931692909217909155609d5491609e916129d7908501856141e0565b6001600160a01b0316815260208101919091526040015f20555b80609f5f612a0260208401846141e0565b6001600160a01b0316815260208101919091526040015f20612a248282614696565b50612a34905060208201826141e0565b6001600160a01b03167f058ecb29c230cd5df283c89e996187ed521393fe4546cd1b097921c4b2de293d6020830135612a7060408501856145f1565b604051612a7f93929190614846565b60405180910390a260975460ff16158015612a9e5750609954609d5411155b156118a9576118a96134ea565b612ab361366a565b612abc5f613a52565b565b612ac661366a565b609854421015612b3d5760405162461bcd60e51b8152602060048201526024808201527f63616e2774207374617274206265666f7265207265776172642073746172742060448201527f74696d650000000000000000000000000000000000000000000000000000000060648201526084016107f1565b5f609c5411612b8e5760405162461bcd60e51b815260206004820152600e60248201527f6e6f6e652063616e64696461746500000000000000000000000000000000000060448201526064016107f1565b609780547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660019081179091555b609d54811015612d4b575f5b81811015612d425760a15f609d8381548110612be757612be76143cf565b905f5260205f20015f9054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020019081526020015f205460a15f609d8581548110612c3857612c386143cf565b5f9182526020808320909101546001600160a01b031683528201929092526040019020541115612d3a575f609d8281548110612c7657612c766143cf565b5f91825260209091200154609d80546001600160a01b0390921692509084908110612ca357612ca36143cf565b5f91825260209091200154609d80546001600160a01b039092169184908110612cce57612cce6143cf565b905f5260205f20015f6101000a8154816001600160a01b0302191690836001600160a01b0316021790555080609d8481548110612d0d57612d0d6143cf565b905f5260205f20015f6101000a8154816001600160a01b0302191690836001600160a01b03160217905550505b600101612bc9565b50600101612bbd565b505f5b609d54811015612da557612d6381600161443c565b609e5f609d8481548110612d7957612d796143cf565b5f9182526020808320909101546001600160a01b03168352820192909252604001902055600101612d4e565b50612abc6134ea565b5f609854421015612e015760405162461bcd60e51b815260206004820152601960248201527f726577617264206973206e6f742073746172746564207965740000000000000060448201526064016107f1565b6201518060985442612e139190614429565b612e1d9190614899565b905090565b6001600160a01b0381165f90815260a36020908152604080832033845290915281205415156111c4565b335f908152609e6020526040902054612ea75760405162461bcd60e51b815260206004820152601360248201527f6f6e6c79207374616b657220616c6c6f7765640000000000000000000000000060448201526064016107f1565b612eaf6136c4565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166341302560336040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1681526001600160a01b039091166004820152602481018490526044015f604051808303815f87803b158015612f3c575f80fd5b505af1158015612f4e573d5f803e3d5ffd5b505050506118a96001606555565b609f6020525f90815260409020805460018201546002830180546001600160a01b03909316939192612f8d906144f6565b80601f0160208091040260200160405190810160405280929190818152602001828054612fb9906144f6565b80156130045780601f10612fdb57610100808354040283529160200191613004565b820191905f5260205f20905b815481529060010190602001808311612fe757829003601f168201915b5050505050905083565b6130166136c4565b335f90815260a46020526040812054815b818110156133615760975460ff1615806130775750613044612dae565b335f90815260a460205260409020805483908110613064576130646143cf565b905f5260205f2090600302016002015411155b1561334f57335f90815260a46020526040902080548290811061309c5761309c6143cf565b905f5260205f20906003020160010154836130b7919061443c565b335f90815260a46020526040812080549295509091839081106130dc576130dc6143cf565b5f91825260208220600390910201546001600160a01b0316915060a4816131003390565b6001600160a01b03166001600160a01b031681526020019081526020015f208381548110613130576131306143cf565b905f5260205f2090600302016002015490505f60a45f61314d3390565b6001600160a01b03166001600160a01b031681526020019081526020015f20848154811061317d5761317d6143cf565b905f5260205f20906003020160010154905060018561319c9190614429565b84101561326c57335f90815260a4602052604090206131bc600187614429565b815481106131cc576131cc6143cf565b905f5260205f20906003020160a45f6131e23390565b6001600160a01b03166001600160a01b031681526020019081526020015f208581548110613212576132126143cf565b5f9182526020909120825460039092020180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03909216919091178155600180830154908201556002918201549101555b335f90815260a4602052604090208054806132895761328961444f565b5f8281526020812060037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9093019283020180547fffffffffffffffffffffffff0000000000000000000000000000000000000000168155600181810183905560029091019190915591556132fe9086614429565b604080518481526020810184905291965033916001600160a01b038616917f921046659ea3b3b3f8e8fefd2bece3121b2d929ead94c696a75beedee477fdb6910160405180910390a3505050613027565b61335a81600161443c565b9050613027565b505f82116133b15760405162461bcd60e51b815260206004820152601760248201527f6e6f204d6f72706820746f6b656e20746f20636c61696d00000000000000000060448201526064016107f1565b6133bb3383613b4b565b5050612abc6001606555565b6001600160a01b0381165f90815260a460209081526040808320805482518185028101850190935280835260609492939192909184015b82821015613452575f848152602090819020604080516060810182526003860290920180546001600160a01b03168352600180820154848601526002909101549183019190915290835290920191016133fe565b505050509050919050565b61346561366a565b6001600160a01b0381166134e15760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016107f1565b6118a981613a52565b60995460975460ff161561350e57609954609c5410156135095750609c545b61351f565b609954609d54101561351f5750609d545b5f8167ffffffffffffffff811115613539576135396144c9565b604051908082528060200260200182016040528015613562578160200160208202803683370190505b5090505f5b828110156135cf57609d8181548110613582576135826143cf565b905f5260205f20015f9054906101000a90046001600160a01b03168282815181106135af576135af6143cf565b6001600160a01b0390921660209283029190910190910152600101613567565b506040517f9b8201a40000000000000000000000000000000000000000000000000000000081526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690639b8201a490613635908490600401614269565b5f604051808303815f87803b15801561364c575f80fd5b505af115801561365e573d5f803e3d5ffd5b50509151609b55505050565b6033546001600160a01b03163314612abc5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016107f1565b6002606554036137165760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016107f1565b6002606555565b6001606555565b5f805b6001600160a01b0384165f90815260a460205260409020548110156137a4576001600160a01b038481165f90815260a46020526040902080549185169183908110613774576137746143cf565b5f9182526020909120600390910201546001600160a01b03160361379c5760019150506111c4565b600101613727565b505f9392505050565b5f6137c1836001600160a01b038416613daf565b9392505050565b5f6111c4825490565b5f6137c1836001600160a01b038416613e92565b6040517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b0383811660048301525f917f0000000000000000000000000000000000000000000000000000000000000000909116906370a0823190602401602060405180830381865afa158015613866573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061388a91906148ac565b6040517f23b872dd0000000000000000000000000000000000000000000000000000000081526001600160a01b0386811660048301528581166024830152604482018590529192507f0000000000000000000000000000000000000000000000000000000000000000909116906323b872dd906064016020604051808303815f875af115801561391c573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061394091906148c3565b506040517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b0384811660048301525f917f0000000000000000000000000000000000000000000000000000000000000000909116906370a0823190602401602060405180830381865afa1580156139c2573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906139e691906148ac565b90505f831180156139ff5750826139fd8383614429565b145b613a4b5760405162461bcd60e51b815260206004820152601b60248201527f6d6f72706820746f6b656e207472616e73666572206661696c6564000000000060448201526064016107f1565b5050505050565b603380546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35050565b5f54610100900460ff16613b375760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016107f1565b612abc613ede565b60605f6137c183613f5a565b6040517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b0383811660048301525f917f0000000000000000000000000000000000000000000000000000000000000000909116906370a0823190602401602060405180830381865afa158015613bcc573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190613bf091906148ac565b6040517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b038581166004830152602482018590529192507f00000000000000000000000000000000000000000000000000000000000000009091169063a9059cbb906044016020604051808303815f875af1158015613c7a573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190613c9e91906148c3565b506040517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b0384811660048301525f917f0000000000000000000000000000000000000000000000000000000000000000909116906370a0823190602401602060405180830381865afa158015613d20573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190613d4491906148ac565b90505f83118015613d5d575082613d5b8383614429565b145b613da95760405162461bcd60e51b815260206004820152601b60248201527f6d6f72706820746f6b656e207472616e73666572206661696c6564000000000060448201526064016107f1565b50505050565b5f8181526001830160205260408120548015613e89575f613dd1600183614429565b85549091505f90613de490600190614429565b9050818114613e43575f865f018281548110613e0257613e026143cf565b905f5260205f200154905080875f018481548110613e2257613e226143cf565b5f918252602080832090910192909255918252600188019052604090208390555b8554869080613e5457613e5461444f565b600190038181905f5260205f20015f90559055856001015f8681526020019081526020015f205f9055600193505050506111c4565b5f9150506111c4565b5f818152600183016020526040812054613ed757508154600181810184555f8481526020808220909301849055845484825282860190935260409020919091556111c4565b505f6111c4565b5f54610100900460ff1661371d5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016107f1565b6060815f01805480602002602001604051908101604052809291908181526020018280548015613fa757602002820191905f5260205f20905b815481526020019060010190808311613f93575b50505050509050919050565b508054613fbf906144f6565b5f825580601f10613fce575050565b601f0160209004905f5260205f20908101906118a991905b80821115613ff9575f8155600101613fe6565b5090565b5f8083601f84011261400d575f80fd5b50813567ffffffffffffffff811115614024575f80fd5b6020830191508360208260051b850101111561403e575f80fd5b9250929050565b5f8060208385031215614056575f80fd5b823567ffffffffffffffff81111561406c575f80fd5b61407885828601613ffd565b90969095509350505050565b5f60208284031215614094575f80fd5b5035919050565b6001600160a01b03811681146118a9575f80fd5b5f80604083850312156140c0575f80fd5b82356140cb8161409b565b946020939093013593505050565b5f81518084525f5b818110156140fd576020818501810151868301820152016140e1565b505f6020828601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011685010191505092915050565b5f60208083018184528085518083526040925060408601915060408160051b8701018488015f5b838110156141d2578883037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0018552815180516001600160a01b03168452878101518885015286015160608785018190526141be818601836140d9565b968901969450505090860190600101614161565b509098975050505050505050565b5f602082840312156141f0575f80fd5b81356137c18161409b565b5f805f805f8060a08789031215614210575f80fd5b863561421b8161409b565b9550602087013594506040870135935060608701359250608087013567ffffffffffffffff81111561424b575f80fd5b61425789828a01613ffd565b979a9699509497509295939492505050565b602080825282518282018190525f9190848201906040850190845b818110156142a95783516001600160a01b031683529284019291840191600101614284565b50909695505050505050565b5f602082840312156142c5575f80fd5b813567ffffffffffffffff8111156142db575f80fd5b8201606081850312156137c1575f80fd5b6001600160a01b0384168152826020820152606060408201525f61431360608301846140d9565b95945050505050565b5f806040838503121561432d575f80fd5b82356143388161409b565b915060208301356143488161409b565b809150509250929050565b602080825282518282018190525f919060409081850190868401855b828110156143a757815180516001600160a01b031685528681015187860152850151858501526060909301929085019060010161436f565b5091979650505050505050565b5f602082840312156143c4575f80fd5b81516137c18161409b565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b818103818111156111c4576111c46143fc565b808201808211156111c4576111c46143fc565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603160045260245ffd5b60208082528181018390525f908460408401835b868110156144be5782356144a38161409b565b6001600160a01b031682529183019190830190600101614490565b509695505050505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b600181811c9082168061450a57607f821691505b60208210810361224d577f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f8161454f5761454f6143fc565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f826145b0576145b0614575565b500690565b5f82357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa18336030181126145e7575f80fd5b9190910192915050565b5f8083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112614624575f80fd5b83018035915067ffffffffffffffff82111561463e575f80fd5b60200191503681900382131561403e575f80fd5b601f821115610bda57805f5260205f20601f840160051c810160208510156146775750805b601f840160051c820191505b81811015613a4b575f8155600101614683565b81356146a18161409b565b6001600160a01b0381167fffffffffffffffffffffffff000000000000000000000000000000000000000083541617825550600160208084013560018401556002830160408501357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1863603018112614718575f80fd5b8501803567ffffffffffffffff811115614730575f80fd5b8036038483011315614740575f80fd5b6147548161474e85546144f6565b85614652565b5f601f8211600181146147a6575f831561477057508382018601355b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600385901b1c1916600184901b17855561483b565b5f858152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08516915b828110156147f2578685018901358255938801939089019088016147d3565b508482101561482f577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88660031b161c198885880101351681555b505060018360011b0185555b505050505050505050565b83815260406020820152816040820152818360608301375f818301606090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016010192915050565b5f826148a7576148a7614575565b500490565b5f602082840312156148bc575f80fd5b5051919050565b5f602082840312156148d3575f80fd5b815180151581146137c1575f80fdfea164736f6c6343000818000a",
}

// L2StakingABI is the input ABI used to generate the binding from.
// Deprecated: Use L2StakingMetaData.ABI instead.
var L2StakingABI = L2StakingMetaData.ABI

// L2StakingBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use L2StakingMetaData.Bin instead.
var L2StakingBin = L2StakingMetaData.Bin

// DeployL2Staking deploys a new Ethereum contract, binding an instance of L2Staking to it.
func DeployL2Staking(auth *bind.TransactOpts, backend bind.ContractBackend, _otherStaking common.Address) (common.Address, *types.Transaction, *L2Staking, error) {
	parsed, err := L2StakingMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(L2StakingBin), backend, _otherStaking)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &L2Staking{L2StakingCaller: L2StakingCaller{contract: contract}, L2StakingTransactor: L2StakingTransactor{contract: contract}, L2StakingFilterer: L2StakingFilterer{contract: contract}}, nil
}

// L2Staking is an auto generated Go binding around an Ethereum contract.
type L2Staking struct {
	L2StakingCaller     // Read-only binding to the contract
	L2StakingTransactor // Write-only binding to the contract
	L2StakingFilterer   // Log filterer for contract events
}

// L2StakingCaller is an auto generated read-only Go binding around an Ethereum contract.
type L2StakingCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// L2StakingTransactor is an auto generated write-only Go binding around an Ethereum contract.
type L2StakingTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// L2StakingFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type L2StakingFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// L2StakingSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type L2StakingSession struct {
	Contract     *L2Staking        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// L2StakingCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type L2StakingCallerSession struct {
	Contract *L2StakingCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// L2StakingTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type L2StakingTransactorSession struct {
	Contract     *L2StakingTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// L2StakingRaw is an auto generated low-level Go binding around an Ethereum contract.
type L2StakingRaw struct {
	Contract *L2Staking // Generic contract binding to access the raw methods on
}

// L2StakingCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type L2StakingCallerRaw struct {
	Contract *L2StakingCaller // Generic read-only contract binding to access the raw methods on
}

// L2StakingTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type L2StakingTransactorRaw struct {
	Contract *L2StakingTransactor // Generic write-only contract binding to access the raw methods on
}

// NewL2Staking creates a new instance of L2Staking, bound to a specific deployed contract.
func NewL2Staking(address common.Address, backend bind.ContractBackend) (*L2Staking, error) {
	contract, err := bindL2Staking(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &L2Staking{L2StakingCaller: L2StakingCaller{contract: contract}, L2StakingTransactor: L2StakingTransactor{contract: contract}, L2StakingFilterer: L2StakingFilterer{contract: contract}}, nil
}

// NewL2StakingCaller creates a new read-only instance of L2Staking, bound to a specific deployed contract.
func NewL2StakingCaller(address common.Address, caller bind.ContractCaller) (*L2StakingCaller, error) {
	contract, err := bindL2Staking(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &L2StakingCaller{contract: contract}, nil
}

// NewL2StakingTransactor creates a new write-only instance of L2Staking, bound to a specific deployed contract.
func NewL2StakingTransactor(address common.Address, transactor bind.ContractTransactor) (*L2StakingTransactor, error) {
	contract, err := bindL2Staking(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &L2StakingTransactor{contract: contract}, nil
}

// NewL2StakingFilterer creates a new log filterer instance of L2Staking, bound to a specific deployed contract.
func NewL2StakingFilterer(address common.Address, filterer bind.ContractFilterer) (*L2StakingFilterer, error) {
	contract, err := bindL2Staking(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &L2StakingFilterer{contract: contract}, nil
}

// bindL2Staking binds a generic wrapper to an already deployed contract.
func bindL2Staking(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := L2StakingMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_L2Staking *L2StakingRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _L2Staking.Contract.L2StakingCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_L2Staking *L2StakingRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _L2Staking.Contract.L2StakingTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_L2Staking *L2StakingRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _L2Staking.Contract.L2StakingTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_L2Staking *L2StakingCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _L2Staking.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_L2Staking *L2StakingTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _L2Staking.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_L2Staking *L2StakingTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _L2Staking.Contract.contract.Transact(opts, method, params...)
}

// DISTRIBUTECONTRACT is a free data retrieval call binding the contract method 0x3d9353fe.
//
// Solidity: function DISTRIBUTE_CONTRACT() view returns(address)
func (_L2Staking *L2StakingCaller) DISTRIBUTECONTRACT(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _L2Staking.contract.Call(opts, &out, "DISTRIBUTE_CONTRACT")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// DISTRIBUTECONTRACT is a free data retrieval call binding the contract method 0x3d9353fe.
//
// Solidity: function DISTRIBUTE_CONTRACT() view returns(address)
func (_L2Staking *L2StakingSession) DISTRIBUTECONTRACT() (common.Address, error) {
	return _L2Staking.Contract.DISTRIBUTECONTRACT(&_L2Staking.CallOpts)
}

// DISTRIBUTECONTRACT is a free data retrieval call binding the contract method 0x3d9353fe.
//
// Solidity: function DISTRIBUTE_CONTRACT() view returns(address)
func (_L2Staking *L2StakingCallerSession) DISTRIBUTECONTRACT() (common.Address, error) {
	return _L2Staking.Contract.DISTRIBUTECONTRACT(&_L2Staking.CallOpts)
}

// MESSENGER is a free data retrieval call binding the contract method 0x927ede2d.
//
// Solidity: function MESSENGER() view returns(address)
func (_L2Staking *L2StakingCaller) MESSENGER(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _L2Staking.contract.Call(opts, &out, "MESSENGER")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// MESSENGER is a free data retrieval call binding the contract method 0x927ede2d.
//
// Solidity: function MESSENGER() view returns(address)
func (_L2Staking *L2StakingSession) MESSENGER() (common.Address, error) {
	return _L2Staking.Contract.MESSENGER(&_L2Staking.CallOpts)
}

// MESSENGER is a free data retrieval call binding the contract method 0x927ede2d.
//
// Solidity: function MESSENGER() view returns(address)
func (_L2Staking *L2StakingCallerSession) MESSENGER() (common.Address, error) {
	return _L2Staking.Contract.MESSENGER(&_L2Staking.CallOpts)
}

// MORPHTOKENCONTRACT is a free data retrieval call binding the contract method 0xd5577141.
//
// Solidity: function MORPH_TOKEN_CONTRACT() view returns(address)
func (_L2Staking *L2StakingCaller) MORPHTOKENCONTRACT(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _L2Staking.contract.Call(opts, &out, "MORPH_TOKEN_CONTRACT")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// MORPHTOKENCONTRACT is a free data retrieval call binding the contract method 0xd5577141.
//
// Solidity: function MORPH_TOKEN_CONTRACT() view returns(address)
func (_L2Staking *L2StakingSession) MORPHTOKENCONTRACT() (common.Address, error) {
	return _L2Staking.Contract.MORPHTOKENCONTRACT(&_L2Staking.CallOpts)
}

// MORPHTOKENCONTRACT is a free data retrieval call binding the contract method 0xd5577141.
//
// Solidity: function MORPH_TOKEN_CONTRACT() view returns(address)
func (_L2Staking *L2StakingCallerSession) MORPHTOKENCONTRACT() (common.Address, error) {
	return _L2Staking.Contract.MORPHTOKENCONTRACT(&_L2Staking.CallOpts)
}

// OTHERSTAKING is a free data retrieval call binding the contract method 0x831cfb58.
//
// Solidity: function OTHER_STAKING() view returns(address)
func (_L2Staking *L2StakingCaller) OTHERSTAKING(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _L2Staking.contract.Call(opts, &out, "OTHER_STAKING")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OTHERSTAKING is a free data retrieval call binding the contract method 0x831cfb58.
//
// Solidity: function OTHER_STAKING() view returns(address)
func (_L2Staking *L2StakingSession) OTHERSTAKING() (common.Address, error) {
	return _L2Staking.Contract.OTHERSTAKING(&_L2Staking.CallOpts)
}

// OTHERSTAKING is a free data retrieval call binding the contract method 0x831cfb58.
//
// Solidity: function OTHER_STAKING() view returns(address)
func (_L2Staking *L2StakingCallerSession) OTHERSTAKING() (common.Address, error) {
	return _L2Staking.Contract.OTHERSTAKING(&_L2Staking.CallOpts)
}

// SEQUENCERCONTRACT is a free data retrieval call binding the contract method 0x8e21d5fb.
//
// Solidity: function SEQUENCER_CONTRACT() view returns(address)
func (_L2Staking *L2StakingCaller) SEQUENCERCONTRACT(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _L2Staking.contract.Call(opts, &out, "SEQUENCER_CONTRACT")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// SEQUENCERCONTRACT is a free data retrieval call binding the contract method 0x8e21d5fb.
//
// Solidity: function SEQUENCER_CONTRACT() view returns(address)
func (_L2Staking *L2StakingSession) SEQUENCERCONTRACT() (common.Address, error) {
	return _L2Staking.Contract.SEQUENCERCONTRACT(&_L2Staking.CallOpts)
}

// SEQUENCERCONTRACT is a free data retrieval call binding the contract method 0x8e21d5fb.
//
// Solidity: function SEQUENCER_CONTRACT() view returns(address)
func (_L2Staking *L2StakingCallerSession) SEQUENCERCONTRACT() (common.Address, error) {
	return _L2Staking.Contract.SEQUENCERCONTRACT(&_L2Staking.CallOpts)
}

// CandidateNumber is a free data retrieval call binding the contract method 0x3b802421.
//
// Solidity: function candidateNumber() view returns(uint256)
func (_L2Staking *L2StakingCaller) CandidateNumber(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _L2Staking.contract.Call(opts, &out, "candidateNumber")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CandidateNumber is a free data retrieval call binding the contract method 0x3b802421.
//
// Solidity: function candidateNumber() view returns(uint256)
func (_L2Staking *L2StakingSession) CandidateNumber() (*big.Int, error) {
	return _L2Staking.Contract.CandidateNumber(&_L2Staking.CallOpts)
}

// CandidateNumber is a free data retrieval call binding the contract method 0x3b802421.
//
// Solidity: function candidateNumber() view returns(uint256)
func (_L2Staking *L2StakingCallerSession) CandidateNumber() (*big.Int, error) {
	return _L2Staking.Contract.CandidateNumber(&_L2Staking.CallOpts)
}

// Commissions is a free data retrieval call binding the contract method 0x7b05afb5.
//
// Solidity: function commissions(address staker) view returns(uint256)
func (_L2Staking *L2StakingCaller) Commissions(opts *bind.CallOpts, staker common.Address) (*big.Int, error) {
	var out []interface{}
	err := _L2Staking.contract.Call(opts, &out, "commissions", staker)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Commissions is a free data retrieval call binding the contract method 0x7b05afb5.
//
// Solidity: function commissions(address staker) view returns(uint256)
func (_L2Staking *L2StakingSession) Commissions(staker common.Address) (*big.Int, error) {
	return _L2Staking.Contract.Commissions(&_L2Staking.CallOpts, staker)
}

// Commissions is a free data retrieval call binding the contract method 0x7b05afb5.
//
// Solidity: function commissions(address staker) view returns(uint256)
func (_L2Staking *L2StakingCallerSession) Commissions(staker common.Address) (*big.Int, error) {
	return _L2Staking.Contract.Commissions(&_L2Staking.CallOpts, staker)
}

// CurrentEpoch is a free data retrieval call binding the contract method 0x76671808.
//
// Solidity: function currentEpoch() view returns(uint256)
func (_L2Staking *L2StakingCaller) CurrentEpoch(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _L2Staking.contract.Call(opts, &out, "currentEpoch")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CurrentEpoch is a free data retrieval call binding the contract method 0x76671808.
//
// Solidity: function currentEpoch() view returns(uint256)
func (_L2Staking *L2StakingSession) CurrentEpoch() (*big.Int, error) {
	return _L2Staking.Contract.CurrentEpoch(&_L2Staking.CallOpts)
}

// CurrentEpoch is a free data retrieval call binding the contract method 0x76671808.
//
// Solidity: function currentEpoch() view returns(uint256)
func (_L2Staking *L2StakingCallerSession) CurrentEpoch() (*big.Int, error) {
	return _L2Staking.Contract.CurrentEpoch(&_L2Staking.CallOpts)
}

// Delegations is a free data retrieval call binding the contract method 0xc64814dd.
//
// Solidity: function delegations(address staker, address delegator) view returns(uint256)
func (_L2Staking *L2StakingCaller) Delegations(opts *bind.CallOpts, staker common.Address, delegator common.Address) (*big.Int, error) {
	var out []interface{}
	err := _L2Staking.contract.Call(opts, &out, "delegations", staker, delegator)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Delegations is a free data retrieval call binding the contract method 0xc64814dd.
//
// Solidity: function delegations(address staker, address delegator) view returns(uint256)
func (_L2Staking *L2StakingSession) Delegations(staker common.Address, delegator common.Address) (*big.Int, error) {
	return _L2Staking.Contract.Delegations(&_L2Staking.CallOpts, staker, delegator)
}

// Delegations is a free data retrieval call binding the contract method 0xc64814dd.
//
// Solidity: function delegations(address staker, address delegator) view returns(uint256)
func (_L2Staking *L2StakingCallerSession) Delegations(staker common.Address, delegator common.Address) (*big.Int, error) {
	return _L2Staking.Contract.Delegations(&_L2Staking.CallOpts, staker, delegator)
}

// GetDelegators is a free data retrieval call binding the contract method 0x68e76346.
//
// Solidity: function getDelegators(address staker) view returns(address[])
func (_L2Staking *L2StakingCaller) GetDelegators(opts *bind.CallOpts, staker common.Address) ([]common.Address, error) {
	var out []interface{}
	err := _L2Staking.contract.Call(opts, &out, "getDelegators", staker)

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetDelegators is a free data retrieval call binding the contract method 0x68e76346.
//
// Solidity: function getDelegators(address staker) view returns(address[])
func (_L2Staking *L2StakingSession) GetDelegators(staker common.Address) ([]common.Address, error) {
	return _L2Staking.Contract.GetDelegators(&_L2Staking.CallOpts, staker)
}

// GetDelegators is a free data retrieval call binding the contract method 0x68e76346.
//
// Solidity: function getDelegators(address staker) view returns(address[])
func (_L2Staking *L2StakingCallerSession) GetDelegators(staker common.Address) ([]common.Address, error) {
	return _L2Staking.Contract.GetDelegators(&_L2Staking.CallOpts, staker)
}

// GetStakerAddressesLength is a free data retrieval call binding the contract method 0x46cdc18a.
//
// Solidity: function getStakerAddressesLength() view returns(uint256)
func (_L2Staking *L2StakingCaller) GetStakerAddressesLength(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _L2Staking.contract.Call(opts, &out, "getStakerAddressesLength")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetStakerAddressesLength is a free data retrieval call binding the contract method 0x46cdc18a.
//
// Solidity: function getStakerAddressesLength() view returns(uint256)
func (_L2Staking *L2StakingSession) GetStakerAddressesLength() (*big.Int, error) {
	return _L2Staking.Contract.GetStakerAddressesLength(&_L2Staking.CallOpts)
}

// GetStakerAddressesLength is a free data retrieval call binding the contract method 0x46cdc18a.
//
// Solidity: function getStakerAddressesLength() view returns(uint256)
func (_L2Staking *L2StakingCallerSession) GetStakerAddressesLength() (*big.Int, error) {
	return _L2Staking.Contract.GetStakerAddressesLength(&_L2Staking.CallOpts)
}

// GetStakers is a free data retrieval call binding the contract method 0x43352d61.
//
// Solidity: function getStakers() view returns((address,bytes32,bytes)[])
func (_L2Staking *L2StakingCaller) GetStakers(opts *bind.CallOpts) ([]TypesStakerInfo, error) {
	var out []interface{}
	err := _L2Staking.contract.Call(opts, &out, "getStakers")

	if err != nil {
		return *new([]TypesStakerInfo), err
	}

	out0 := *abi.ConvertType(out[0], new([]TypesStakerInfo)).(*[]TypesStakerInfo)

	return out0, err

}

// GetStakers is a free data retrieval call binding the contract method 0x43352d61.
//
// Solidity: function getStakers() view returns((address,bytes32,bytes)[])
func (_L2Staking *L2StakingSession) GetStakers() ([]TypesStakerInfo, error) {
	return _L2Staking.Contract.GetStakers(&_L2Staking.CallOpts)
}

// GetStakers is a free data retrieval call binding the contract method 0x43352d61.
//
// Solidity: function getStakers() view returns((address,bytes32,bytes)[])
func (_L2Staking *L2StakingCallerSession) GetStakers() ([]TypesStakerInfo, error) {
	return _L2Staking.Contract.GetStakers(&_L2Staking.CallOpts)
}

// GetStakesInfo is a free data retrieval call binding the contract method 0x30158eea.
//
// Solidity: function getStakesInfo(address[] _stakerAddresses) view returns((address,bytes32,bytes)[])
func (_L2Staking *L2StakingCaller) GetStakesInfo(opts *bind.CallOpts, _stakerAddresses []common.Address) ([]TypesStakerInfo, error) {
	var out []interface{}
	err := _L2Staking.contract.Call(opts, &out, "getStakesInfo", _stakerAddresses)

	if err != nil {
		return *new([]TypesStakerInfo), err
	}

	out0 := *abi.ConvertType(out[0], new([]TypesStakerInfo)).(*[]TypesStakerInfo)

	return out0, err

}

// GetStakesInfo is a free data retrieval call binding the contract method 0x30158eea.
//
// Solidity: function getStakesInfo(address[] _stakerAddresses) view returns((address,bytes32,bytes)[])
func (_L2Staking *L2StakingSession) GetStakesInfo(_stakerAddresses []common.Address) ([]TypesStakerInfo, error) {
	return _L2Staking.Contract.GetStakesInfo(&_L2Staking.CallOpts, _stakerAddresses)
}

// GetStakesInfo is a free data retrieval call binding the contract method 0x30158eea.
//
// Solidity: function getStakesInfo(address[] _stakerAddresses) view returns((address,bytes32,bytes)[])
func (_L2Staking *L2StakingCallerSession) GetStakesInfo(_stakerAddresses []common.Address) ([]TypesStakerInfo, error) {
	return _L2Staking.Contract.GetStakesInfo(&_L2Staking.CallOpts, _stakerAddresses)
}

// GetUndelegations is a free data retrieval call binding the contract method 0xed70b343.
//
// Solidity: function getUndelegations(address delegator) view returns((address,uint256,uint256)[])
func (_L2Staking *L2StakingCaller) GetUndelegations(opts *bind.CallOpts, delegator common.Address) ([]IL2StakingUndelegation, error) {
	var out []interface{}
	err := _L2Staking.contract.Call(opts, &out, "getUndelegations", delegator)

	if err != nil {
		return *new([]IL2StakingUndelegation), err
	}

	out0 := *abi.ConvertType(out[0], new([]IL2StakingUndelegation)).(*[]IL2StakingUndelegation)

	return out0, err

}

// GetUndelegations is a free data retrieval call binding the contract method 0xed70b343.
//
// Solidity: function getUndelegations(address delegator) view returns((address,uint256,uint256)[])
func (_L2Staking *L2StakingSession) GetUndelegations(delegator common.Address) ([]IL2StakingUndelegation, error) {
	return _L2Staking.Contract.GetUndelegations(&_L2Staking.CallOpts, delegator)
}

// GetUndelegations is a free data retrieval call binding the contract method 0xed70b343.
//
// Solidity: function getUndelegations(address delegator) view returns((address,uint256,uint256)[])
func (_L2Staking *L2StakingCallerSession) GetUndelegations(delegator common.Address) ([]IL2StakingUndelegation, error) {
	return _L2Staking.Contract.GetUndelegations(&_L2Staking.CallOpts, delegator)
}

// IsStakingTo is a free data retrieval call binding the contract method 0x84d7d1d4.
//
// Solidity: function isStakingTo(address staker) view returns(bool)
func (_L2Staking *L2StakingCaller) IsStakingTo(opts *bind.CallOpts, staker common.Address) (bool, error) {
	var out []interface{}
	err := _L2Staking.contract.Call(opts, &out, "isStakingTo", staker)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsStakingTo is a free data retrieval call binding the contract method 0x84d7d1d4.
//
// Solidity: function isStakingTo(address staker) view returns(bool)
func (_L2Staking *L2StakingSession) IsStakingTo(staker common.Address) (bool, error) {
	return _L2Staking.Contract.IsStakingTo(&_L2Staking.CallOpts, staker)
}

// IsStakingTo is a free data retrieval call binding the contract method 0x84d7d1d4.
//
// Solidity: function isStakingTo(address staker) view returns(bool)
func (_L2Staking *L2StakingCallerSession) IsStakingTo(staker common.Address) (bool, error) {
	return _L2Staking.Contract.IsStakingTo(&_L2Staking.CallOpts, staker)
}

// LatestSequencerSetSize is a free data retrieval call binding the contract method 0xf0261bc2.
//
// Solidity: function latestSequencerSetSize() view returns(uint256)
func (_L2Staking *L2StakingCaller) LatestSequencerSetSize(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _L2Staking.contract.Call(opts, &out, "latestSequencerSetSize")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// LatestSequencerSetSize is a free data retrieval call binding the contract method 0xf0261bc2.
//
// Solidity: function latestSequencerSetSize() view returns(uint256)
func (_L2Staking *L2StakingSession) LatestSequencerSetSize() (*big.Int, error) {
	return _L2Staking.Contract.LatestSequencerSetSize(&_L2Staking.CallOpts)
}

// LatestSequencerSetSize is a free data retrieval call binding the contract method 0xf0261bc2.
//
// Solidity: function latestSequencerSetSize() view returns(uint256)
func (_L2Staking *L2StakingCallerSession) LatestSequencerSetSize() (*big.Int, error) {
	return _L2Staking.Contract.LatestSequencerSetSize(&_L2Staking.CallOpts)
}

// Messenger is a free data retrieval call binding the contract method 0x3cb747bf.
//
// Solidity: function messenger() view returns(address)
func (_L2Staking *L2StakingCaller) Messenger(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _L2Staking.contract.Call(opts, &out, "messenger")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Messenger is a free data retrieval call binding the contract method 0x3cb747bf.
//
// Solidity: function messenger() view returns(address)
func (_L2Staking *L2StakingSession) Messenger() (common.Address, error) {
	return _L2Staking.Contract.Messenger(&_L2Staking.CallOpts)
}

// Messenger is a free data retrieval call binding the contract method 0x3cb747bf.
//
// Solidity: function messenger() view returns(address)
func (_L2Staking *L2StakingCallerSession) Messenger() (common.Address, error) {
	return _L2Staking.Contract.Messenger(&_L2Staking.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_L2Staking *L2StakingCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _L2Staking.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_L2Staking *L2StakingSession) Owner() (common.Address, error) {
	return _L2Staking.Contract.Owner(&_L2Staking.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_L2Staking *L2StakingCallerSession) Owner() (common.Address, error) {
	return _L2Staking.Contract.Owner(&_L2Staking.CallOpts)
}

// RewardStartTime is a free data retrieval call binding the contract method 0x2cc138be.
//
// Solidity: function rewardStartTime() view returns(uint256)
func (_L2Staking *L2StakingCaller) RewardStartTime(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _L2Staking.contract.Call(opts, &out, "rewardStartTime")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RewardStartTime is a free data retrieval call binding the contract method 0x2cc138be.
//
// Solidity: function rewardStartTime() view returns(uint256)
func (_L2Staking *L2StakingSession) RewardStartTime() (*big.Int, error) {
	return _L2Staking.Contract.RewardStartTime(&_L2Staking.CallOpts)
}

// RewardStartTime is a free data retrieval call binding the contract method 0x2cc138be.
//
// Solidity: function rewardStartTime() view returns(uint256)
func (_L2Staking *L2StakingCallerSession) RewardStartTime() (*big.Int, error) {
	return _L2Staking.Contract.RewardStartTime(&_L2Staking.CallOpts)
}

// RewardStarted is a free data retrieval call binding the contract method 0x96ab994d.
//
// Solidity: function rewardStarted() view returns(bool)
func (_L2Staking *L2StakingCaller) RewardStarted(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _L2Staking.contract.Call(opts, &out, "rewardStarted")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// RewardStarted is a free data retrieval call binding the contract method 0x96ab994d.
//
// Solidity: function rewardStarted() view returns(bool)
func (_L2Staking *L2StakingSession) RewardStarted() (bool, error) {
	return _L2Staking.Contract.RewardStarted(&_L2Staking.CallOpts)
}

// RewardStarted is a free data retrieval call binding the contract method 0x96ab994d.
//
// Solidity: function rewardStarted() view returns(bool)
func (_L2Staking *L2StakingCallerSession) RewardStarted() (bool, error) {
	return _L2Staking.Contract.RewardStarted(&_L2Staking.CallOpts)
}

// SequencerSetMaxSize is a free data retrieval call binding the contract method 0x2e787be3.
//
// Solidity: function sequencerSetMaxSize() view returns(uint256)
func (_L2Staking *L2StakingCaller) SequencerSetMaxSize(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _L2Staking.contract.Call(opts, &out, "sequencerSetMaxSize")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SequencerSetMaxSize is a free data retrieval call binding the contract method 0x2e787be3.
//
// Solidity: function sequencerSetMaxSize() view returns(uint256)
func (_L2Staking *L2StakingSession) SequencerSetMaxSize() (*big.Int, error) {
	return _L2Staking.Contract.SequencerSetMaxSize(&_L2Staking.CallOpts)
}

// SequencerSetMaxSize is a free data retrieval call binding the contract method 0x2e787be3.
//
// Solidity: function sequencerSetMaxSize() view returns(uint256)
func (_L2Staking *L2StakingCallerSession) SequencerSetMaxSize() (*big.Int, error) {
	return _L2Staking.Contract.SequencerSetMaxSize(&_L2Staking.CallOpts)
}

// StakerAddresses is a free data retrieval call binding the contract method 0x459598a2.
//
// Solidity: function stakerAddresses(uint256 ) view returns(address)
func (_L2Staking *L2StakingCaller) StakerAddresses(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _L2Staking.contract.Call(opts, &out, "stakerAddresses", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// StakerAddresses is a free data retrieval call binding the contract method 0x459598a2.
//
// Solidity: function stakerAddresses(uint256 ) view returns(address)
func (_L2Staking *L2StakingSession) StakerAddresses(arg0 *big.Int) (common.Address, error) {
	return _L2Staking.Contract.StakerAddresses(&_L2Staking.CallOpts, arg0)
}

// StakerAddresses is a free data retrieval call binding the contract method 0x459598a2.
//
// Solidity: function stakerAddresses(uint256 ) view returns(address)
func (_L2Staking *L2StakingCallerSession) StakerAddresses(arg0 *big.Int) (common.Address, error) {
	return _L2Staking.Contract.StakerAddresses(&_L2Staking.CallOpts, arg0)
}

// StakerDelegations is a free data retrieval call binding the contract method 0x91bd43a4.
//
// Solidity: function stakerDelegations(address staker) view returns(uint256 totalDelegationAmount)
func (_L2Staking *L2StakingCaller) StakerDelegations(opts *bind.CallOpts, staker common.Address) (*big.Int, error) {
	var out []interface{}
	err := _L2Staking.contract.Call(opts, &out, "stakerDelegations", staker)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// StakerDelegations is a free data retrieval call binding the contract method 0x91bd43a4.
//
// Solidity: function stakerDelegations(address staker) view returns(uint256 totalDelegationAmount)
func (_L2Staking *L2StakingSession) StakerDelegations(staker common.Address) (*big.Int, error) {
	return _L2Staking.Contract.StakerDelegations(&_L2Staking.CallOpts, staker)
}

// StakerDelegations is a free data retrieval call binding the contract method 0x91bd43a4.
//
// Solidity: function stakerDelegations(address staker) view returns(uint256 totalDelegationAmount)
func (_L2Staking *L2StakingCallerSession) StakerDelegations(staker common.Address) (*big.Int, error) {
	return _L2Staking.Contract.StakerDelegations(&_L2Staking.CallOpts, staker)
}

// StakerRankings is a free data retrieval call binding the contract method 0xb5d2e0dc.
//
// Solidity: function stakerRankings(address staker) view returns(uint256)
func (_L2Staking *L2StakingCaller) StakerRankings(opts *bind.CallOpts, staker common.Address) (*big.Int, error) {
	var out []interface{}
	err := _L2Staking.contract.Call(opts, &out, "stakerRankings", staker)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// StakerRankings is a free data retrieval call binding the contract method 0xb5d2e0dc.
//
// Solidity: function stakerRankings(address staker) view returns(uint256)
func (_L2Staking *L2StakingSession) StakerRankings(staker common.Address) (*big.Int, error) {
	return _L2Staking.Contract.StakerRankings(&_L2Staking.CallOpts, staker)
}

// StakerRankings is a free data retrieval call binding the contract method 0xb5d2e0dc.
//
// Solidity: function stakerRankings(address staker) view returns(uint256)
func (_L2Staking *L2StakingCallerSession) StakerRankings(staker common.Address) (*big.Int, error) {
	return _L2Staking.Contract.StakerRankings(&_L2Staking.CallOpts, staker)
}

// Stakers is a free data retrieval call binding the contract method 0x9168ae72.
//
// Solidity: function stakers(address staker) view returns(address addr, bytes32 tmKey, bytes blsKey)
func (_L2Staking *L2StakingCaller) Stakers(opts *bind.CallOpts, staker common.Address) (struct {
	Addr   common.Address
	TmKey  [32]byte
	BlsKey []byte
}, error) {
	var out []interface{}
	err := _L2Staking.contract.Call(opts, &out, "stakers", staker)

	outstruct := new(struct {
		Addr   common.Address
		TmKey  [32]byte
		BlsKey []byte
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Addr = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.TmKey = *abi.ConvertType(out[1], new([32]byte)).(*[32]byte)
	outstruct.BlsKey = *abi.ConvertType(out[2], new([]byte)).(*[]byte)

	return *outstruct, err

}

// Stakers is a free data retrieval call binding the contract method 0x9168ae72.
//
// Solidity: function stakers(address staker) view returns(address addr, bytes32 tmKey, bytes blsKey)
func (_L2Staking *L2StakingSession) Stakers(staker common.Address) (struct {
	Addr   common.Address
	TmKey  [32]byte
	BlsKey []byte
}, error) {
	return _L2Staking.Contract.Stakers(&_L2Staking.CallOpts, staker)
}

// Stakers is a free data retrieval call binding the contract method 0x9168ae72.
//
// Solidity: function stakers(address staker) view returns(address addr, bytes32 tmKey, bytes blsKey)
func (_L2Staking *L2StakingCallerSession) Stakers(staker common.Address) (struct {
	Addr   common.Address
	TmKey  [32]byte
	BlsKey []byte
}, error) {
	return _L2Staking.Contract.Stakers(&_L2Staking.CallOpts, staker)
}

// UndelegateLockEpochs is a free data retrieval call binding the contract method 0x12a3e947.
//
// Solidity: function undelegateLockEpochs() view returns(uint256)
func (_L2Staking *L2StakingCaller) UndelegateLockEpochs(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _L2Staking.contract.Call(opts, &out, "undelegateLockEpochs")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// UndelegateLockEpochs is a free data retrieval call binding the contract method 0x12a3e947.
//
// Solidity: function undelegateLockEpochs() view returns(uint256)
func (_L2Staking *L2StakingSession) UndelegateLockEpochs() (*big.Int, error) {
	return _L2Staking.Contract.UndelegateLockEpochs(&_L2Staking.CallOpts)
}

// UndelegateLockEpochs is a free data retrieval call binding the contract method 0x12a3e947.
//
// Solidity: function undelegateLockEpochs() view returns(uint256)
func (_L2Staking *L2StakingCallerSession) UndelegateLockEpochs() (*big.Int, error) {
	return _L2Staking.Contract.UndelegateLockEpochs(&_L2Staking.CallOpts)
}

// Undelegations is a free data retrieval call binding the contract method 0x0f3b7059.
//
// Solidity: function undelegations(address delegator, uint256 ) view returns(address delegatee, uint256 amount, uint256 unlockEpoch)
func (_L2Staking *L2StakingCaller) Undelegations(opts *bind.CallOpts, delegator common.Address, arg1 *big.Int) (struct {
	Delegatee   common.Address
	Amount      *big.Int
	UnlockEpoch *big.Int
}, error) {
	var out []interface{}
	err := _L2Staking.contract.Call(opts, &out, "undelegations", delegator, arg1)

	outstruct := new(struct {
		Delegatee   common.Address
		Amount      *big.Int
		UnlockEpoch *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Delegatee = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.Amount = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.UnlockEpoch = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// Undelegations is a free data retrieval call binding the contract method 0x0f3b7059.
//
// Solidity: function undelegations(address delegator, uint256 ) view returns(address delegatee, uint256 amount, uint256 unlockEpoch)
func (_L2Staking *L2StakingSession) Undelegations(delegator common.Address, arg1 *big.Int) (struct {
	Delegatee   common.Address
	Amount      *big.Int
	UnlockEpoch *big.Int
}, error) {
	return _L2Staking.Contract.Undelegations(&_L2Staking.CallOpts, delegator, arg1)
}

// Undelegations is a free data retrieval call binding the contract method 0x0f3b7059.
//
// Solidity: function undelegations(address delegator, uint256 ) view returns(address delegatee, uint256 amount, uint256 unlockEpoch)
func (_L2Staking *L2StakingCallerSession) Undelegations(delegator common.Address, arg1 *big.Int) (struct {
	Delegatee   common.Address
	Amount      *big.Int
	UnlockEpoch *big.Int
}, error) {
	return _L2Staking.Contract.Undelegations(&_L2Staking.CallOpts, delegator, arg1)
}

// AddStaker is a paid mutator transaction binding the contract method 0x6d454d51.
//
// Solidity: function addStaker((address,bytes32,bytes) add) returns()
func (_L2Staking *L2StakingTransactor) AddStaker(opts *bind.TransactOpts, add TypesStakerInfo) (*types.Transaction, error) {
	return _L2Staking.contract.Transact(opts, "addStaker", add)
}

// AddStaker is a paid mutator transaction binding the contract method 0x6d454d51.
//
// Solidity: function addStaker((address,bytes32,bytes) add) returns()
func (_L2Staking *L2StakingSession) AddStaker(add TypesStakerInfo) (*types.Transaction, error) {
	return _L2Staking.Contract.AddStaker(&_L2Staking.TransactOpts, add)
}

// AddStaker is a paid mutator transaction binding the contract method 0x6d454d51.
//
// Solidity: function addStaker((address,bytes32,bytes) add) returns()
func (_L2Staking *L2StakingTransactorSession) AddStaker(add TypesStakerInfo) (*types.Transaction, error) {
	return _L2Staking.Contract.AddStaker(&_L2Staking.TransactOpts, add)
}

// ClaimCommission is a paid mutator transaction binding the contract method 0x8eca493a.
//
// Solidity: function claimCommission(uint256 targetEpochIndex) returns()
func (_L2Staking *L2StakingTransactor) ClaimCommission(opts *bind.TransactOpts, targetEpochIndex *big.Int) (*types.Transaction, error) {
	return _L2Staking.contract.Transact(opts, "claimCommission", targetEpochIndex)
}

// ClaimCommission is a paid mutator transaction binding the contract method 0x8eca493a.
//
// Solidity: function claimCommission(uint256 targetEpochIndex) returns()
func (_L2Staking *L2StakingSession) ClaimCommission(targetEpochIndex *big.Int) (*types.Transaction, error) {
	return _L2Staking.Contract.ClaimCommission(&_L2Staking.TransactOpts, targetEpochIndex)
}

// ClaimCommission is a paid mutator transaction binding the contract method 0x8eca493a.
//
// Solidity: function claimCommission(uint256 targetEpochIndex) returns()
func (_L2Staking *L2StakingTransactorSession) ClaimCommission(targetEpochIndex *big.Int) (*types.Transaction, error) {
	return _L2Staking.Contract.ClaimCommission(&_L2Staking.TransactOpts, targetEpochIndex)
}

// ClaimReward is a paid mutator transaction binding the contract method 0x174e31c4.
//
// Solidity: function claimReward(address delegatee, uint256 targetEpochIndex) returns()
func (_L2Staking *L2StakingTransactor) ClaimReward(opts *bind.TransactOpts, delegatee common.Address, targetEpochIndex *big.Int) (*types.Transaction, error) {
	return _L2Staking.contract.Transact(opts, "claimReward", delegatee, targetEpochIndex)
}

// ClaimReward is a paid mutator transaction binding the contract method 0x174e31c4.
//
// Solidity: function claimReward(address delegatee, uint256 targetEpochIndex) returns()
func (_L2Staking *L2StakingSession) ClaimReward(delegatee common.Address, targetEpochIndex *big.Int) (*types.Transaction, error) {
	return _L2Staking.Contract.ClaimReward(&_L2Staking.TransactOpts, delegatee, targetEpochIndex)
}

// ClaimReward is a paid mutator transaction binding the contract method 0x174e31c4.
//
// Solidity: function claimReward(address delegatee, uint256 targetEpochIndex) returns()
func (_L2Staking *L2StakingTransactorSession) ClaimReward(delegatee common.Address, targetEpochIndex *big.Int) (*types.Transaction, error) {
	return _L2Staking.Contract.ClaimReward(&_L2Staking.TransactOpts, delegatee, targetEpochIndex)
}

// ClaimUndelegation is a paid mutator transaction binding the contract method 0xe10911b1.
//
// Solidity: function claimUndelegation() returns()
func (_L2Staking *L2StakingTransactor) ClaimUndelegation(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _L2Staking.contract.Transact(opts, "claimUndelegation")
}

// ClaimUndelegation is a paid mutator transaction binding the contract method 0xe10911b1.
//
// Solidity: function claimUndelegation() returns()
func (_L2Staking *L2StakingSession) ClaimUndelegation() (*types.Transaction, error) {
	return _L2Staking.Contract.ClaimUndelegation(&_L2Staking.TransactOpts)
}

// ClaimUndelegation is a paid mutator transaction binding the contract method 0xe10911b1.
//
// Solidity: function claimUndelegation() returns()
func (_L2Staking *L2StakingTransactorSession) ClaimUndelegation() (*types.Transaction, error) {
	return _L2Staking.Contract.ClaimUndelegation(&_L2Staking.TransactOpts)
}

// DelegateStake is a paid mutator transaction binding the contract method 0x3c323a1b.
//
// Solidity: function delegateStake(address delegatee, uint256 amount) returns()
func (_L2Staking *L2StakingTransactor) DelegateStake(opts *bind.TransactOpts, delegatee common.Address, amount *big.Int) (*types.Transaction, error) {
	return _L2Staking.contract.Transact(opts, "delegateStake", delegatee, amount)
}

// DelegateStake is a paid mutator transaction binding the contract method 0x3c323a1b.
//
// Solidity: function delegateStake(address delegatee, uint256 amount) returns()
func (_L2Staking *L2StakingSession) DelegateStake(delegatee common.Address, amount *big.Int) (*types.Transaction, error) {
	return _L2Staking.Contract.DelegateStake(&_L2Staking.TransactOpts, delegatee, amount)
}

// DelegateStake is a paid mutator transaction binding the contract method 0x3c323a1b.
//
// Solidity: function delegateStake(address delegatee, uint256 amount) returns()
func (_L2Staking *L2StakingTransactorSession) DelegateStake(delegatee common.Address, amount *big.Int) (*types.Transaction, error) {
	return _L2Staking.Contract.DelegateStake(&_L2Staking.TransactOpts, delegatee, amount)
}

// Initialize is a paid mutator transaction binding the contract method 0x439162b5.
//
// Solidity: function initialize(address _owner, uint256 _sequencersMaxSize, uint256 _undelegateLockEpochs, uint256 _rewardStartTime, (address,bytes32,bytes)[] _stakers) returns()
func (_L2Staking *L2StakingTransactor) Initialize(opts *bind.TransactOpts, _owner common.Address, _sequencersMaxSize *big.Int, _undelegateLockEpochs *big.Int, _rewardStartTime *big.Int, _stakers []TypesStakerInfo) (*types.Transaction, error) {
	return _L2Staking.contract.Transact(opts, "initialize", _owner, _sequencersMaxSize, _undelegateLockEpochs, _rewardStartTime, _stakers)
}

// Initialize is a paid mutator transaction binding the contract method 0x439162b5.
//
// Solidity: function initialize(address _owner, uint256 _sequencersMaxSize, uint256 _undelegateLockEpochs, uint256 _rewardStartTime, (address,bytes32,bytes)[] _stakers) returns()
func (_L2Staking *L2StakingSession) Initialize(_owner common.Address, _sequencersMaxSize *big.Int, _undelegateLockEpochs *big.Int, _rewardStartTime *big.Int, _stakers []TypesStakerInfo) (*types.Transaction, error) {
	return _L2Staking.Contract.Initialize(&_L2Staking.TransactOpts, _owner, _sequencersMaxSize, _undelegateLockEpochs, _rewardStartTime, _stakers)
}

// Initialize is a paid mutator transaction binding the contract method 0x439162b5.
//
// Solidity: function initialize(address _owner, uint256 _sequencersMaxSize, uint256 _undelegateLockEpochs, uint256 _rewardStartTime, (address,bytes32,bytes)[] _stakers) returns()
func (_L2Staking *L2StakingTransactorSession) Initialize(_owner common.Address, _sequencersMaxSize *big.Int, _undelegateLockEpochs *big.Int, _rewardStartTime *big.Int, _stakers []TypesStakerInfo) (*types.Transaction, error) {
	return _L2Staking.Contract.Initialize(&_L2Staking.TransactOpts, _owner, _sequencersMaxSize, _undelegateLockEpochs, _rewardStartTime, _stakers)
}

// RemoveStakers is a paid mutator transaction binding the contract method 0x0be67fcc.
//
// Solidity: function removeStakers(address[] remove) returns()
func (_L2Staking *L2StakingTransactor) RemoveStakers(opts *bind.TransactOpts, remove []common.Address) (*types.Transaction, error) {
	return _L2Staking.contract.Transact(opts, "removeStakers", remove)
}

// RemoveStakers is a paid mutator transaction binding the contract method 0x0be67fcc.
//
// Solidity: function removeStakers(address[] remove) returns()
func (_L2Staking *L2StakingSession) RemoveStakers(remove []common.Address) (*types.Transaction, error) {
	return _L2Staking.Contract.RemoveStakers(&_L2Staking.TransactOpts, remove)
}

// RemoveStakers is a paid mutator transaction binding the contract method 0x0be67fcc.
//
// Solidity: function removeStakers(address[] remove) returns()
func (_L2Staking *L2StakingTransactorSession) RemoveStakers(remove []common.Address) (*types.Transaction, error) {
	return _L2Staking.Contract.RemoveStakers(&_L2Staking.TransactOpts, remove)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_L2Staking *L2StakingTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _L2Staking.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_L2Staking *L2StakingSession) RenounceOwnership() (*types.Transaction, error) {
	return _L2Staking.Contract.RenounceOwnership(&_L2Staking.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_L2Staking *L2StakingTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _L2Staking.Contract.RenounceOwnership(&_L2Staking.TransactOpts)
}

// SetCommissionRate is a paid mutator transaction binding the contract method 0x19fac8fd.
//
// Solidity: function setCommissionRate(uint256 commission) returns()
func (_L2Staking *L2StakingTransactor) SetCommissionRate(opts *bind.TransactOpts, commission *big.Int) (*types.Transaction, error) {
	return _L2Staking.contract.Transact(opts, "setCommissionRate", commission)
}

// SetCommissionRate is a paid mutator transaction binding the contract method 0x19fac8fd.
//
// Solidity: function setCommissionRate(uint256 commission) returns()
func (_L2Staking *L2StakingSession) SetCommissionRate(commission *big.Int) (*types.Transaction, error) {
	return _L2Staking.Contract.SetCommissionRate(&_L2Staking.TransactOpts, commission)
}

// SetCommissionRate is a paid mutator transaction binding the contract method 0x19fac8fd.
//
// Solidity: function setCommissionRate(uint256 commission) returns()
func (_L2Staking *L2StakingTransactorSession) SetCommissionRate(commission *big.Int) (*types.Transaction, error) {
	return _L2Staking.Contract.SetCommissionRate(&_L2Staking.TransactOpts, commission)
}

// StartReward is a paid mutator transaction binding the contract method 0x746c8ae1.
//
// Solidity: function startReward() returns()
func (_L2Staking *L2StakingTransactor) StartReward(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _L2Staking.contract.Transact(opts, "startReward")
}

// StartReward is a paid mutator transaction binding the contract method 0x746c8ae1.
//
// Solidity: function startReward() returns()
func (_L2Staking *L2StakingSession) StartReward() (*types.Transaction, error) {
	return _L2Staking.Contract.StartReward(&_L2Staking.TransactOpts)
}

// StartReward is a paid mutator transaction binding the contract method 0x746c8ae1.
//
// Solidity: function startReward() returns()
func (_L2Staking *L2StakingTransactorSession) StartReward() (*types.Transaction, error) {
	return _L2Staking.Contract.StartReward(&_L2Staking.TransactOpts)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_L2Staking *L2StakingTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _L2Staking.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_L2Staking *L2StakingSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _L2Staking.Contract.TransferOwnership(&_L2Staking.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_L2Staking *L2StakingTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _L2Staking.Contract.TransferOwnership(&_L2Staking.TransactOpts, newOwner)
}

// UndelegateStake is a paid mutator transaction binding the contract method 0x3385ccc2.
//
// Solidity: function undelegateStake(address delegatee) returns()
func (_L2Staking *L2StakingTransactor) UndelegateStake(opts *bind.TransactOpts, delegatee common.Address) (*types.Transaction, error) {
	return _L2Staking.contract.Transact(opts, "undelegateStake", delegatee)
}

// UndelegateStake is a paid mutator transaction binding the contract method 0x3385ccc2.
//
// Solidity: function undelegateStake(address delegatee) returns()
func (_L2Staking *L2StakingSession) UndelegateStake(delegatee common.Address) (*types.Transaction, error) {
	return _L2Staking.Contract.UndelegateStake(&_L2Staking.TransactOpts, delegatee)
}

// UndelegateStake is a paid mutator transaction binding the contract method 0x3385ccc2.
//
// Solidity: function undelegateStake(address delegatee) returns()
func (_L2Staking *L2StakingTransactorSession) UndelegateStake(delegatee common.Address) (*types.Transaction, error) {
	return _L2Staking.Contract.UndelegateStake(&_L2Staking.TransactOpts, delegatee)
}

// UpdateRewardStartTime is a paid mutator transaction binding the contract method 0x40b5c837.
//
// Solidity: function updateRewardStartTime(uint256 _rewardStartTime) returns()
func (_L2Staking *L2StakingTransactor) UpdateRewardStartTime(opts *bind.TransactOpts, _rewardStartTime *big.Int) (*types.Transaction, error) {
	return _L2Staking.contract.Transact(opts, "updateRewardStartTime", _rewardStartTime)
}

// UpdateRewardStartTime is a paid mutator transaction binding the contract method 0x40b5c837.
//
// Solidity: function updateRewardStartTime(uint256 _rewardStartTime) returns()
func (_L2Staking *L2StakingSession) UpdateRewardStartTime(_rewardStartTime *big.Int) (*types.Transaction, error) {
	return _L2Staking.Contract.UpdateRewardStartTime(&_L2Staking.TransactOpts, _rewardStartTime)
}

// UpdateRewardStartTime is a paid mutator transaction binding the contract method 0x40b5c837.
//
// Solidity: function updateRewardStartTime(uint256 _rewardStartTime) returns()
func (_L2Staking *L2StakingTransactorSession) UpdateRewardStartTime(_rewardStartTime *big.Int) (*types.Transaction, error) {
	return _L2Staking.Contract.UpdateRewardStartTime(&_L2Staking.TransactOpts, _rewardStartTime)
}

// UpdateSequencerSetMaxSize is a paid mutator transaction binding the contract method 0x0eb573af.
//
// Solidity: function updateSequencerSetMaxSize(uint256 _sequencerSetMaxSize) returns()
func (_L2Staking *L2StakingTransactor) UpdateSequencerSetMaxSize(opts *bind.TransactOpts, _sequencerSetMaxSize *big.Int) (*types.Transaction, error) {
	return _L2Staking.contract.Transact(opts, "updateSequencerSetMaxSize", _sequencerSetMaxSize)
}

// UpdateSequencerSetMaxSize is a paid mutator transaction binding the contract method 0x0eb573af.
//
// Solidity: function updateSequencerSetMaxSize(uint256 _sequencerSetMaxSize) returns()
func (_L2Staking *L2StakingSession) UpdateSequencerSetMaxSize(_sequencerSetMaxSize *big.Int) (*types.Transaction, error) {
	return _L2Staking.Contract.UpdateSequencerSetMaxSize(&_L2Staking.TransactOpts, _sequencerSetMaxSize)
}

// UpdateSequencerSetMaxSize is a paid mutator transaction binding the contract method 0x0eb573af.
//
// Solidity: function updateSequencerSetMaxSize(uint256 _sequencerSetMaxSize) returns()
func (_L2Staking *L2StakingTransactorSession) UpdateSequencerSetMaxSize(_sequencerSetMaxSize *big.Int) (*types.Transaction, error) {
	return _L2Staking.Contract.UpdateSequencerSetMaxSize(&_L2Staking.TransactOpts, _sequencerSetMaxSize)
}

// L2StakingCommissionUpdatedIterator is returned from FilterCommissionUpdated and is used to iterate over the raw logs and unpacked data for CommissionUpdated events raised by the L2Staking contract.
type L2StakingCommissionUpdatedIterator struct {
	Event *L2StakingCommissionUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *L2StakingCommissionUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(L2StakingCommissionUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(L2StakingCommissionUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *L2StakingCommissionUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *L2StakingCommissionUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// L2StakingCommissionUpdated represents a CommissionUpdated event raised by the L2Staking contract.
type L2StakingCommissionUpdated struct {
	Staker         common.Address
	Percentage     *big.Int
	EpochEffective *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterCommissionUpdated is a free log retrieval operation binding the contract event 0x6e500db30ce535d38852e318f333e9be41a3fec6c65d234ebb06203c896db9a5.
//
// Solidity: event CommissionUpdated(address indexed staker, uint256 percentage, uint256 epochEffective)
func (_L2Staking *L2StakingFilterer) FilterCommissionUpdated(opts *bind.FilterOpts, staker []common.Address) (*L2StakingCommissionUpdatedIterator, error) {

	var stakerRule []interface{}
	for _, stakerItem := range staker {
		stakerRule = append(stakerRule, stakerItem)
	}

	logs, sub, err := _L2Staking.contract.FilterLogs(opts, "CommissionUpdated", stakerRule)
	if err != nil {
		return nil, err
	}
	return &L2StakingCommissionUpdatedIterator{contract: _L2Staking.contract, event: "CommissionUpdated", logs: logs, sub: sub}, nil
}

// WatchCommissionUpdated is a free log subscription operation binding the contract event 0x6e500db30ce535d38852e318f333e9be41a3fec6c65d234ebb06203c896db9a5.
//
// Solidity: event CommissionUpdated(address indexed staker, uint256 percentage, uint256 epochEffective)
func (_L2Staking *L2StakingFilterer) WatchCommissionUpdated(opts *bind.WatchOpts, sink chan<- *L2StakingCommissionUpdated, staker []common.Address) (event.Subscription, error) {

	var stakerRule []interface{}
	for _, stakerItem := range staker {
		stakerRule = append(stakerRule, stakerItem)
	}

	logs, sub, err := _L2Staking.contract.WatchLogs(opts, "CommissionUpdated", stakerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(L2StakingCommissionUpdated)
				if err := _L2Staking.contract.UnpackLog(event, "CommissionUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCommissionUpdated is a log parse operation binding the contract event 0x6e500db30ce535d38852e318f333e9be41a3fec6c65d234ebb06203c896db9a5.
//
// Solidity: event CommissionUpdated(address indexed staker, uint256 percentage, uint256 epochEffective)
func (_L2Staking *L2StakingFilterer) ParseCommissionUpdated(log types.Log) (*L2StakingCommissionUpdated, error) {
	event := new(L2StakingCommissionUpdated)
	if err := _L2Staking.contract.UnpackLog(event, "CommissionUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// L2StakingDelegatedIterator is returned from FilterDelegated and is used to iterate over the raw logs and unpacked data for Delegated events raised by the L2Staking contract.
type L2StakingDelegatedIterator struct {
	Event *L2StakingDelegated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *L2StakingDelegatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(L2StakingDelegated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(L2StakingDelegated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *L2StakingDelegatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *L2StakingDelegatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// L2StakingDelegated represents a Delegated event raised by the L2Staking contract.
type L2StakingDelegated struct {
	Delegatee      common.Address
	Delegator      common.Address
	Amount         *big.Int
	StakeAmount    *big.Int
	EffectiveEpoch *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterDelegated is a free log retrieval operation binding the contract event 0xc4ad67bad2c1f682946a406d840f1b273f5cd5a53fcc1a03d078d92bfa2e07d0.
//
// Solidity: event Delegated(address indexed delegatee, address indexed delegator, uint256 amount, uint256 stakeAmount, uint256 effectiveEpoch)
func (_L2Staking *L2StakingFilterer) FilterDelegated(opts *bind.FilterOpts, delegatee []common.Address, delegator []common.Address) (*L2StakingDelegatedIterator, error) {

	var delegateeRule []interface{}
	for _, delegateeItem := range delegatee {
		delegateeRule = append(delegateeRule, delegateeItem)
	}
	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}

	logs, sub, err := _L2Staking.contract.FilterLogs(opts, "Delegated", delegateeRule, delegatorRule)
	if err != nil {
		return nil, err
	}
	return &L2StakingDelegatedIterator{contract: _L2Staking.contract, event: "Delegated", logs: logs, sub: sub}, nil
}

// WatchDelegated is a free log subscription operation binding the contract event 0xc4ad67bad2c1f682946a406d840f1b273f5cd5a53fcc1a03d078d92bfa2e07d0.
//
// Solidity: event Delegated(address indexed delegatee, address indexed delegator, uint256 amount, uint256 stakeAmount, uint256 effectiveEpoch)
func (_L2Staking *L2StakingFilterer) WatchDelegated(opts *bind.WatchOpts, sink chan<- *L2StakingDelegated, delegatee []common.Address, delegator []common.Address) (event.Subscription, error) {

	var delegateeRule []interface{}
	for _, delegateeItem := range delegatee {
		delegateeRule = append(delegateeRule, delegateeItem)
	}
	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}

	logs, sub, err := _L2Staking.contract.WatchLogs(opts, "Delegated", delegateeRule, delegatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(L2StakingDelegated)
				if err := _L2Staking.contract.UnpackLog(event, "Delegated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDelegated is a log parse operation binding the contract event 0xc4ad67bad2c1f682946a406d840f1b273f5cd5a53fcc1a03d078d92bfa2e07d0.
//
// Solidity: event Delegated(address indexed delegatee, address indexed delegator, uint256 amount, uint256 stakeAmount, uint256 effectiveEpoch)
func (_L2Staking *L2StakingFilterer) ParseDelegated(log types.Log) (*L2StakingDelegated, error) {
	event := new(L2StakingDelegated)
	if err := _L2Staking.contract.UnpackLog(event, "Delegated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// L2StakingInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the L2Staking contract.
type L2StakingInitializedIterator struct {
	Event *L2StakingInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *L2StakingInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(L2StakingInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(L2StakingInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *L2StakingInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *L2StakingInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// L2StakingInitialized represents a Initialized event raised by the L2Staking contract.
type L2StakingInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_L2Staking *L2StakingFilterer) FilterInitialized(opts *bind.FilterOpts) (*L2StakingInitializedIterator, error) {

	logs, sub, err := _L2Staking.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &L2StakingInitializedIterator{contract: _L2Staking.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_L2Staking *L2StakingFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *L2StakingInitialized) (event.Subscription, error) {

	logs, sub, err := _L2Staking.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(L2StakingInitialized)
				if err := _L2Staking.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_L2Staking *L2StakingFilterer) ParseInitialized(log types.Log) (*L2StakingInitialized, error) {
	event := new(L2StakingInitialized)
	if err := _L2Staking.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// L2StakingOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the L2Staking contract.
type L2StakingOwnershipTransferredIterator struct {
	Event *L2StakingOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *L2StakingOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(L2StakingOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(L2StakingOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *L2StakingOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *L2StakingOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// L2StakingOwnershipTransferred represents a OwnershipTransferred event raised by the L2Staking contract.
type L2StakingOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_L2Staking *L2StakingFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*L2StakingOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _L2Staking.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &L2StakingOwnershipTransferredIterator{contract: _L2Staking.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_L2Staking *L2StakingFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *L2StakingOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _L2Staking.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(L2StakingOwnershipTransferred)
				if err := _L2Staking.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_L2Staking *L2StakingFilterer) ParseOwnershipTransferred(log types.Log) (*L2StakingOwnershipTransferred, error) {
	event := new(L2StakingOwnershipTransferred)
	if err := _L2Staking.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// L2StakingRewardStartTimeUpdatedIterator is returned from FilterRewardStartTimeUpdated and is used to iterate over the raw logs and unpacked data for RewardStartTimeUpdated events raised by the L2Staking contract.
type L2StakingRewardStartTimeUpdatedIterator struct {
	Event *L2StakingRewardStartTimeUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *L2StakingRewardStartTimeUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(L2StakingRewardStartTimeUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(L2StakingRewardStartTimeUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *L2StakingRewardStartTimeUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *L2StakingRewardStartTimeUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// L2StakingRewardStartTimeUpdated represents a RewardStartTimeUpdated event raised by the L2Staking contract.
type L2StakingRewardStartTimeUpdated struct {
	OldTime *big.Int
	NewTime *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRewardStartTimeUpdated is a free log retrieval operation binding the contract event 0x91c38708087fb4ba51bd0e6a106cc1fbaf340479a2e81d18f2341e8c78f97555.
//
// Solidity: event RewardStartTimeUpdated(uint256 oldTime, uint256 newTime)
func (_L2Staking *L2StakingFilterer) FilterRewardStartTimeUpdated(opts *bind.FilterOpts) (*L2StakingRewardStartTimeUpdatedIterator, error) {

	logs, sub, err := _L2Staking.contract.FilterLogs(opts, "RewardStartTimeUpdated")
	if err != nil {
		return nil, err
	}
	return &L2StakingRewardStartTimeUpdatedIterator{contract: _L2Staking.contract, event: "RewardStartTimeUpdated", logs: logs, sub: sub}, nil
}

// WatchRewardStartTimeUpdated is a free log subscription operation binding the contract event 0x91c38708087fb4ba51bd0e6a106cc1fbaf340479a2e81d18f2341e8c78f97555.
//
// Solidity: event RewardStartTimeUpdated(uint256 oldTime, uint256 newTime)
func (_L2Staking *L2StakingFilterer) WatchRewardStartTimeUpdated(opts *bind.WatchOpts, sink chan<- *L2StakingRewardStartTimeUpdated) (event.Subscription, error) {

	logs, sub, err := _L2Staking.contract.WatchLogs(opts, "RewardStartTimeUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(L2StakingRewardStartTimeUpdated)
				if err := _L2Staking.contract.UnpackLog(event, "RewardStartTimeUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRewardStartTimeUpdated is a log parse operation binding the contract event 0x91c38708087fb4ba51bd0e6a106cc1fbaf340479a2e81d18f2341e8c78f97555.
//
// Solidity: event RewardStartTimeUpdated(uint256 oldTime, uint256 newTime)
func (_L2Staking *L2StakingFilterer) ParseRewardStartTimeUpdated(log types.Log) (*L2StakingRewardStartTimeUpdated, error) {
	event := new(L2StakingRewardStartTimeUpdated)
	if err := _L2Staking.contract.UnpackLog(event, "RewardStartTimeUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// L2StakingSequencerSetMaxSizeUpdatedIterator is returned from FilterSequencerSetMaxSizeUpdated and is used to iterate over the raw logs and unpacked data for SequencerSetMaxSizeUpdated events raised by the L2Staking contract.
type L2StakingSequencerSetMaxSizeUpdatedIterator struct {
	Event *L2StakingSequencerSetMaxSizeUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *L2StakingSequencerSetMaxSizeUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(L2StakingSequencerSetMaxSizeUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(L2StakingSequencerSetMaxSizeUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *L2StakingSequencerSetMaxSizeUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *L2StakingSequencerSetMaxSizeUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// L2StakingSequencerSetMaxSizeUpdated represents a SequencerSetMaxSizeUpdated event raised by the L2Staking contract.
type L2StakingSequencerSetMaxSizeUpdated struct {
	OldSize *big.Int
	NewSize *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterSequencerSetMaxSizeUpdated is a free log retrieval operation binding the contract event 0x98b982a120d9be7d9c68d85a1aed8158d1d52e517175bfb3eb4280692f19b1ed.
//
// Solidity: event SequencerSetMaxSizeUpdated(uint256 oldSize, uint256 newSize)
func (_L2Staking *L2StakingFilterer) FilterSequencerSetMaxSizeUpdated(opts *bind.FilterOpts) (*L2StakingSequencerSetMaxSizeUpdatedIterator, error) {

	logs, sub, err := _L2Staking.contract.FilterLogs(opts, "SequencerSetMaxSizeUpdated")
	if err != nil {
		return nil, err
	}
	return &L2StakingSequencerSetMaxSizeUpdatedIterator{contract: _L2Staking.contract, event: "SequencerSetMaxSizeUpdated", logs: logs, sub: sub}, nil
}

// WatchSequencerSetMaxSizeUpdated is a free log subscription operation binding the contract event 0x98b982a120d9be7d9c68d85a1aed8158d1d52e517175bfb3eb4280692f19b1ed.
//
// Solidity: event SequencerSetMaxSizeUpdated(uint256 oldSize, uint256 newSize)
func (_L2Staking *L2StakingFilterer) WatchSequencerSetMaxSizeUpdated(opts *bind.WatchOpts, sink chan<- *L2StakingSequencerSetMaxSizeUpdated) (event.Subscription, error) {

	logs, sub, err := _L2Staking.contract.WatchLogs(opts, "SequencerSetMaxSizeUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(L2StakingSequencerSetMaxSizeUpdated)
				if err := _L2Staking.contract.UnpackLog(event, "SequencerSetMaxSizeUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSequencerSetMaxSizeUpdated is a log parse operation binding the contract event 0x98b982a120d9be7d9c68d85a1aed8158d1d52e517175bfb3eb4280692f19b1ed.
//
// Solidity: event SequencerSetMaxSizeUpdated(uint256 oldSize, uint256 newSize)
func (_L2Staking *L2StakingFilterer) ParseSequencerSetMaxSizeUpdated(log types.Log) (*L2StakingSequencerSetMaxSizeUpdated, error) {
	event := new(L2StakingSequencerSetMaxSizeUpdated)
	if err := _L2Staking.contract.UnpackLog(event, "SequencerSetMaxSizeUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// L2StakingStakerAddedIterator is returned from FilterStakerAdded and is used to iterate over the raw logs and unpacked data for StakerAdded events raised by the L2Staking contract.
type L2StakingStakerAddedIterator struct {
	Event *L2StakingStakerAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *L2StakingStakerAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(L2StakingStakerAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(L2StakingStakerAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *L2StakingStakerAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *L2StakingStakerAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// L2StakingStakerAdded represents a StakerAdded event raised by the L2Staking contract.
type L2StakingStakerAdded struct {
	Addr   common.Address
	TmKey  [32]byte
	BlsKey []byte
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterStakerAdded is a free log retrieval operation binding the contract event 0x058ecb29c230cd5df283c89e996187ed521393fe4546cd1b097921c4b2de293d.
//
// Solidity: event StakerAdded(address indexed addr, bytes32 tmKey, bytes blsKey)
func (_L2Staking *L2StakingFilterer) FilterStakerAdded(opts *bind.FilterOpts, addr []common.Address) (*L2StakingStakerAddedIterator, error) {

	var addrRule []interface{}
	for _, addrItem := range addr {
		addrRule = append(addrRule, addrItem)
	}

	logs, sub, err := _L2Staking.contract.FilterLogs(opts, "StakerAdded", addrRule)
	if err != nil {
		return nil, err
	}
	return &L2StakingStakerAddedIterator{contract: _L2Staking.contract, event: "StakerAdded", logs: logs, sub: sub}, nil
}

// WatchStakerAdded is a free log subscription operation binding the contract event 0x058ecb29c230cd5df283c89e996187ed521393fe4546cd1b097921c4b2de293d.
//
// Solidity: event StakerAdded(address indexed addr, bytes32 tmKey, bytes blsKey)
func (_L2Staking *L2StakingFilterer) WatchStakerAdded(opts *bind.WatchOpts, sink chan<- *L2StakingStakerAdded, addr []common.Address) (event.Subscription, error) {

	var addrRule []interface{}
	for _, addrItem := range addr {
		addrRule = append(addrRule, addrItem)
	}

	logs, sub, err := _L2Staking.contract.WatchLogs(opts, "StakerAdded", addrRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(L2StakingStakerAdded)
				if err := _L2Staking.contract.UnpackLog(event, "StakerAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStakerAdded is a log parse operation binding the contract event 0x058ecb29c230cd5df283c89e996187ed521393fe4546cd1b097921c4b2de293d.
//
// Solidity: event StakerAdded(address indexed addr, bytes32 tmKey, bytes blsKey)
func (_L2Staking *L2StakingFilterer) ParseStakerAdded(log types.Log) (*L2StakingStakerAdded, error) {
	event := new(L2StakingStakerAdded)
	if err := _L2Staking.contract.UnpackLog(event, "StakerAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// L2StakingStakerRemovedIterator is returned from FilterStakerRemoved and is used to iterate over the raw logs and unpacked data for StakerRemoved events raised by the L2Staking contract.
type L2StakingStakerRemovedIterator struct {
	Event *L2StakingStakerRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *L2StakingStakerRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(L2StakingStakerRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(L2StakingStakerRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *L2StakingStakerRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *L2StakingStakerRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// L2StakingStakerRemoved represents a StakerRemoved event raised by the L2Staking contract.
type L2StakingStakerRemoved struct {
	StakerAddresses []common.Address
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterStakerRemoved is a free log retrieval operation binding the contract event 0x3511bf213f9290ba907e91e12a43e8471251e1879580ae5509292a3514c23f61.
//
// Solidity: event StakerRemoved(address[] stakerAddresses)
func (_L2Staking *L2StakingFilterer) FilterStakerRemoved(opts *bind.FilterOpts) (*L2StakingStakerRemovedIterator, error) {

	logs, sub, err := _L2Staking.contract.FilterLogs(opts, "StakerRemoved")
	if err != nil {
		return nil, err
	}
	return &L2StakingStakerRemovedIterator{contract: _L2Staking.contract, event: "StakerRemoved", logs: logs, sub: sub}, nil
}

// WatchStakerRemoved is a free log subscription operation binding the contract event 0x3511bf213f9290ba907e91e12a43e8471251e1879580ae5509292a3514c23f61.
//
// Solidity: event StakerRemoved(address[] stakerAddresses)
func (_L2Staking *L2StakingFilterer) WatchStakerRemoved(opts *bind.WatchOpts, sink chan<- *L2StakingStakerRemoved) (event.Subscription, error) {

	logs, sub, err := _L2Staking.contract.WatchLogs(opts, "StakerRemoved")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(L2StakingStakerRemoved)
				if err := _L2Staking.contract.UnpackLog(event, "StakerRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStakerRemoved is a log parse operation binding the contract event 0x3511bf213f9290ba907e91e12a43e8471251e1879580ae5509292a3514c23f61.
//
// Solidity: event StakerRemoved(address[] stakerAddresses)
func (_L2Staking *L2StakingFilterer) ParseStakerRemoved(log types.Log) (*L2StakingStakerRemoved, error) {
	event := new(L2StakingStakerRemoved)
	if err := _L2Staking.contract.UnpackLog(event, "StakerRemoved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// L2StakingUndelegatedIterator is returned from FilterUndelegated and is used to iterate over the raw logs and unpacked data for Undelegated events raised by the L2Staking contract.
type L2StakingUndelegatedIterator struct {
	Event *L2StakingUndelegated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *L2StakingUndelegatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(L2StakingUndelegated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(L2StakingUndelegated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *L2StakingUndelegatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *L2StakingUndelegatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// L2StakingUndelegated represents a Undelegated event raised by the L2Staking contract.
type L2StakingUndelegated struct {
	Delegatee      common.Address
	Delegator      common.Address
	Amount         *big.Int
	EffectiveEpoch *big.Int
	UnlockEpoch    *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUndelegated is a free log retrieval operation binding the contract event 0x92039db29d8c0a1aa1433fe109c69488c8c5e51b23c9de7d303ad80c1fef778c.
//
// Solidity: event Undelegated(address indexed delegatee, address indexed delegator, uint256 amount, uint256 effectiveEpoch, uint256 unlockEpoch)
func (_L2Staking *L2StakingFilterer) FilterUndelegated(opts *bind.FilterOpts, delegatee []common.Address, delegator []common.Address) (*L2StakingUndelegatedIterator, error) {

	var delegateeRule []interface{}
	for _, delegateeItem := range delegatee {
		delegateeRule = append(delegateeRule, delegateeItem)
	}
	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}

	logs, sub, err := _L2Staking.contract.FilterLogs(opts, "Undelegated", delegateeRule, delegatorRule)
	if err != nil {
		return nil, err
	}
	return &L2StakingUndelegatedIterator{contract: _L2Staking.contract, event: "Undelegated", logs: logs, sub: sub}, nil
}

// WatchUndelegated is a free log subscription operation binding the contract event 0x92039db29d8c0a1aa1433fe109c69488c8c5e51b23c9de7d303ad80c1fef778c.
//
// Solidity: event Undelegated(address indexed delegatee, address indexed delegator, uint256 amount, uint256 effectiveEpoch, uint256 unlockEpoch)
func (_L2Staking *L2StakingFilterer) WatchUndelegated(opts *bind.WatchOpts, sink chan<- *L2StakingUndelegated, delegatee []common.Address, delegator []common.Address) (event.Subscription, error) {

	var delegateeRule []interface{}
	for _, delegateeItem := range delegatee {
		delegateeRule = append(delegateeRule, delegateeItem)
	}
	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}

	logs, sub, err := _L2Staking.contract.WatchLogs(opts, "Undelegated", delegateeRule, delegatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(L2StakingUndelegated)
				if err := _L2Staking.contract.UnpackLog(event, "Undelegated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUndelegated is a log parse operation binding the contract event 0x92039db29d8c0a1aa1433fe109c69488c8c5e51b23c9de7d303ad80c1fef778c.
//
// Solidity: event Undelegated(address indexed delegatee, address indexed delegator, uint256 amount, uint256 effectiveEpoch, uint256 unlockEpoch)
func (_L2Staking *L2StakingFilterer) ParseUndelegated(log types.Log) (*L2StakingUndelegated, error) {
	event := new(L2StakingUndelegated)
	if err := _L2Staking.contract.UnpackLog(event, "Undelegated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// L2StakingUndelegationClaimedIterator is returned from FilterUndelegationClaimed and is used to iterate over the raw logs and unpacked data for UndelegationClaimed events raised by the L2Staking contract.
type L2StakingUndelegationClaimedIterator struct {
	Event *L2StakingUndelegationClaimed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *L2StakingUndelegationClaimedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(L2StakingUndelegationClaimed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(L2StakingUndelegationClaimed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *L2StakingUndelegationClaimedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *L2StakingUndelegationClaimedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// L2StakingUndelegationClaimed represents a UndelegationClaimed event raised by the L2Staking contract.
type L2StakingUndelegationClaimed struct {
	Delegatee   common.Address
	Delegator   common.Address
	UnlockEpoch *big.Int
	Amount      *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterUndelegationClaimed is a free log retrieval operation binding the contract event 0x921046659ea3b3b3f8e8fefd2bece3121b2d929ead94c696a75beedee477fdb6.
//
// Solidity: event UndelegationClaimed(address indexed delegatee, address indexed delegator, uint256 unlockEpoch, uint256 amount)
func (_L2Staking *L2StakingFilterer) FilterUndelegationClaimed(opts *bind.FilterOpts, delegatee []common.Address, delegator []common.Address) (*L2StakingUndelegationClaimedIterator, error) {

	var delegateeRule []interface{}
	for _, delegateeItem := range delegatee {
		delegateeRule = append(delegateeRule, delegateeItem)
	}
	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}

	logs, sub, err := _L2Staking.contract.FilterLogs(opts, "UndelegationClaimed", delegateeRule, delegatorRule)
	if err != nil {
		return nil, err
	}
	return &L2StakingUndelegationClaimedIterator{contract: _L2Staking.contract, event: "UndelegationClaimed", logs: logs, sub: sub}, nil
}

// WatchUndelegationClaimed is a free log subscription operation binding the contract event 0x921046659ea3b3b3f8e8fefd2bece3121b2d929ead94c696a75beedee477fdb6.
//
// Solidity: event UndelegationClaimed(address indexed delegatee, address indexed delegator, uint256 unlockEpoch, uint256 amount)
func (_L2Staking *L2StakingFilterer) WatchUndelegationClaimed(opts *bind.WatchOpts, sink chan<- *L2StakingUndelegationClaimed, delegatee []common.Address, delegator []common.Address) (event.Subscription, error) {

	var delegateeRule []interface{}
	for _, delegateeItem := range delegatee {
		delegateeRule = append(delegateeRule, delegateeItem)
	}
	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}

	logs, sub, err := _L2Staking.contract.WatchLogs(opts, "UndelegationClaimed", delegateeRule, delegatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(L2StakingUndelegationClaimed)
				if err := _L2Staking.contract.UnpackLog(event, "UndelegationClaimed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUndelegationClaimed is a log parse operation binding the contract event 0x921046659ea3b3b3f8e8fefd2bece3121b2d929ead94c696a75beedee477fdb6.
//
// Solidity: event UndelegationClaimed(address indexed delegatee, address indexed delegator, uint256 unlockEpoch, uint256 amount)
func (_L2Staking *L2StakingFilterer) ParseUndelegationClaimed(log types.Log) (*L2StakingUndelegationClaimed, error) {
	event := new(L2StakingUndelegationClaimed)
	if err := _L2Staking.contract.UnpackLog(event, "UndelegationClaimed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
