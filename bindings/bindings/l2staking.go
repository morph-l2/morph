// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package bindings

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/scroll-tech/go-ethereum"
	"github.com/scroll-tech/go-ethereum/accounts/abi"
	"github.com/scroll-tech/go-ethereum/accounts/abi/bind"
	"github.com/scroll-tech/go-ethereum/common"
	"github.com/scroll-tech/go-ethereum/core/types"
	"github.com/scroll-tech/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// TypesStakerInfo is an auto generated low-level Go binding around an user-defined struct.
type TypesStakerInfo struct {
	Addr   common.Address
	TmKey  [32]byte
	BlsKey []byte
}

// L2StakingMetaData contains all meta data concerning the L2Staking contract.
var L2StakingMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"_otherStaking\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epochEffective\",\"type\":\"uint256\"}],\"name\":\"CommissionUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"effectiveEpoch\",\"type\":\"uint256\"}],\"name\":\"Delegated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sequencersSize\",\"type\":\"uint256\"}],\"name\":\"ParamsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardStartTime\",\"type\":\"uint256\"}],\"name\":\"RewardStartTimeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"tmKey\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"blsKey\",\"type\":\"bytes\"}],\"name\":\"StakerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"stakerAddrs\",\"type\":\"address[]\"}],\"name\":\"StakerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"effectiveEpoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ublockEpoch\",\"type\":\"uint256\"}],\"name\":\"Undelegated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UndelegationClaimed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DISTRIBUTE_CONTRACT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MESSENGER\",\"outputs\":[{\"internalType\":\"contractICrossDomainMessenger\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MORPH_TOKEN_CONTRACT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OTHER_STAKING\",\"outputs\":[{\"internalType\":\"contractStaking\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARD_EPOCH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARD_STARTED\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARD_START_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SEQUENCER_CONTRACT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SEQUENCER_MAX_SIZE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNDELEGATE_LOCK_EPOCHS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"tmKey\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"blsKey\",\"type\":\"bytes\"}],\"internalType\":\"structTypes.StakerInfo\",\"name\":\"add\",\"type\":\"tuple\"}],\"name\":\"addStaker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"candidateNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"targetEpochIndex\",\"type\":\"uint256\"}],\"name\":\"claimCommission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"targetEpochIndex\",\"type\":\"uint256\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimUndelegation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"commissions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"delegateStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"delegations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getDelegators\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_stakerAddrs\",\"type\":\"address[]\"}],\"name\":\"getStakesInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"tmKey\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"blsKey\",\"type\":\"bytes\"}],\"internalType\":\"structTypes.StakerInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_sequencersMaxSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_undelegateLockEpochs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardStartTime\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"tmKey\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"blsKey\",\"type\":\"bytes\"}],\"internalType\":\"structTypes.StakerInfo[]\",\"name\":\"_stakers\",\"type\":\"tuple[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"isStakingTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"messenger\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"remove\",\"type\":\"address[]\"}],\"name\":\"removeStakers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"commission\",\"type\":\"uint256\"}],\"name\":\"setCommissionRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakerAddrs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakerDelegations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakerRankings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"tmKey\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"blsKey\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"undelegateStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"undelegations\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockEpoch\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sequencersMaxSize\",\"type\":\"uint256\"}],\"name\":\"updateParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardStartTime\",\"type\":\"uint256\"}],\"name\":\"updateRewardStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x610140604052620151806101205234801562000019575f80fd5b50604051620046ce380380620046ce8339810160408190526200003c91620000af565b7353000000000000000000000000000000000000076080526001600160a01b031660a05273530000000000000000000000000000000000001060e05273530000000000000000000000000000000000000360c05273530000000000000000000000000000000000001161010052620000de565b5f60208284031215620000c0575f80fd5b81516001600160a01b0381168114620000d7575f80fd5b9392505050565b60805160a05160c05160e05161010051610120516144f2620001dc5f395f818161062801528181611e6a015281816120f801526129d601525f818161039b01528181610c2601528181610ccf0152818161170201528181611d930152612afc01525f81816105e60152818161331f015281816133d40152818161347b015281816136df0152818161378c015261383301525f81816104db015281816107e9015281816115e501528181611c4901528181612cb6015261316701525f81816104800152818161067f01526123fe01525f818161035e0152818161055601528181610655015281816106a9015281816123d4015261242801526144f25ff3fe608060405234801561000f575f80fd5b5060043610610283575f3560e01c8063766718081161015757806391bd43a4116100d2578063c64814dd11610088578063e10911b11161006e578063e10911b114610608578063f2fde38b14610610578063fadfa08714610623575f80fd5b8063c64814dd146105b7578063d5577141146105e1575f80fd5b8063a4bba929116100b8578063a4bba92914610578578063a574918714610585578063b5d2e0dc14610598575f80fd5b806391bd43a414610532578063927ede2d14610551575f80fd5b806384d7d1d4116101275780638e21d5fb1161010d5780638e21d5fb146104d65780638eca493a146104fd5780639168ae7214610510575f80fd5b806384d7d1d4146104a25780638da5cb5b146104c5575f80fd5b806376671808146104415780637b05afb5146104495780637ede4d4414610468578063831cfb581461047b575f80fd5b80633d9353fe116102015780635e4733e6116101b75780636d454d511161019d5780636d454d511461041e578063715018a614610431578063746c8ae114610439575f80fd5b80635e4733e6146103f557806368e76346146103fe575f80fd5b806340b5c837116101e757806340b5c837146103c65780634342062b146103d9578063439162b5146103e2575f80fd5b80633d9353fe146103965780633faa5009146103bd575f80fd5b806330158eea116102565780633b8024211161023c5780633b802421146103325780633c323a1b146103495780633cb747bf1461035c575f80fd5b806330158eea146102ff5780633385ccc21461031f575f80fd5b80630be67fcc146102875780630f3b70591461029c578063174e31c4146102d957806319fac8fd146102ec575b5f80fd5b61029a610295366004613bc6565b61064a565b005b6102af6102aa366004613c73565b610b93565b604080516001600160a01b0390941684526020840192909252908201526060015b60405180910390f35b61029a6102e7366004613c73565b610bdb565b61029a6102fa366004613c9d565b610d31565b61031261030d366004613bc6565b610e4e565b6040516102d09190613d15565b61029a61032d366004613dbb565b611069565b61033b609b5481565b6040519081526020016102d0565b61029a610357366004613c73565b61176e565b7f00000000000000000000000000000000000000000000000000000000000000005b6040516001600160a01b0390911681526020016102d0565b61037e7f000000000000000000000000000000000000000000000000000000000000000081565b61033b60985481565b61029a6103d4366004613c9d565b611e00565b61033b60995481565b61029a6103f0366004613dd6565b611f18565b61033b609a5481565b61041161040c366004613dbb565b6123a0565b6040516102d09190613e72565b61029a61042c366004613ebe565b6123c9565b61029a6126c2565b61029a6126d5565b61033b6129c5565b61033b610457366004613dbb565b609f6020525f908152604090205481565b61037e610476366004613c9d565b612a12565b61037e7f000000000000000000000000000000000000000000000000000000000000000081565b6104b56104b0366004613dbb565b612a3a565b60405190151581526020016102d0565b6033546001600160a01b031661037e565b61037e7f000000000000000000000000000000000000000000000000000000000000000081565b61029a61050b366004613c9d565b612a64565b61052361051e366004613dbb565b612b65565b6040516102d093929190613fb2565b61033b610540366004613dbb565b60a06020525f908152604090205481565b61037e7f000000000000000000000000000000000000000000000000000000000000000081565b6097546104b59060ff1681565b61029a610593366004613c9d565b612c17565b61033b6105a6366004613dbb565b609d6020525f908152604090205481565b61033b6105c5366004613fe2565b60a260209081525f928352604080842090915290825290205481565b61037e7f000000000000000000000000000000000000000000000000000000000000000081565b61029a612d45565b61029a61061e366004613dbb565b612fc4565b61033b7f000000000000000000000000000000000000000000000000000000000000000081565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614801561073257507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316636e296e456040518163ffffffff1660e01b8152600401602060405180830381865afa158015610703573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107279190614019565b6001600160a01b0316145b6107d05760405162461bcd60e51b8152602060048201526044602482018190527f5374616b696e673a2066756e6374696f6e2063616e206f6e6c79206265206361908201527f6c6c65642066726f6d20746865206f74686572207374616b696e6720636f6e7460648201527f7261637400000000000000000000000000000000000000000000000000000000608482015260a4015b60405180910390fd5b5f805b8251811015610b495760975460ff16156108b3577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630e06ede86040518163ffffffff1660e01b8152600401602060405180830381865afa158015610843573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906108679190614034565b609d5f85848151811061087c5761087c61404b565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020015f2054116108ae57600191505b6108fd565b609954609d5f8584815181106108cb576108cb61404b565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020015f2054116108fd57600191505b5f609d5f8584815181106109135761091361404b565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020015f20541115610b41575f6001609d5f8685815181106109595761095961404b565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020015f205461098b91906140a5565b90505b609c5461099d906001906140a5565b811015610a6f57609c6109b18260016140b8565b815481106109c1576109c161404b565b5f91825260209091200154609c80546001600160a01b0390921691839081106109ec576109ec61404b565b905f5260205f20015f6101000a8154816001600160a01b0302191690836001600160a01b031602179055506001609d5f609c8481548110610a2f57610a2f61404b565b5f9182526020808320909101546001600160a01b0316835282019290925260400181208054909190610a629084906140a5565b909155505060010161098e565b50609c805480610a8157610a816140cb565b600190038181905f5260205f20015f6101000a8154906001600160a01b0302191690559055609d5f848381518110610abb57610abb61404b565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020015f205f90555f60a05f858481518110610afb57610afb61404b565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020015f20541115610b41576001609b5f828254610b3b91906140a5565b90915550505b6001016107d3565b507f3511bf213f9290ba907e91e12a43e8471251e1879580ae5509292a3514c23f6182604051610b799190613e72565b60405180910390a18015610b8f57610b8f613051565b5050565b60a3602052815f5260405f208181548110610bac575f80fd5b5f9182526020909120600390910201805460018201546002909201546001600160a01b03909116935090915083565b610be36131cd565b6001600160a01b038216610c8a576040517f5cf20c7b000000000000000000000000000000000000000000000000000000008152336004820152602481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690635cf20c7b906044015f604051808303815f87803b158015610c6f575f80fd5b505af1158015610c81573d5f803e3d5ffd5b50505050610d27565b6040517f996cba680000000000000000000000000000000000000000000000000000000081526001600160a01b038381166004830152336024830152604482018390527f0000000000000000000000000000000000000000000000000000000000000000169063996cba68906064015f604051808303815f87803b158015610d10575f80fd5b505af1158015610d22573d5f803e3d5ffd5b505050505b610b8f6001606555565b335f908152609d6020526040902054610d8c5760405162461bcd60e51b815260206004820152601360248201527f6f6e6c79207374616b657220616c6c6f7765640000000000000000000000000060448201526064016107c7565b6014811115610ddd5760405162461bcd60e51b815260206004820152601260248201527f696e76616c696420636f6d6d697373696f6e000000000000000000000000000060448201526064016107c7565b335f908152609f6020526040812082905560975460ff1615610e0f57610e016129c5565b610e0c9060016140b8565b90505b604080518381526020810183905233917f6e500db30ce535d38852e318f333e9be41a3fec6c65d234ebb06203c896db9a5910160405180910390a25050565b60605f825167ffffffffffffffff811115610e6b57610e6b613b0d565b604051908082528060200260200182016040528015610eb757816020015b60408051606080820183525f808352602083015291810191909152815260200190600190039081610e895790505b5090505f5b8351811015611062576040518060600160405280609e5f878581518110610ee557610ee561404b565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020015f205f015f9054906101000a90046001600160a01b03166001600160a01b03168152602001609e5f878581518110610f4457610f4461404b565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020015f20600101548152602001609e5f878581518110610f8957610f8961404b565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020015f206002018054610fbe906140f8565b80601f0160208091040260200160405190810160405280929190818152602001828054610fea906140f8565b80156110355780601f1061100c57610100808354040283529160200191611035565b820191905f5260205f20905b81548152906001019060200180831161101857829003601f168201915b505050505081525082828151811061104f5761104f61404b565b6020908102919091010152600101610ebc565b5092915050565b6110716131cd565b61107b338261322d565b156110c85760405162461bcd60e51b815260206004820152601660248201527f756e64656c65676174696f6e20756e636c61696d65640000000000000000000060448201526064016107c7565b6001600160a01b0381165f90815260a2602090815260408083203384529091529020546111375760405162461bcd60e51b815260206004820152601660248201527f7374616b696e6720616d6f756e74206973207a65726f0000000000000000000060448201526064016107c7565b6001600160a01b0381165f908152609d602052604081205460975490159190819060ff161561119857609a5461116b6129c5565b61117591906140b8565b6111809060016140b8565b915061118a6129c5565b6111959060016140b8565b90505b82156111a2578091505b604080516060810182526001600160a01b038681168083525f81815260a26020908152858220338084528183528784208054848901908152888a018c815283875260a386528a87208054600180820183559189528789208c5160039092020180547fffffffffffffffffffffffff00000000000000000000000000000000000000001691909b16178a558251908a015551600290980197909755908452908252829055925191815260a090925292812080549293929091906112659084906140a5565b90915550506001600160a01b0385165f90815260a16020526040902061128b90336132b6565b50831580156112af57506001600160a01b0385165f90815260a06020526040902054155b156112cc576001609b5f8282546112c691906140a5565b90915550505b6001600160a01b0385165f908152609d6020526040902054841580156112f4575060975460ff165b80156113185750609b546001600160a01b0387165f908152609d6020526040902054105b1561158f576001600160a01b0386165f908152609d6020526040812054611341906001906140a5565b90505b6001609b5461135391906140a5565b81101561158d5760a05f609c83815481106113705761137061404b565b5f9182526020808320909101546001600160a01b031683528201929092526040018120549060a090609c6113a58560016140b8565b815481106113b5576113b561404b565b5f9182526020808320909101546001600160a01b031683528201929092526040019020541115611585575f609c82815481106113f3576113f361404b565b5f918252602090912001546001600160a01b03169050609c6114168360016140b8565b815481106114265761142661404b565b5f91825260209091200154609c80546001600160a01b0390921691849081106114515761145161404b565b5f91825260209091200180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b039290921691909117905580609c61149f8460016140b8565b815481106114af576114af61404b565b5f91825260209091200180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03929092169190911790556114fa8260016140b8565b609d5f609c85815481106115105761151061404b565b5f9182526020808320909101546001600160a01b0316835282019290925260400190205561153f8260026140b8565b609d5f609c61154f8660016140b8565b8154811061155f5761155f61404b565b5f9182526020808320909101546001600160a01b03168352820192909252604001902055505b600101611344565b505b6020808301516040805191825291810185905290810185905233906001600160a01b038816907f92039db29d8c0a1aa1433fe109c69488c8c5e51b23c9de7d303ad80c1fef778c9060600160405180910390a35f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630e06ede86040518163ffffffff1660e01b8152600401602060405180830381865afa15801561163f573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906116639190614034565b905085158015611675575060975460ff165b80156116815750808211155b80156116a357506001600160a01b0387165f908152609d602052604090205481105b156116b0576116b0613051565b60208301516040517f7f683ee30000000000000000000000000000000000000000000000000000000081526001600160a01b0389811660048301523360248301526044820187905260648201929092527f000000000000000000000000000000000000000000000000000000000000000090911690637f683ee3906084015f604051808303815f87803b158015611745575f80fd5b505af1158015611757573d5f803e3d5ffd5b5050505050505050505061176b6001606555565b50565b6001600160a01b0382165f908152609d602052604090205482906117d45760405162461bcd60e51b815260206004820152600a60248201527f6e6f74207374616b65720000000000000000000000000000000000000000000060448201526064016107c7565b6117dc6131cd565b5f821161182b5760405162461bcd60e51b815260206004820152601460248201527f696e76616c6964207374616b6520616d6f756e7400000000000000000000000060448201526064016107c7565b611835338461322d565b156118825760405162461bcd60e51b815260206004820152601660248201527f756e64656c65676174696f6e20756e636c61696d65640000000000000000000060448201526064016107c7565b6001600160a01b0383165f90815260a06020526040812080548492906118a99084906140b8565b90915550506001600160a01b0383165f90815260a260209081526040808320338452909152812080548492906118e09084906140b8565b90915550506001600160a01b0383165f90815260a16020526040902061190690336132d1565b506001600160a01b0383165f90815260a0602052604090205482900361193e576001609b5f82825461193891906140b8565b90915550505b6001600160a01b0383165f908152609d602052604090205460975460ff1680156119685750600181115b15611bb9575f6119796001836140a5565b90505b8015611bb75760a05f609c6119926001856140a5565b815481106119a2576119a261404b565b905f5260205f20015f9054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020019081526020015f205460a05f609c84815481106119f3576119f361404b565b5f9182526020808320909101546001600160a01b031683528201929092526040019020541115611ba5575f609c611a2b6001846140a5565b81548110611a3b57611a3b61404b565b5f91825260209091200154609c80546001600160a01b0390921692509083908110611a6857611a6861404b565b5f918252602090912001546001600160a01b0316609c611a896001856140a5565b81548110611a9957611a9961404b565b905f5260205f20015f6101000a8154816001600160a01b0302191690836001600160a01b0316021790555080609c8381548110611ad857611ad861404b565b5f918252602082200180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0393909316929092179091558290609d90609c611b2a6001856140a5565b81548110611b3a57611b3a61404b565b5f9182526020808320909101546001600160a01b03168352820192909252604001902055611b698260016140b8565b609d5f609c8581548110611b7f57611b7f61404b565b5f9182526020808320909101546001600160a01b03168352820192909252604001902055505b80611baf81614149565b91505061197c565b505b6097545f9060ff1615611bdc57611bce6129c5565b611bd99060016140b8565b90505b6001600160a01b0385165f81815260a26020908152604080832033808552908352928190205481519081529182018590529192917f24d7bda8602b916d64417f0dbfe2e2e88ec9b1157bd9f596dfdb91ba26624e04910160405180910390a3611c463330866132e5565b5f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630e06ede86040518163ffffffff1660e01b8152600401602060405180830381865afa158015611ca3573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611cc79190614034565b60975490915060ff168015611cdb57508083115b8015611cfe57506001600160a01b0386165f908152609d60205260409020548110155b15611d0b57611d0b613051565b6001600160a01b038681165f81815260a260209081526040808320338085528184528285205486865260a08552838620548287529290945282517fb809af0f000000000000000000000000000000000000000000000000000000008152600481019690965260248601526044850188905260648501839052608485015290891460a4840152517f00000000000000000000000000000000000000000000000000000000000000009093169263b809af0f9260c480820193929182900301818387803b158015611dd8575f80fd5b505af1158015611dea573d5f803e3d5ffd5b50505050505050611dfb6001606555565b505050565b611e08613552565b60975460ff1615611e5b5760405162461bcd60e51b815260206004820152601660248201527f72657761726420616c726561647920737461727465640000000000000000000060448201526064016107c7565b4281118015611e915750611e8f7f00000000000000000000000000000000000000000000000000000000000000008261418b565b155b611edd5760405162461bcd60e51b815260206004820152601960248201527f696e76616c6964207265776172642073746172742074696d650000000000000060448201526064016107c7565b60988190556040518181527f0a833dce8576120bfa59e89b567b9f4ae38c4052612149424afb5327d19ed5df9060200160405180910390a150565b5f54610100900460ff1615808015611f3657505f54600160ff909116105b80611f4f5750303b158015611f4f57505f5460ff166001145b611fc15760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016107c7565b5f80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055801561201d575f80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b5f86116120925760405162461bcd60e51b815260206004820152602260248201527f73657175656e6365727353697a65206d7573742067726561746572207468616e60448201527f203000000000000000000000000000000000000000000000000000000000000060648201526084016107c7565b6099869055846120e45760405162461bcd60e51b815260206004820152601c60248201527f696e76616c696420756e64656c65676174654c6f636b45706f6368730000000060448201526064016107c7565b609a859055428411801561211f575061211d7f00000000000000000000000000000000000000000000000000000000000000008561418b565b155b61216b5760405162461bcd60e51b815260206004820152601960248201527f696e76616c6964207265776172642073746172742074696d650000000000000060448201526064016107c7565b6098849055816121bd5760405162461bcd60e51b815260206004820152601760248201527f696e76616c696420696e697469616c207374616b65727300000000000000000060448201526064016107c7565b5f5b82811015612323578383828181106121d9576121d961404b565b90506020028101906121eb919061419e565b609e5f8686858181106122005761220061404b565b9050602002810190612212919061419e565b612220906020810190613dbb565b6001600160a01b0316815260208101919091526040015f20612242828261421e565b905050609c8484838181106122595761225961404b565b905060200281019061226b919061419e565b612279906020810190613dbb565b8154600180820184555f93845260209093200180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03929092169190911790556122cd9082906140b8565b609d5f8686858181106122e2576122e261404b565b90506020028101906122f4919061419e565b612302906020810190613dbb565b6001600160a01b0316815260208101919091526040015f20556001016121bf565b5061232d876135ac565b612335613615565b8015612397575f80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050505050565b6001600160a01b0381165f90815260a1602052604090206060906123c390613699565b92915050565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480156124b157507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316636e296e456040518163ffffffff1660e01b8152600401602060405180830381865afa158015612482573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906124a69190614019565b6001600160a01b0316145b61254a5760405162461bcd60e51b8152602060048201526044602482018190527f5374616b696e673a2066756e6374696f6e2063616e206f6e6c79206265206361908201527f6c6c65642066726f6d20746865206f74686572207374616b696e6720636f6e7460648201527f7261637400000000000000000000000000000000000000000000000000000000608482015260a4016107c7565b80516001600160a01b03165f908152609d602052604081205490036125e3578051609c80546001810182555f8281527faf85b9071dfafeac1409d3f1d19bafc9bc7c37974cde8df0ee6168f0086e539c90910180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03948516179055905483519092168152609d60205260409020555b80516001600160a01b039081165f908152609e6020908152604091829020845181547fffffffffffffffffffffffff00000000000000000000000000000000000000001694169390931783558301516001830155820151829190600282019061264c9082614390565b50905050805f01516001600160a01b03167f058ecb29c230cd5df283c89e996187ed521393fe4546cd1b097921c4b2de293d8260200151836040015160405161269692919061446a565b60405180910390a260975460ff161580156126b55750609954609c5411155b1561176b5761176b613051565b6126ca613552565b6126d35f6135ac565b565b6126dd613552565b6098544210156127545760405162461bcd60e51b8152602060048201526024808201527f63616e2774207374617274206265666f7265207265776172642073746172742060448201527f74696d650000000000000000000000000000000000000000000000000000000060648201526084016107c7565b5f609b54116127a55760405162461bcd60e51b815260206004820152600e60248201527f6e6f6e652063616e64696461746500000000000000000000000000000000000060448201526064016107c7565b609780547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660019081179091555b609c54811015612962575f5b818110156129595760a05f609c83815481106127fe576127fe61404b565b905f5260205f20015f9054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020019081526020015f205460a05f609c858154811061284f5761284f61404b565b5f9182526020808320909101546001600160a01b031683528201929092526040019020541115612951575f609c828154811061288d5761288d61404b565b5f91825260209091200154609c80546001600160a01b03909216925090849081106128ba576128ba61404b565b5f91825260209091200154609c80546001600160a01b0390921691849081106128e5576128e561404b565b905f5260205f20015f6101000a8154816001600160a01b0302191690836001600160a01b0316021790555080609c84815481106129245761292461404b565b905f5260205f20015f6101000a8154816001600160a01b0302191690836001600160a01b03160217905550505b6001016127e0565b506001016127d4565b505f5b609c548110156129bc5761297a8160016140b8565b609d5f609c84815481106129905761299061404b565b5f9182526020808320909101546001600160a01b03168352820192909252604001902055600101612965565b506126d3613051565b5f60985442116129d457505f90565b7f000000000000000000000000000000000000000000000000000000000000000060985442612a0391906140a5565b612a0d919061448a565b905090565b609c8181548110612a21575f80fd5b5f918252602090912001546001600160a01b0316905081565b6001600160a01b0381165f90815260a26020908152604080832033845290915281205415156123c3565b335f908152609d6020526040902054612abf5760405162461bcd60e51b815260206004820152601360248201527f6f6e6c79207374616b657220616c6c6f7765640000000000000000000000000060448201526064016107c7565b612ac76131cd565b6040517f41302560000000000000000000000000000000000000000000000000000000008152336004820152602481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906341302560906044015f604051808303815f87803b158015612b45575f80fd5b505af1158015612b57573d5f803e3d5ffd5b5050505061176b6001606555565b609e6020525f90815260409020805460018201546002830180546001600160a01b03909316939192612b96906140f8565b80601f0160208091040260200160405190810160405280929190818152602001828054612bc2906140f8565b8015612c0d5780601f10612be457610100808354040283529160200191612c0d565b820191905f5260205f20905b815481529060010190602001808311612bf057829003601f168201915b5050505050905083565b612c1f613552565b5f81118015612c3057506099548114155b612c7c5760405162461bcd60e51b815260206004820152601b60248201527f696e76616c6964206e65772073657175656e636572732073697a65000000000060448201526064016107c7565b60998190556040518181527fa96b260c11da5ffa5f74f6cd6dcb582ef40c552985b8622dd901e63ecee02b3b9060200160405180910390a17f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630e06ede86040518163ffffffff1660e01b8152600401602060405180830381865afa158015612d10573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612d349190614034565b609954101561176b5761176b613051565b612d4d6131cd565b5f805b335f90815260a36020526040902054811015612f2a57612d6e6129c5565b335f90815260a360205260409020805483908110612d8e57612d8e61404b565b905f5260205f2090600302016002015411612f2257335f90815260a360205260409020805482908110612dc357612dc361404b565b905f5260205f2090600302016001015482612dde91906140b8565b335f90815260a3602052604090205490925060011015612ebe57335f90815260a3602052604090208054612e14906001906140a5565b81548110612e2457612e2461404b565b905f5260205f20906003020160a35f336001600160a01b03166001600160a01b031681526020019081526020015f208281548110612e6457612e6461404b565b5f9182526020909120825460039092020180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03909216919091178155600180830154908201556002918201549101555b335f90815260a360205260409020805480612edb57612edb6140cb565b5f8281526020812060035f199093019283020180547fffffffffffffffffffffffff0000000000000000000000000000000000000000168155600181018290556002015590555b600101612d50565b505f8111612f7a5760405162461bcd60e51b815260206004820152601760248201527f6e6f204d6f72706820746f6b656e20746f20636c61696d00000000000000000060448201526064016107c7565b612f8433826136a5565b60405181815233907fcc3089abc79631b3c0c81414a72e237c08559073a970cf474e36ae965e382fb39060200160405180910390a2506126d36001606555565b612fcc613552565b6001600160a01b0381166130485760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016107c7565b61176b816135ac565b60995460975460ff161561307557609954609b5410156130705750609b545b613086565b609954609c5410156130865750609c545b5f8167ffffffffffffffff8111156130a0576130a0613b0d565b6040519080825280602002602001820160405280156130c9578160200160208202803683370190505b5090505f5b8281101561313657609c81815481106130e9576130e961404b565b905f5260205f20015f9054906101000a90046001600160a01b03168282815181106131165761311661404b565b6001600160a01b03909216602092830291909101909101526001016130ce565b506040517f9b8201a40000000000000000000000000000000000000000000000000000000081526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690639b8201a49061319c908490600401613e72565b5f604051808303815f87803b1580156131b3575f80fd5b505af11580156131c5573d5f803e3d5ffd5b505050505050565b60026065540361321f5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016107c7565b6002606555565b6001606555565b5f805b6001600160a01b0384165f90815260a360205260409020548110156132ad576001600160a01b038481165f90815260a3602052604090208054918516918390811061327d5761327d61404b565b5f9182526020909120600390910201546001600160a01b0316036132a55760019150506123c3565b600101613230565b505f9392505050565b5f6132ca836001600160a01b038416613909565b9392505050565b5f6132ca836001600160a01b0384166139ec565b6040517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b0383811660048301525f917f0000000000000000000000000000000000000000000000000000000000000000909116906370a0823190602401602060405180830381865afa158015613366573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061338a9190614034565b6040517f23b872dd0000000000000000000000000000000000000000000000000000000081526001600160a01b0386811660048301528581166024830152604482018590529192507f0000000000000000000000000000000000000000000000000000000000000000909116906323b872dd906064016020604051808303815f875af115801561341c573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190613440919061449d565b506040517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b0384811660048301525f917f0000000000000000000000000000000000000000000000000000000000000000909116906370a0823190602401602060405180830381865afa1580156134c2573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906134e69190614034565b90505f831180156134ff5750826134fd83836140a5565b145b61354b5760405162461bcd60e51b815260206004820152601b60248201527f6d6f72706820746f6b656e207472616e73666572206661696c6564000000000060448201526064016107c7565b5050505050565b6033546001600160a01b031633146126d35760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016107c7565b603380546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35050565b5f54610100900460ff166136915760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016107c7565b6126d3613a38565b60605f6132ca83613ab4565b6040517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b0383811660048301525f917f0000000000000000000000000000000000000000000000000000000000000000909116906370a0823190602401602060405180830381865afa158015613726573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061374a9190614034565b6040517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b038581166004830152602482018590529192507f00000000000000000000000000000000000000000000000000000000000000009091169063a9059cbb906044016020604051808303815f875af11580156137d4573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906137f8919061449d565b506040517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b0384811660048301525f917f0000000000000000000000000000000000000000000000000000000000000000909116906370a0823190602401602060405180830381865afa15801561387a573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061389e9190614034565b90505f831180156138b75750826138b583836140a5565b145b6139035760405162461bcd60e51b815260206004820152601b60248201527f6d6f72706820746f6b656e207472616e73666572206661696c6564000000000060448201526064016107c7565b50505050565b5f81815260018301602052604081205480156139e3575f61392b6001836140a5565b85549091505f9061393e906001906140a5565b905081811461399d575f865f01828154811061395c5761395c61404b565b905f5260205f200154905080875f01848154811061397c5761397c61404b565b5f918252602080832090910192909255918252600188019052604090208390555b85548690806139ae576139ae6140cb565b600190038181905f5260205f20015f90559055856001015f8681526020019081526020015f205f9055600193505050506123c3565b5f9150506123c3565b5f818152600183016020526040812054613a3157508154600181810184555f8481526020808220909301849055845484825282860190935260409020919091556123c3565b505f6123c3565b5f54610100900460ff166132265760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016107c7565b6060815f01805480602002602001604051908101604052809291908181526020018280548015613b0157602002820191905f5260205f20905b815481526020019060010190808311613aed575b50505050509050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6040516060810167ffffffffffffffff81118282101715613b5d57613b5d613b0d565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715613baa57613baa613b0d565b604052919050565b6001600160a01b038116811461176b575f80fd5b5f6020808385031215613bd7575f80fd5b823567ffffffffffffffff80821115613bee575f80fd5b818501915085601f830112613c01575f80fd5b813581811115613c1357613c13613b0d565b8060051b9150613c24848301613b63565b8181529183018401918481019088841115613c3d575f80fd5b938501935b83851015613c675784359250613c5783613bb2565b8282529385019390850190613c42565b98975050505050505050565b5f8060408385031215613c84575f80fd5b8235613c8f81613bb2565b946020939093013593505050565b5f60208284031215613cad575f80fd5b5035919050565b5f81518084525f5b81811015613cd857602081850181015186830182015201613cbc565b505f6020828601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011685010191505092915050565b5f60208083018184528085518083526040925060408601915060408160051b8701018488015f5b83811015613dad578883037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0018552815180516001600160a01b0316845287810151888501528601516060878501819052613d9981860183613cb4565b968901969450505090860190600101613d3c565b509098975050505050505050565b5f60208284031215613dcb575f80fd5b81356132ca81613bb2565b5f805f805f8060a08789031215613deb575f80fd5b8635613df681613bb2565b9550602087013594506040870135935060608701359250608087013567ffffffffffffffff80821115613e27575f80fd5b818901915089601f830112613e3a575f80fd5b813581811115613e48575f80fd5b8a60208260051b8501011115613e5c575f80fd5b6020830194508093505050509295509295509295565b602080825282518282018190525f9190848201906040850190845b81811015613eb25783516001600160a01b031683529284019291840191600101613e8d565b50909695505050505050565b5f6020808385031215613ecf575f80fd5b823567ffffffffffffffff80821115613ee6575f80fd5b9084019060608287031215613ef9575f80fd5b613f01613b3a565b8235613f0c81613bb2565b81528284013584820152604083013582811115613f27575f80fd5b80840193505086601f840112613f3b575f80fd5b823582811115613f4d57613f4d613b0d565b613f7d857fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601613b63565b92508083528785828601011115613f92575f80fd5b80858501868501375f908301909401939093526040830152509392505050565b6001600160a01b0384168152826020820152606060408201525f613fd96060830184613cb4565b95945050505050565b5f8060408385031215613ff3575f80fd5b8235613ffe81613bb2565b9150602083013561400e81613bb2565b809150509250929050565b5f60208284031215614029575f80fd5b81516132ca81613bb2565b5f60208284031215614044575f80fd5b5051919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b818103818111156123c3576123c3614078565b808201808211156123c3576123c3614078565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603160045260245ffd5b600181811c9082168061410c57607f821691505b602082108103614143577f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b50919050565b5f8161415757614157614078565b505f190190565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f826141995761419961415e565b500690565b5f82357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa18336030181126141d0575f80fd5b9190910192915050565b601f821115611dfb57805f5260205f20601f840160051c810160208510156141ff5750805b601f840160051c820191505b8181101561354b575f815560010161420b565b813561422981613bb2565b6001600160a01b0381167fffffffffffffffffffffffff000000000000000000000000000000000000000083541617825550600160208084013560018401556002830160408501357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18636030181126142a0575f80fd5b8501803567ffffffffffffffff8111156142b8575f80fd5b80360384830113156142c8575f80fd5b6142dc816142d685546140f8565b856141da565b5f601f82116001811461430f575f83156142f857508382018601355b5f19600385901b1c1916600184901b178555614385565b5f858152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08516915b8281101561435b5786850189013582559388019390890190880161433c565b5084821015614379575f1960f88660031b161c198885880101351681555b505060018360011b0185555b505050505050505050565b815167ffffffffffffffff8111156143aa576143aa613b0d565b6143be816143b884546140f8565b846141da565b602080601f8311600181146143f1575f84156143da5750858301515b5f19600386901b1c1916600185901b1785556131c5565b5f858152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08616915b8281101561443d5788860151825594840194600190910190840161441e565b508582101561445a57878501515f19600388901b60f8161c191681555b5050505050600190811b01905550565b828152604060208201525f6144826040830184613cb4565b949350505050565b5f826144985761449861415e565b500490565b5f602082840312156144ad575f80fd5b815180151581146132ca575f80fdfea26469706673582212204e3df8d9d17a9b37ece1cc9ce239bf52a5654aa48c699e2cae7017c2c8fd1e7564736f6c63430008180033",
}

// L2StakingABI is the input ABI used to generate the binding from.
// Deprecated: Use L2StakingMetaData.ABI instead.
var L2StakingABI = L2StakingMetaData.ABI

// L2StakingBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use L2StakingMetaData.Bin instead.
var L2StakingBin = L2StakingMetaData.Bin

// DeployL2Staking deploys a new Ethereum contract, binding an instance of L2Staking to it.
func DeployL2Staking(auth *bind.TransactOpts, backend bind.ContractBackend, _otherStaking common.Address) (common.Address, *types.Transaction, *L2Staking, error) {
	parsed, err := L2StakingMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(L2StakingBin), backend, _otherStaking)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &L2Staking{L2StakingCaller: L2StakingCaller{contract: contract}, L2StakingTransactor: L2StakingTransactor{contract: contract}, L2StakingFilterer: L2StakingFilterer{contract: contract}}, nil
}

// L2Staking is an auto generated Go binding around an Ethereum contract.
type L2Staking struct {
	L2StakingCaller     // Read-only binding to the contract
	L2StakingTransactor // Write-only binding to the contract
	L2StakingFilterer   // Log filterer for contract events
}

// L2StakingCaller is an auto generated read-only Go binding around an Ethereum contract.
type L2StakingCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// L2StakingTransactor is an auto generated write-only Go binding around an Ethereum contract.
type L2StakingTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// L2StakingFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type L2StakingFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// L2StakingSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type L2StakingSession struct {
	Contract     *L2Staking        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// L2StakingCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type L2StakingCallerSession struct {
	Contract *L2StakingCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// L2StakingTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type L2StakingTransactorSession struct {
	Contract     *L2StakingTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// L2StakingRaw is an auto generated low-level Go binding around an Ethereum contract.
type L2StakingRaw struct {
	Contract *L2Staking // Generic contract binding to access the raw methods on
}

// L2StakingCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type L2StakingCallerRaw struct {
	Contract *L2StakingCaller // Generic read-only contract binding to access the raw methods on
}

// L2StakingTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type L2StakingTransactorRaw struct {
	Contract *L2StakingTransactor // Generic write-only contract binding to access the raw methods on
}

// NewL2Staking creates a new instance of L2Staking, bound to a specific deployed contract.
func NewL2Staking(address common.Address, backend bind.ContractBackend) (*L2Staking, error) {
	contract, err := bindL2Staking(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &L2Staking{L2StakingCaller: L2StakingCaller{contract: contract}, L2StakingTransactor: L2StakingTransactor{contract: contract}, L2StakingFilterer: L2StakingFilterer{contract: contract}}, nil
}

// NewL2StakingCaller creates a new read-only instance of L2Staking, bound to a specific deployed contract.
func NewL2StakingCaller(address common.Address, caller bind.ContractCaller) (*L2StakingCaller, error) {
	contract, err := bindL2Staking(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &L2StakingCaller{contract: contract}, nil
}

// NewL2StakingTransactor creates a new write-only instance of L2Staking, bound to a specific deployed contract.
func NewL2StakingTransactor(address common.Address, transactor bind.ContractTransactor) (*L2StakingTransactor, error) {
	contract, err := bindL2Staking(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &L2StakingTransactor{contract: contract}, nil
}

// NewL2StakingFilterer creates a new log filterer instance of L2Staking, bound to a specific deployed contract.
func NewL2StakingFilterer(address common.Address, filterer bind.ContractFilterer) (*L2StakingFilterer, error) {
	contract, err := bindL2Staking(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &L2StakingFilterer{contract: contract}, nil
}

// bindL2Staking binds a generic wrapper to an already deployed contract.
func bindL2Staking(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(L2StakingABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_L2Staking *L2StakingRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _L2Staking.Contract.L2StakingCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_L2Staking *L2StakingRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _L2Staking.Contract.L2StakingTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_L2Staking *L2StakingRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _L2Staking.Contract.L2StakingTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_L2Staking *L2StakingCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _L2Staking.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_L2Staking *L2StakingTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _L2Staking.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_L2Staking *L2StakingTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _L2Staking.Contract.contract.Transact(opts, method, params...)
}

// DISTRIBUTECONTRACT is a free data retrieval call binding the contract method 0x3d9353fe.
//
// Solidity: function DISTRIBUTE_CONTRACT() view returns(address)
func (_L2Staking *L2StakingCaller) DISTRIBUTECONTRACT(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _L2Staking.contract.Call(opts, &out, "DISTRIBUTE_CONTRACT")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// DISTRIBUTECONTRACT is a free data retrieval call binding the contract method 0x3d9353fe.
//
// Solidity: function DISTRIBUTE_CONTRACT() view returns(address)
func (_L2Staking *L2StakingSession) DISTRIBUTECONTRACT() (common.Address, error) {
	return _L2Staking.Contract.DISTRIBUTECONTRACT(&_L2Staking.CallOpts)
}

// DISTRIBUTECONTRACT is a free data retrieval call binding the contract method 0x3d9353fe.
//
// Solidity: function DISTRIBUTE_CONTRACT() view returns(address)
func (_L2Staking *L2StakingCallerSession) DISTRIBUTECONTRACT() (common.Address, error) {
	return _L2Staking.Contract.DISTRIBUTECONTRACT(&_L2Staking.CallOpts)
}

// MESSENGER is a free data retrieval call binding the contract method 0x927ede2d.
//
// Solidity: function MESSENGER() view returns(address)
func (_L2Staking *L2StakingCaller) MESSENGER(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _L2Staking.contract.Call(opts, &out, "MESSENGER")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// MESSENGER is a free data retrieval call binding the contract method 0x927ede2d.
//
// Solidity: function MESSENGER() view returns(address)
func (_L2Staking *L2StakingSession) MESSENGER() (common.Address, error) {
	return _L2Staking.Contract.MESSENGER(&_L2Staking.CallOpts)
}

// MESSENGER is a free data retrieval call binding the contract method 0x927ede2d.
//
// Solidity: function MESSENGER() view returns(address)
func (_L2Staking *L2StakingCallerSession) MESSENGER() (common.Address, error) {
	return _L2Staking.Contract.MESSENGER(&_L2Staking.CallOpts)
}

// MORPHTOKENCONTRACT is a free data retrieval call binding the contract method 0xd5577141.
//
// Solidity: function MORPH_TOKEN_CONTRACT() view returns(address)
func (_L2Staking *L2StakingCaller) MORPHTOKENCONTRACT(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _L2Staking.contract.Call(opts, &out, "MORPH_TOKEN_CONTRACT")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// MORPHTOKENCONTRACT is a free data retrieval call binding the contract method 0xd5577141.
//
// Solidity: function MORPH_TOKEN_CONTRACT() view returns(address)
func (_L2Staking *L2StakingSession) MORPHTOKENCONTRACT() (common.Address, error) {
	return _L2Staking.Contract.MORPHTOKENCONTRACT(&_L2Staking.CallOpts)
}

// MORPHTOKENCONTRACT is a free data retrieval call binding the contract method 0xd5577141.
//
// Solidity: function MORPH_TOKEN_CONTRACT() view returns(address)
func (_L2Staking *L2StakingCallerSession) MORPHTOKENCONTRACT() (common.Address, error) {
	return _L2Staking.Contract.MORPHTOKENCONTRACT(&_L2Staking.CallOpts)
}

// OTHERSTAKING is a free data retrieval call binding the contract method 0x831cfb58.
//
// Solidity: function OTHER_STAKING() view returns(address)
func (_L2Staking *L2StakingCaller) OTHERSTAKING(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _L2Staking.contract.Call(opts, &out, "OTHER_STAKING")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OTHERSTAKING is a free data retrieval call binding the contract method 0x831cfb58.
//
// Solidity: function OTHER_STAKING() view returns(address)
func (_L2Staking *L2StakingSession) OTHERSTAKING() (common.Address, error) {
	return _L2Staking.Contract.OTHERSTAKING(&_L2Staking.CallOpts)
}

// OTHERSTAKING is a free data retrieval call binding the contract method 0x831cfb58.
//
// Solidity: function OTHER_STAKING() view returns(address)
func (_L2Staking *L2StakingCallerSession) OTHERSTAKING() (common.Address, error) {
	return _L2Staking.Contract.OTHERSTAKING(&_L2Staking.CallOpts)
}

// REWARDEPOCH is a free data retrieval call binding the contract method 0xfadfa087.
//
// Solidity: function REWARD_EPOCH() view returns(uint256)
func (_L2Staking *L2StakingCaller) REWARDEPOCH(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _L2Staking.contract.Call(opts, &out, "REWARD_EPOCH")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// REWARDEPOCH is a free data retrieval call binding the contract method 0xfadfa087.
//
// Solidity: function REWARD_EPOCH() view returns(uint256)
func (_L2Staking *L2StakingSession) REWARDEPOCH() (*big.Int, error) {
	return _L2Staking.Contract.REWARDEPOCH(&_L2Staking.CallOpts)
}

// REWARDEPOCH is a free data retrieval call binding the contract method 0xfadfa087.
//
// Solidity: function REWARD_EPOCH() view returns(uint256)
func (_L2Staking *L2StakingCallerSession) REWARDEPOCH() (*big.Int, error) {
	return _L2Staking.Contract.REWARDEPOCH(&_L2Staking.CallOpts)
}

// REWARDSTARTED is a free data retrieval call binding the contract method 0xa4bba929.
//
// Solidity: function REWARD_STARTED() view returns(bool)
func (_L2Staking *L2StakingCaller) REWARDSTARTED(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _L2Staking.contract.Call(opts, &out, "REWARD_STARTED")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// REWARDSTARTED is a free data retrieval call binding the contract method 0xa4bba929.
//
// Solidity: function REWARD_STARTED() view returns(bool)
func (_L2Staking *L2StakingSession) REWARDSTARTED() (bool, error) {
	return _L2Staking.Contract.REWARDSTARTED(&_L2Staking.CallOpts)
}

// REWARDSTARTED is a free data retrieval call binding the contract method 0xa4bba929.
//
// Solidity: function REWARD_STARTED() view returns(bool)
func (_L2Staking *L2StakingCallerSession) REWARDSTARTED() (bool, error) {
	return _L2Staking.Contract.REWARDSTARTED(&_L2Staking.CallOpts)
}

// REWARDSTARTTIME is a free data retrieval call binding the contract method 0x3faa5009.
//
// Solidity: function REWARD_START_TIME() view returns(uint256)
func (_L2Staking *L2StakingCaller) REWARDSTARTTIME(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _L2Staking.contract.Call(opts, &out, "REWARD_START_TIME")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// REWARDSTARTTIME is a free data retrieval call binding the contract method 0x3faa5009.
//
// Solidity: function REWARD_START_TIME() view returns(uint256)
func (_L2Staking *L2StakingSession) REWARDSTARTTIME() (*big.Int, error) {
	return _L2Staking.Contract.REWARDSTARTTIME(&_L2Staking.CallOpts)
}

// REWARDSTARTTIME is a free data retrieval call binding the contract method 0x3faa5009.
//
// Solidity: function REWARD_START_TIME() view returns(uint256)
func (_L2Staking *L2StakingCallerSession) REWARDSTARTTIME() (*big.Int, error) {
	return _L2Staking.Contract.REWARDSTARTTIME(&_L2Staking.CallOpts)
}

// SEQUENCERCONTRACT is a free data retrieval call binding the contract method 0x8e21d5fb.
//
// Solidity: function SEQUENCER_CONTRACT() view returns(address)
func (_L2Staking *L2StakingCaller) SEQUENCERCONTRACT(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _L2Staking.contract.Call(opts, &out, "SEQUENCER_CONTRACT")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// SEQUENCERCONTRACT is a free data retrieval call binding the contract method 0x8e21d5fb.
//
// Solidity: function SEQUENCER_CONTRACT() view returns(address)
func (_L2Staking *L2StakingSession) SEQUENCERCONTRACT() (common.Address, error) {
	return _L2Staking.Contract.SEQUENCERCONTRACT(&_L2Staking.CallOpts)
}

// SEQUENCERCONTRACT is a free data retrieval call binding the contract method 0x8e21d5fb.
//
// Solidity: function SEQUENCER_CONTRACT() view returns(address)
func (_L2Staking *L2StakingCallerSession) SEQUENCERCONTRACT() (common.Address, error) {
	return _L2Staking.Contract.SEQUENCERCONTRACT(&_L2Staking.CallOpts)
}

// SEQUENCERMAXSIZE is a free data retrieval call binding the contract method 0x4342062b.
//
// Solidity: function SEQUENCER_MAX_SIZE() view returns(uint256)
func (_L2Staking *L2StakingCaller) SEQUENCERMAXSIZE(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _L2Staking.contract.Call(opts, &out, "SEQUENCER_MAX_SIZE")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SEQUENCERMAXSIZE is a free data retrieval call binding the contract method 0x4342062b.
//
// Solidity: function SEQUENCER_MAX_SIZE() view returns(uint256)
func (_L2Staking *L2StakingSession) SEQUENCERMAXSIZE() (*big.Int, error) {
	return _L2Staking.Contract.SEQUENCERMAXSIZE(&_L2Staking.CallOpts)
}

// SEQUENCERMAXSIZE is a free data retrieval call binding the contract method 0x4342062b.
//
// Solidity: function SEQUENCER_MAX_SIZE() view returns(uint256)
func (_L2Staking *L2StakingCallerSession) SEQUENCERMAXSIZE() (*big.Int, error) {
	return _L2Staking.Contract.SEQUENCERMAXSIZE(&_L2Staking.CallOpts)
}

// UNDELEGATELOCKEPOCHS is a free data retrieval call binding the contract method 0x5e4733e6.
//
// Solidity: function UNDELEGATE_LOCK_EPOCHS() view returns(uint256)
func (_L2Staking *L2StakingCaller) UNDELEGATELOCKEPOCHS(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _L2Staking.contract.Call(opts, &out, "UNDELEGATE_LOCK_EPOCHS")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// UNDELEGATELOCKEPOCHS is a free data retrieval call binding the contract method 0x5e4733e6.
//
// Solidity: function UNDELEGATE_LOCK_EPOCHS() view returns(uint256)
func (_L2Staking *L2StakingSession) UNDELEGATELOCKEPOCHS() (*big.Int, error) {
	return _L2Staking.Contract.UNDELEGATELOCKEPOCHS(&_L2Staking.CallOpts)
}

// UNDELEGATELOCKEPOCHS is a free data retrieval call binding the contract method 0x5e4733e6.
//
// Solidity: function UNDELEGATE_LOCK_EPOCHS() view returns(uint256)
func (_L2Staking *L2StakingCallerSession) UNDELEGATELOCKEPOCHS() (*big.Int, error) {
	return _L2Staking.Contract.UNDELEGATELOCKEPOCHS(&_L2Staking.CallOpts)
}

// CandidateNumber is a free data retrieval call binding the contract method 0x3b802421.
//
// Solidity: function candidateNumber() view returns(uint256)
func (_L2Staking *L2StakingCaller) CandidateNumber(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _L2Staking.contract.Call(opts, &out, "candidateNumber")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CandidateNumber is a free data retrieval call binding the contract method 0x3b802421.
//
// Solidity: function candidateNumber() view returns(uint256)
func (_L2Staking *L2StakingSession) CandidateNumber() (*big.Int, error) {
	return _L2Staking.Contract.CandidateNumber(&_L2Staking.CallOpts)
}

// CandidateNumber is a free data retrieval call binding the contract method 0x3b802421.
//
// Solidity: function candidateNumber() view returns(uint256)
func (_L2Staking *L2StakingCallerSession) CandidateNumber() (*big.Int, error) {
	return _L2Staking.Contract.CandidateNumber(&_L2Staking.CallOpts)
}

// Commissions is a free data retrieval call binding the contract method 0x7b05afb5.
//
// Solidity: function commissions(address ) view returns(uint256)
func (_L2Staking *L2StakingCaller) Commissions(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _L2Staking.contract.Call(opts, &out, "commissions", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Commissions is a free data retrieval call binding the contract method 0x7b05afb5.
//
// Solidity: function commissions(address ) view returns(uint256)
func (_L2Staking *L2StakingSession) Commissions(arg0 common.Address) (*big.Int, error) {
	return _L2Staking.Contract.Commissions(&_L2Staking.CallOpts, arg0)
}

// Commissions is a free data retrieval call binding the contract method 0x7b05afb5.
//
// Solidity: function commissions(address ) view returns(uint256)
func (_L2Staking *L2StakingCallerSession) Commissions(arg0 common.Address) (*big.Int, error) {
	return _L2Staking.Contract.Commissions(&_L2Staking.CallOpts, arg0)
}

// CurrentEpoch is a free data retrieval call binding the contract method 0x76671808.
//
// Solidity: function currentEpoch() view returns(uint256)
func (_L2Staking *L2StakingCaller) CurrentEpoch(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _L2Staking.contract.Call(opts, &out, "currentEpoch")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CurrentEpoch is a free data retrieval call binding the contract method 0x76671808.
//
// Solidity: function currentEpoch() view returns(uint256)
func (_L2Staking *L2StakingSession) CurrentEpoch() (*big.Int, error) {
	return _L2Staking.Contract.CurrentEpoch(&_L2Staking.CallOpts)
}

// CurrentEpoch is a free data retrieval call binding the contract method 0x76671808.
//
// Solidity: function currentEpoch() view returns(uint256)
func (_L2Staking *L2StakingCallerSession) CurrentEpoch() (*big.Int, error) {
	return _L2Staking.Contract.CurrentEpoch(&_L2Staking.CallOpts)
}

// Delegations is a free data retrieval call binding the contract method 0xc64814dd.
//
// Solidity: function delegations(address , address ) view returns(uint256)
func (_L2Staking *L2StakingCaller) Delegations(opts *bind.CallOpts, arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _L2Staking.contract.Call(opts, &out, "delegations", arg0, arg1)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Delegations is a free data retrieval call binding the contract method 0xc64814dd.
//
// Solidity: function delegations(address , address ) view returns(uint256)
func (_L2Staking *L2StakingSession) Delegations(arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	return _L2Staking.Contract.Delegations(&_L2Staking.CallOpts, arg0, arg1)
}

// Delegations is a free data retrieval call binding the contract method 0xc64814dd.
//
// Solidity: function delegations(address , address ) view returns(uint256)
func (_L2Staking *L2StakingCallerSession) Delegations(arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	return _L2Staking.Contract.Delegations(&_L2Staking.CallOpts, arg0, arg1)
}

// GetDelegators is a free data retrieval call binding the contract method 0x68e76346.
//
// Solidity: function getDelegators(address staker) view returns(address[])
func (_L2Staking *L2StakingCaller) GetDelegators(opts *bind.CallOpts, staker common.Address) ([]common.Address, error) {
	var out []interface{}
	err := _L2Staking.contract.Call(opts, &out, "getDelegators", staker)

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetDelegators is a free data retrieval call binding the contract method 0x68e76346.
//
// Solidity: function getDelegators(address staker) view returns(address[])
func (_L2Staking *L2StakingSession) GetDelegators(staker common.Address) ([]common.Address, error) {
	return _L2Staking.Contract.GetDelegators(&_L2Staking.CallOpts, staker)
}

// GetDelegators is a free data retrieval call binding the contract method 0x68e76346.
//
// Solidity: function getDelegators(address staker) view returns(address[])
func (_L2Staking *L2StakingCallerSession) GetDelegators(staker common.Address) ([]common.Address, error) {
	return _L2Staking.Contract.GetDelegators(&_L2Staking.CallOpts, staker)
}

// GetStakesInfo is a free data retrieval call binding the contract method 0x30158eea.
//
// Solidity: function getStakesInfo(address[] _stakerAddrs) view returns((address,bytes32,bytes)[])
func (_L2Staking *L2StakingCaller) GetStakesInfo(opts *bind.CallOpts, _stakerAddrs []common.Address) ([]TypesStakerInfo, error) {
	var out []interface{}
	err := _L2Staking.contract.Call(opts, &out, "getStakesInfo", _stakerAddrs)

	if err != nil {
		return *new([]TypesStakerInfo), err
	}

	out0 := *abi.ConvertType(out[0], new([]TypesStakerInfo)).(*[]TypesStakerInfo)

	return out0, err

}

// GetStakesInfo is a free data retrieval call binding the contract method 0x30158eea.
//
// Solidity: function getStakesInfo(address[] _stakerAddrs) view returns((address,bytes32,bytes)[])
func (_L2Staking *L2StakingSession) GetStakesInfo(_stakerAddrs []common.Address) ([]TypesStakerInfo, error) {
	return _L2Staking.Contract.GetStakesInfo(&_L2Staking.CallOpts, _stakerAddrs)
}

// GetStakesInfo is a free data retrieval call binding the contract method 0x30158eea.
//
// Solidity: function getStakesInfo(address[] _stakerAddrs) view returns((address,bytes32,bytes)[])
func (_L2Staking *L2StakingCallerSession) GetStakesInfo(_stakerAddrs []common.Address) ([]TypesStakerInfo, error) {
	return _L2Staking.Contract.GetStakesInfo(&_L2Staking.CallOpts, _stakerAddrs)
}

// IsStakingTo is a free data retrieval call binding the contract method 0x84d7d1d4.
//
// Solidity: function isStakingTo(address staker) view returns(bool)
func (_L2Staking *L2StakingCaller) IsStakingTo(opts *bind.CallOpts, staker common.Address) (bool, error) {
	var out []interface{}
	err := _L2Staking.contract.Call(opts, &out, "isStakingTo", staker)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsStakingTo is a free data retrieval call binding the contract method 0x84d7d1d4.
//
// Solidity: function isStakingTo(address staker) view returns(bool)
func (_L2Staking *L2StakingSession) IsStakingTo(staker common.Address) (bool, error) {
	return _L2Staking.Contract.IsStakingTo(&_L2Staking.CallOpts, staker)
}

// IsStakingTo is a free data retrieval call binding the contract method 0x84d7d1d4.
//
// Solidity: function isStakingTo(address staker) view returns(bool)
func (_L2Staking *L2StakingCallerSession) IsStakingTo(staker common.Address) (bool, error) {
	return _L2Staking.Contract.IsStakingTo(&_L2Staking.CallOpts, staker)
}

// Messenger is a free data retrieval call binding the contract method 0x3cb747bf.
//
// Solidity: function messenger() view returns(address)
func (_L2Staking *L2StakingCaller) Messenger(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _L2Staking.contract.Call(opts, &out, "messenger")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Messenger is a free data retrieval call binding the contract method 0x3cb747bf.
//
// Solidity: function messenger() view returns(address)
func (_L2Staking *L2StakingSession) Messenger() (common.Address, error) {
	return _L2Staking.Contract.Messenger(&_L2Staking.CallOpts)
}

// Messenger is a free data retrieval call binding the contract method 0x3cb747bf.
//
// Solidity: function messenger() view returns(address)
func (_L2Staking *L2StakingCallerSession) Messenger() (common.Address, error) {
	return _L2Staking.Contract.Messenger(&_L2Staking.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_L2Staking *L2StakingCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _L2Staking.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_L2Staking *L2StakingSession) Owner() (common.Address, error) {
	return _L2Staking.Contract.Owner(&_L2Staking.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_L2Staking *L2StakingCallerSession) Owner() (common.Address, error) {
	return _L2Staking.Contract.Owner(&_L2Staking.CallOpts)
}

// StakerAddrs is a free data retrieval call binding the contract method 0x7ede4d44.
//
// Solidity: function stakerAddrs(uint256 ) view returns(address)
func (_L2Staking *L2StakingCaller) StakerAddrs(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _L2Staking.contract.Call(opts, &out, "stakerAddrs", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// StakerAddrs is a free data retrieval call binding the contract method 0x7ede4d44.
//
// Solidity: function stakerAddrs(uint256 ) view returns(address)
func (_L2Staking *L2StakingSession) StakerAddrs(arg0 *big.Int) (common.Address, error) {
	return _L2Staking.Contract.StakerAddrs(&_L2Staking.CallOpts, arg0)
}

// StakerAddrs is a free data retrieval call binding the contract method 0x7ede4d44.
//
// Solidity: function stakerAddrs(uint256 ) view returns(address)
func (_L2Staking *L2StakingCallerSession) StakerAddrs(arg0 *big.Int) (common.Address, error) {
	return _L2Staking.Contract.StakerAddrs(&_L2Staking.CallOpts, arg0)
}

// StakerDelegations is a free data retrieval call binding the contract method 0x91bd43a4.
//
// Solidity: function stakerDelegations(address ) view returns(uint256)
func (_L2Staking *L2StakingCaller) StakerDelegations(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _L2Staking.contract.Call(opts, &out, "stakerDelegations", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// StakerDelegations is a free data retrieval call binding the contract method 0x91bd43a4.
//
// Solidity: function stakerDelegations(address ) view returns(uint256)
func (_L2Staking *L2StakingSession) StakerDelegations(arg0 common.Address) (*big.Int, error) {
	return _L2Staking.Contract.StakerDelegations(&_L2Staking.CallOpts, arg0)
}

// StakerDelegations is a free data retrieval call binding the contract method 0x91bd43a4.
//
// Solidity: function stakerDelegations(address ) view returns(uint256)
func (_L2Staking *L2StakingCallerSession) StakerDelegations(arg0 common.Address) (*big.Int, error) {
	return _L2Staking.Contract.StakerDelegations(&_L2Staking.CallOpts, arg0)
}

// StakerRankings is a free data retrieval call binding the contract method 0xb5d2e0dc.
//
// Solidity: function stakerRankings(address ) view returns(uint256)
func (_L2Staking *L2StakingCaller) StakerRankings(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _L2Staking.contract.Call(opts, &out, "stakerRankings", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// StakerRankings is a free data retrieval call binding the contract method 0xb5d2e0dc.
//
// Solidity: function stakerRankings(address ) view returns(uint256)
func (_L2Staking *L2StakingSession) StakerRankings(arg0 common.Address) (*big.Int, error) {
	return _L2Staking.Contract.StakerRankings(&_L2Staking.CallOpts, arg0)
}

// StakerRankings is a free data retrieval call binding the contract method 0xb5d2e0dc.
//
// Solidity: function stakerRankings(address ) view returns(uint256)
func (_L2Staking *L2StakingCallerSession) StakerRankings(arg0 common.Address) (*big.Int, error) {
	return _L2Staking.Contract.StakerRankings(&_L2Staking.CallOpts, arg0)
}

// Stakers is a free data retrieval call binding the contract method 0x9168ae72.
//
// Solidity: function stakers(address ) view returns(address addr, bytes32 tmKey, bytes blsKey)
func (_L2Staking *L2StakingCaller) Stakers(opts *bind.CallOpts, arg0 common.Address) (struct {
	Addr   common.Address
	TmKey  [32]byte
	BlsKey []byte
}, error) {
	var out []interface{}
	err := _L2Staking.contract.Call(opts, &out, "stakers", arg0)

	outstruct := new(struct {
		Addr   common.Address
		TmKey  [32]byte
		BlsKey []byte
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Addr = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.TmKey = *abi.ConvertType(out[1], new([32]byte)).(*[32]byte)
	outstruct.BlsKey = *abi.ConvertType(out[2], new([]byte)).(*[]byte)

	return *outstruct, err

}

// Stakers is a free data retrieval call binding the contract method 0x9168ae72.
//
// Solidity: function stakers(address ) view returns(address addr, bytes32 tmKey, bytes blsKey)
func (_L2Staking *L2StakingSession) Stakers(arg0 common.Address) (struct {
	Addr   common.Address
	TmKey  [32]byte
	BlsKey []byte
}, error) {
	return _L2Staking.Contract.Stakers(&_L2Staking.CallOpts, arg0)
}

// Stakers is a free data retrieval call binding the contract method 0x9168ae72.
//
// Solidity: function stakers(address ) view returns(address addr, bytes32 tmKey, bytes blsKey)
func (_L2Staking *L2StakingCallerSession) Stakers(arg0 common.Address) (struct {
	Addr   common.Address
	TmKey  [32]byte
	BlsKey []byte
}, error) {
	return _L2Staking.Contract.Stakers(&_L2Staking.CallOpts, arg0)
}

// Undelegations is a free data retrieval call binding the contract method 0x0f3b7059.
//
// Solidity: function undelegations(address , uint256 ) view returns(address delegatee, uint256 amount, uint256 unlockEpoch)
func (_L2Staking *L2StakingCaller) Undelegations(opts *bind.CallOpts, arg0 common.Address, arg1 *big.Int) (struct {
	Delegatee   common.Address
	Amount      *big.Int
	UnlockEpoch *big.Int
}, error) {
	var out []interface{}
	err := _L2Staking.contract.Call(opts, &out, "undelegations", arg0, arg1)

	outstruct := new(struct {
		Delegatee   common.Address
		Amount      *big.Int
		UnlockEpoch *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Delegatee = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.Amount = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.UnlockEpoch = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// Undelegations is a free data retrieval call binding the contract method 0x0f3b7059.
//
// Solidity: function undelegations(address , uint256 ) view returns(address delegatee, uint256 amount, uint256 unlockEpoch)
func (_L2Staking *L2StakingSession) Undelegations(arg0 common.Address, arg1 *big.Int) (struct {
	Delegatee   common.Address
	Amount      *big.Int
	UnlockEpoch *big.Int
}, error) {
	return _L2Staking.Contract.Undelegations(&_L2Staking.CallOpts, arg0, arg1)
}

// Undelegations is a free data retrieval call binding the contract method 0x0f3b7059.
//
// Solidity: function undelegations(address , uint256 ) view returns(address delegatee, uint256 amount, uint256 unlockEpoch)
func (_L2Staking *L2StakingCallerSession) Undelegations(arg0 common.Address, arg1 *big.Int) (struct {
	Delegatee   common.Address
	Amount      *big.Int
	UnlockEpoch *big.Int
}, error) {
	return _L2Staking.Contract.Undelegations(&_L2Staking.CallOpts, arg0, arg1)
}

// AddStaker is a paid mutator transaction binding the contract method 0x6d454d51.
//
// Solidity: function addStaker((address,bytes32,bytes) add) returns()
func (_L2Staking *L2StakingTransactor) AddStaker(opts *bind.TransactOpts, add TypesStakerInfo) (*types.Transaction, error) {
	return _L2Staking.contract.Transact(opts, "addStaker", add)
}

// AddStaker is a paid mutator transaction binding the contract method 0x6d454d51.
//
// Solidity: function addStaker((address,bytes32,bytes) add) returns()
func (_L2Staking *L2StakingSession) AddStaker(add TypesStakerInfo) (*types.Transaction, error) {
	return _L2Staking.Contract.AddStaker(&_L2Staking.TransactOpts, add)
}

// AddStaker is a paid mutator transaction binding the contract method 0x6d454d51.
//
// Solidity: function addStaker((address,bytes32,bytes) add) returns()
func (_L2Staking *L2StakingTransactorSession) AddStaker(add TypesStakerInfo) (*types.Transaction, error) {
	return _L2Staking.Contract.AddStaker(&_L2Staking.TransactOpts, add)
}

// ClaimCommission is a paid mutator transaction binding the contract method 0x8eca493a.
//
// Solidity: function claimCommission(uint256 targetEpochIndex) returns()
func (_L2Staking *L2StakingTransactor) ClaimCommission(opts *bind.TransactOpts, targetEpochIndex *big.Int) (*types.Transaction, error) {
	return _L2Staking.contract.Transact(opts, "claimCommission", targetEpochIndex)
}

// ClaimCommission is a paid mutator transaction binding the contract method 0x8eca493a.
//
// Solidity: function claimCommission(uint256 targetEpochIndex) returns()
func (_L2Staking *L2StakingSession) ClaimCommission(targetEpochIndex *big.Int) (*types.Transaction, error) {
	return _L2Staking.Contract.ClaimCommission(&_L2Staking.TransactOpts, targetEpochIndex)
}

// ClaimCommission is a paid mutator transaction binding the contract method 0x8eca493a.
//
// Solidity: function claimCommission(uint256 targetEpochIndex) returns()
func (_L2Staking *L2StakingTransactorSession) ClaimCommission(targetEpochIndex *big.Int) (*types.Transaction, error) {
	return _L2Staking.Contract.ClaimCommission(&_L2Staking.TransactOpts, targetEpochIndex)
}

// ClaimReward is a paid mutator transaction binding the contract method 0x174e31c4.
//
// Solidity: function claimReward(address delegatee, uint256 targetEpochIndex) returns()
func (_L2Staking *L2StakingTransactor) ClaimReward(opts *bind.TransactOpts, delegatee common.Address, targetEpochIndex *big.Int) (*types.Transaction, error) {
	return _L2Staking.contract.Transact(opts, "claimReward", delegatee, targetEpochIndex)
}

// ClaimReward is a paid mutator transaction binding the contract method 0x174e31c4.
//
// Solidity: function claimReward(address delegatee, uint256 targetEpochIndex) returns()
func (_L2Staking *L2StakingSession) ClaimReward(delegatee common.Address, targetEpochIndex *big.Int) (*types.Transaction, error) {
	return _L2Staking.Contract.ClaimReward(&_L2Staking.TransactOpts, delegatee, targetEpochIndex)
}

// ClaimReward is a paid mutator transaction binding the contract method 0x174e31c4.
//
// Solidity: function claimReward(address delegatee, uint256 targetEpochIndex) returns()
func (_L2Staking *L2StakingTransactorSession) ClaimReward(delegatee common.Address, targetEpochIndex *big.Int) (*types.Transaction, error) {
	return _L2Staking.Contract.ClaimReward(&_L2Staking.TransactOpts, delegatee, targetEpochIndex)
}

// ClaimUndelegation is a paid mutator transaction binding the contract method 0xe10911b1.
//
// Solidity: function claimUndelegation() returns()
func (_L2Staking *L2StakingTransactor) ClaimUndelegation(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _L2Staking.contract.Transact(opts, "claimUndelegation")
}

// ClaimUndelegation is a paid mutator transaction binding the contract method 0xe10911b1.
//
// Solidity: function claimUndelegation() returns()
func (_L2Staking *L2StakingSession) ClaimUndelegation() (*types.Transaction, error) {
	return _L2Staking.Contract.ClaimUndelegation(&_L2Staking.TransactOpts)
}

// ClaimUndelegation is a paid mutator transaction binding the contract method 0xe10911b1.
//
// Solidity: function claimUndelegation() returns()
func (_L2Staking *L2StakingTransactorSession) ClaimUndelegation() (*types.Transaction, error) {
	return _L2Staking.Contract.ClaimUndelegation(&_L2Staking.TransactOpts)
}

// DelegateStake is a paid mutator transaction binding the contract method 0x3c323a1b.
//
// Solidity: function delegateStake(address staker, uint256 amount) returns()
func (_L2Staking *L2StakingTransactor) DelegateStake(opts *bind.TransactOpts, staker common.Address, amount *big.Int) (*types.Transaction, error) {
	return _L2Staking.contract.Transact(opts, "delegateStake", staker, amount)
}

// DelegateStake is a paid mutator transaction binding the contract method 0x3c323a1b.
//
// Solidity: function delegateStake(address staker, uint256 amount) returns()
func (_L2Staking *L2StakingSession) DelegateStake(staker common.Address, amount *big.Int) (*types.Transaction, error) {
	return _L2Staking.Contract.DelegateStake(&_L2Staking.TransactOpts, staker, amount)
}

// DelegateStake is a paid mutator transaction binding the contract method 0x3c323a1b.
//
// Solidity: function delegateStake(address staker, uint256 amount) returns()
func (_L2Staking *L2StakingTransactorSession) DelegateStake(staker common.Address, amount *big.Int) (*types.Transaction, error) {
	return _L2Staking.Contract.DelegateStake(&_L2Staking.TransactOpts, staker, amount)
}

// Initialize is a paid mutator transaction binding the contract method 0x439162b5.
//
// Solidity: function initialize(address _admin, uint256 _sequencersMaxSize, uint256 _undelegateLockEpochs, uint256 _rewardStartTime, (address,bytes32,bytes)[] _stakers) returns()
func (_L2Staking *L2StakingTransactor) Initialize(opts *bind.TransactOpts, _admin common.Address, _sequencersMaxSize *big.Int, _undelegateLockEpochs *big.Int, _rewardStartTime *big.Int, _stakers []TypesStakerInfo) (*types.Transaction, error) {
	return _L2Staking.contract.Transact(opts, "initialize", _admin, _sequencersMaxSize, _undelegateLockEpochs, _rewardStartTime, _stakers)
}

// Initialize is a paid mutator transaction binding the contract method 0x439162b5.
//
// Solidity: function initialize(address _admin, uint256 _sequencersMaxSize, uint256 _undelegateLockEpochs, uint256 _rewardStartTime, (address,bytes32,bytes)[] _stakers) returns()
func (_L2Staking *L2StakingSession) Initialize(_admin common.Address, _sequencersMaxSize *big.Int, _undelegateLockEpochs *big.Int, _rewardStartTime *big.Int, _stakers []TypesStakerInfo) (*types.Transaction, error) {
	return _L2Staking.Contract.Initialize(&_L2Staking.TransactOpts, _admin, _sequencersMaxSize, _undelegateLockEpochs, _rewardStartTime, _stakers)
}

// Initialize is a paid mutator transaction binding the contract method 0x439162b5.
//
// Solidity: function initialize(address _admin, uint256 _sequencersMaxSize, uint256 _undelegateLockEpochs, uint256 _rewardStartTime, (address,bytes32,bytes)[] _stakers) returns()
func (_L2Staking *L2StakingTransactorSession) Initialize(_admin common.Address, _sequencersMaxSize *big.Int, _undelegateLockEpochs *big.Int, _rewardStartTime *big.Int, _stakers []TypesStakerInfo) (*types.Transaction, error) {
	return _L2Staking.Contract.Initialize(&_L2Staking.TransactOpts, _admin, _sequencersMaxSize, _undelegateLockEpochs, _rewardStartTime, _stakers)
}

// RemoveStakers is a paid mutator transaction binding the contract method 0x0be67fcc.
//
// Solidity: function removeStakers(address[] remove) returns()
func (_L2Staking *L2StakingTransactor) RemoveStakers(opts *bind.TransactOpts, remove []common.Address) (*types.Transaction, error) {
	return _L2Staking.contract.Transact(opts, "removeStakers", remove)
}

// RemoveStakers is a paid mutator transaction binding the contract method 0x0be67fcc.
//
// Solidity: function removeStakers(address[] remove) returns()
func (_L2Staking *L2StakingSession) RemoveStakers(remove []common.Address) (*types.Transaction, error) {
	return _L2Staking.Contract.RemoveStakers(&_L2Staking.TransactOpts, remove)
}

// RemoveStakers is a paid mutator transaction binding the contract method 0x0be67fcc.
//
// Solidity: function removeStakers(address[] remove) returns()
func (_L2Staking *L2StakingTransactorSession) RemoveStakers(remove []common.Address) (*types.Transaction, error) {
	return _L2Staking.Contract.RemoveStakers(&_L2Staking.TransactOpts, remove)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_L2Staking *L2StakingTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _L2Staking.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_L2Staking *L2StakingSession) RenounceOwnership() (*types.Transaction, error) {
	return _L2Staking.Contract.RenounceOwnership(&_L2Staking.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_L2Staking *L2StakingTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _L2Staking.Contract.RenounceOwnership(&_L2Staking.TransactOpts)
}

// SetCommissionRate is a paid mutator transaction binding the contract method 0x19fac8fd.
//
// Solidity: function setCommissionRate(uint256 commission) returns()
func (_L2Staking *L2StakingTransactor) SetCommissionRate(opts *bind.TransactOpts, commission *big.Int) (*types.Transaction, error) {
	return _L2Staking.contract.Transact(opts, "setCommissionRate", commission)
}

// SetCommissionRate is a paid mutator transaction binding the contract method 0x19fac8fd.
//
// Solidity: function setCommissionRate(uint256 commission) returns()
func (_L2Staking *L2StakingSession) SetCommissionRate(commission *big.Int) (*types.Transaction, error) {
	return _L2Staking.Contract.SetCommissionRate(&_L2Staking.TransactOpts, commission)
}

// SetCommissionRate is a paid mutator transaction binding the contract method 0x19fac8fd.
//
// Solidity: function setCommissionRate(uint256 commission) returns()
func (_L2Staking *L2StakingTransactorSession) SetCommissionRate(commission *big.Int) (*types.Transaction, error) {
	return _L2Staking.Contract.SetCommissionRate(&_L2Staking.TransactOpts, commission)
}

// StartReward is a paid mutator transaction binding the contract method 0x746c8ae1.
//
// Solidity: function startReward() returns()
func (_L2Staking *L2StakingTransactor) StartReward(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _L2Staking.contract.Transact(opts, "startReward")
}

// StartReward is a paid mutator transaction binding the contract method 0x746c8ae1.
//
// Solidity: function startReward() returns()
func (_L2Staking *L2StakingSession) StartReward() (*types.Transaction, error) {
	return _L2Staking.Contract.StartReward(&_L2Staking.TransactOpts)
}

// StartReward is a paid mutator transaction binding the contract method 0x746c8ae1.
//
// Solidity: function startReward() returns()
func (_L2Staking *L2StakingTransactorSession) StartReward() (*types.Transaction, error) {
	return _L2Staking.Contract.StartReward(&_L2Staking.TransactOpts)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_L2Staking *L2StakingTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _L2Staking.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_L2Staking *L2StakingSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _L2Staking.Contract.TransferOwnership(&_L2Staking.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_L2Staking *L2StakingTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _L2Staking.Contract.TransferOwnership(&_L2Staking.TransactOpts, newOwner)
}

// UndelegateStake is a paid mutator transaction binding the contract method 0x3385ccc2.
//
// Solidity: function undelegateStake(address delegatee) returns()
func (_L2Staking *L2StakingTransactor) UndelegateStake(opts *bind.TransactOpts, delegatee common.Address) (*types.Transaction, error) {
	return _L2Staking.contract.Transact(opts, "undelegateStake", delegatee)
}

// UndelegateStake is a paid mutator transaction binding the contract method 0x3385ccc2.
//
// Solidity: function undelegateStake(address delegatee) returns()
func (_L2Staking *L2StakingSession) UndelegateStake(delegatee common.Address) (*types.Transaction, error) {
	return _L2Staking.Contract.UndelegateStake(&_L2Staking.TransactOpts, delegatee)
}

// UndelegateStake is a paid mutator transaction binding the contract method 0x3385ccc2.
//
// Solidity: function undelegateStake(address delegatee) returns()
func (_L2Staking *L2StakingTransactorSession) UndelegateStake(delegatee common.Address) (*types.Transaction, error) {
	return _L2Staking.Contract.UndelegateStake(&_L2Staking.TransactOpts, delegatee)
}

// UpdateParams is a paid mutator transaction binding the contract method 0xa5749187.
//
// Solidity: function updateParams(uint256 _sequencersMaxSize) returns()
func (_L2Staking *L2StakingTransactor) UpdateParams(opts *bind.TransactOpts, _sequencersMaxSize *big.Int) (*types.Transaction, error) {
	return _L2Staking.contract.Transact(opts, "updateParams", _sequencersMaxSize)
}

// UpdateParams is a paid mutator transaction binding the contract method 0xa5749187.
//
// Solidity: function updateParams(uint256 _sequencersMaxSize) returns()
func (_L2Staking *L2StakingSession) UpdateParams(_sequencersMaxSize *big.Int) (*types.Transaction, error) {
	return _L2Staking.Contract.UpdateParams(&_L2Staking.TransactOpts, _sequencersMaxSize)
}

// UpdateParams is a paid mutator transaction binding the contract method 0xa5749187.
//
// Solidity: function updateParams(uint256 _sequencersMaxSize) returns()
func (_L2Staking *L2StakingTransactorSession) UpdateParams(_sequencersMaxSize *big.Int) (*types.Transaction, error) {
	return _L2Staking.Contract.UpdateParams(&_L2Staking.TransactOpts, _sequencersMaxSize)
}

// UpdateRewardStartTime is a paid mutator transaction binding the contract method 0x40b5c837.
//
// Solidity: function updateRewardStartTime(uint256 _rewardStartTime) returns()
func (_L2Staking *L2StakingTransactor) UpdateRewardStartTime(opts *bind.TransactOpts, _rewardStartTime *big.Int) (*types.Transaction, error) {
	return _L2Staking.contract.Transact(opts, "updateRewardStartTime", _rewardStartTime)
}

// UpdateRewardStartTime is a paid mutator transaction binding the contract method 0x40b5c837.
//
// Solidity: function updateRewardStartTime(uint256 _rewardStartTime) returns()
func (_L2Staking *L2StakingSession) UpdateRewardStartTime(_rewardStartTime *big.Int) (*types.Transaction, error) {
	return _L2Staking.Contract.UpdateRewardStartTime(&_L2Staking.TransactOpts, _rewardStartTime)
}

// UpdateRewardStartTime is a paid mutator transaction binding the contract method 0x40b5c837.
//
// Solidity: function updateRewardStartTime(uint256 _rewardStartTime) returns()
func (_L2Staking *L2StakingTransactorSession) UpdateRewardStartTime(_rewardStartTime *big.Int) (*types.Transaction, error) {
	return _L2Staking.Contract.UpdateRewardStartTime(&_L2Staking.TransactOpts, _rewardStartTime)
}

// L2StakingCommissionUpdatedIterator is returned from FilterCommissionUpdated and is used to iterate over the raw logs and unpacked data for CommissionUpdated events raised by the L2Staking contract.
type L2StakingCommissionUpdatedIterator struct {
	Event *L2StakingCommissionUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *L2StakingCommissionUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(L2StakingCommissionUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(L2StakingCommissionUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *L2StakingCommissionUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *L2StakingCommissionUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// L2StakingCommissionUpdated represents a CommissionUpdated event raised by the L2Staking contract.
type L2StakingCommissionUpdated struct {
	Staker         common.Address
	Percentage     *big.Int
	EpochEffective *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterCommissionUpdated is a free log retrieval operation binding the contract event 0x6e500db30ce535d38852e318f333e9be41a3fec6c65d234ebb06203c896db9a5.
//
// Solidity: event CommissionUpdated(address indexed staker, uint256 percentage, uint256 epochEffective)
func (_L2Staking *L2StakingFilterer) FilterCommissionUpdated(opts *bind.FilterOpts, staker []common.Address) (*L2StakingCommissionUpdatedIterator, error) {

	var stakerRule []interface{}
	for _, stakerItem := range staker {
		stakerRule = append(stakerRule, stakerItem)
	}

	logs, sub, err := _L2Staking.contract.FilterLogs(opts, "CommissionUpdated", stakerRule)
	if err != nil {
		return nil, err
	}
	return &L2StakingCommissionUpdatedIterator{contract: _L2Staking.contract, event: "CommissionUpdated", logs: logs, sub: sub}, nil
}

// WatchCommissionUpdated is a free log subscription operation binding the contract event 0x6e500db30ce535d38852e318f333e9be41a3fec6c65d234ebb06203c896db9a5.
//
// Solidity: event CommissionUpdated(address indexed staker, uint256 percentage, uint256 epochEffective)
func (_L2Staking *L2StakingFilterer) WatchCommissionUpdated(opts *bind.WatchOpts, sink chan<- *L2StakingCommissionUpdated, staker []common.Address) (event.Subscription, error) {

	var stakerRule []interface{}
	for _, stakerItem := range staker {
		stakerRule = append(stakerRule, stakerItem)
	}

	logs, sub, err := _L2Staking.contract.WatchLogs(opts, "CommissionUpdated", stakerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(L2StakingCommissionUpdated)
				if err := _L2Staking.contract.UnpackLog(event, "CommissionUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCommissionUpdated is a log parse operation binding the contract event 0x6e500db30ce535d38852e318f333e9be41a3fec6c65d234ebb06203c896db9a5.
//
// Solidity: event CommissionUpdated(address indexed staker, uint256 percentage, uint256 epochEffective)
func (_L2Staking *L2StakingFilterer) ParseCommissionUpdated(log types.Log) (*L2StakingCommissionUpdated, error) {
	event := new(L2StakingCommissionUpdated)
	if err := _L2Staking.contract.UnpackLog(event, "CommissionUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// L2StakingDelegatedIterator is returned from FilterDelegated and is used to iterate over the raw logs and unpacked data for Delegated events raised by the L2Staking contract.
type L2StakingDelegatedIterator struct {
	Event *L2StakingDelegated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *L2StakingDelegatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(L2StakingDelegated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(L2StakingDelegated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *L2StakingDelegatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *L2StakingDelegatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// L2StakingDelegated represents a Delegated event raised by the L2Staking contract.
type L2StakingDelegated struct {
	Delegatee      common.Address
	Delegator      common.Address
	Amount         *big.Int
	EffectiveEpoch *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterDelegated is a free log retrieval operation binding the contract event 0x24d7bda8602b916d64417f0dbfe2e2e88ec9b1157bd9f596dfdb91ba26624e04.
//
// Solidity: event Delegated(address indexed delegatee, address indexed delegator, uint256 amount, uint256 effectiveEpoch)
func (_L2Staking *L2StakingFilterer) FilterDelegated(opts *bind.FilterOpts, delegatee []common.Address, delegator []common.Address) (*L2StakingDelegatedIterator, error) {

	var delegateeRule []interface{}
	for _, delegateeItem := range delegatee {
		delegateeRule = append(delegateeRule, delegateeItem)
	}
	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}

	logs, sub, err := _L2Staking.contract.FilterLogs(opts, "Delegated", delegateeRule, delegatorRule)
	if err != nil {
		return nil, err
	}
	return &L2StakingDelegatedIterator{contract: _L2Staking.contract, event: "Delegated", logs: logs, sub: sub}, nil
}

// WatchDelegated is a free log subscription operation binding the contract event 0x24d7bda8602b916d64417f0dbfe2e2e88ec9b1157bd9f596dfdb91ba26624e04.
//
// Solidity: event Delegated(address indexed delegatee, address indexed delegator, uint256 amount, uint256 effectiveEpoch)
func (_L2Staking *L2StakingFilterer) WatchDelegated(opts *bind.WatchOpts, sink chan<- *L2StakingDelegated, delegatee []common.Address, delegator []common.Address) (event.Subscription, error) {

	var delegateeRule []interface{}
	for _, delegateeItem := range delegatee {
		delegateeRule = append(delegateeRule, delegateeItem)
	}
	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}

	logs, sub, err := _L2Staking.contract.WatchLogs(opts, "Delegated", delegateeRule, delegatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(L2StakingDelegated)
				if err := _L2Staking.contract.UnpackLog(event, "Delegated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDelegated is a log parse operation binding the contract event 0x24d7bda8602b916d64417f0dbfe2e2e88ec9b1157bd9f596dfdb91ba26624e04.
//
// Solidity: event Delegated(address indexed delegatee, address indexed delegator, uint256 amount, uint256 effectiveEpoch)
func (_L2Staking *L2StakingFilterer) ParseDelegated(log types.Log) (*L2StakingDelegated, error) {
	event := new(L2StakingDelegated)
	if err := _L2Staking.contract.UnpackLog(event, "Delegated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// L2StakingInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the L2Staking contract.
type L2StakingInitializedIterator struct {
	Event *L2StakingInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *L2StakingInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(L2StakingInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(L2StakingInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *L2StakingInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *L2StakingInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// L2StakingInitialized represents a Initialized event raised by the L2Staking contract.
type L2StakingInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_L2Staking *L2StakingFilterer) FilterInitialized(opts *bind.FilterOpts) (*L2StakingInitializedIterator, error) {

	logs, sub, err := _L2Staking.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &L2StakingInitializedIterator{contract: _L2Staking.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_L2Staking *L2StakingFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *L2StakingInitialized) (event.Subscription, error) {

	logs, sub, err := _L2Staking.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(L2StakingInitialized)
				if err := _L2Staking.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_L2Staking *L2StakingFilterer) ParseInitialized(log types.Log) (*L2StakingInitialized, error) {
	event := new(L2StakingInitialized)
	if err := _L2Staking.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// L2StakingOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the L2Staking contract.
type L2StakingOwnershipTransferredIterator struct {
	Event *L2StakingOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *L2StakingOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(L2StakingOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(L2StakingOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *L2StakingOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *L2StakingOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// L2StakingOwnershipTransferred represents a OwnershipTransferred event raised by the L2Staking contract.
type L2StakingOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_L2Staking *L2StakingFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*L2StakingOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _L2Staking.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &L2StakingOwnershipTransferredIterator{contract: _L2Staking.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_L2Staking *L2StakingFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *L2StakingOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _L2Staking.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(L2StakingOwnershipTransferred)
				if err := _L2Staking.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_L2Staking *L2StakingFilterer) ParseOwnershipTransferred(log types.Log) (*L2StakingOwnershipTransferred, error) {
	event := new(L2StakingOwnershipTransferred)
	if err := _L2Staking.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// L2StakingParamsUpdatedIterator is returned from FilterParamsUpdated and is used to iterate over the raw logs and unpacked data for ParamsUpdated events raised by the L2Staking contract.
type L2StakingParamsUpdatedIterator struct {
	Event *L2StakingParamsUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *L2StakingParamsUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(L2StakingParamsUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(L2StakingParamsUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *L2StakingParamsUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *L2StakingParamsUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// L2StakingParamsUpdated represents a ParamsUpdated event raised by the L2Staking contract.
type L2StakingParamsUpdated struct {
	SequencersSize *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterParamsUpdated is a free log retrieval operation binding the contract event 0xa96b260c11da5ffa5f74f6cd6dcb582ef40c552985b8622dd901e63ecee02b3b.
//
// Solidity: event ParamsUpdated(uint256 sequencersSize)
func (_L2Staking *L2StakingFilterer) FilterParamsUpdated(opts *bind.FilterOpts) (*L2StakingParamsUpdatedIterator, error) {

	logs, sub, err := _L2Staking.contract.FilterLogs(opts, "ParamsUpdated")
	if err != nil {
		return nil, err
	}
	return &L2StakingParamsUpdatedIterator{contract: _L2Staking.contract, event: "ParamsUpdated", logs: logs, sub: sub}, nil
}

// WatchParamsUpdated is a free log subscription operation binding the contract event 0xa96b260c11da5ffa5f74f6cd6dcb582ef40c552985b8622dd901e63ecee02b3b.
//
// Solidity: event ParamsUpdated(uint256 sequencersSize)
func (_L2Staking *L2StakingFilterer) WatchParamsUpdated(opts *bind.WatchOpts, sink chan<- *L2StakingParamsUpdated) (event.Subscription, error) {

	logs, sub, err := _L2Staking.contract.WatchLogs(opts, "ParamsUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(L2StakingParamsUpdated)
				if err := _L2Staking.contract.UnpackLog(event, "ParamsUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseParamsUpdated is a log parse operation binding the contract event 0xa96b260c11da5ffa5f74f6cd6dcb582ef40c552985b8622dd901e63ecee02b3b.
//
// Solidity: event ParamsUpdated(uint256 sequencersSize)
func (_L2Staking *L2StakingFilterer) ParseParamsUpdated(log types.Log) (*L2StakingParamsUpdated, error) {
	event := new(L2StakingParamsUpdated)
	if err := _L2Staking.contract.UnpackLog(event, "ParamsUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// L2StakingRewardStartTimeUpdatedIterator is returned from FilterRewardStartTimeUpdated and is used to iterate over the raw logs and unpacked data for RewardStartTimeUpdated events raised by the L2Staking contract.
type L2StakingRewardStartTimeUpdatedIterator struct {
	Event *L2StakingRewardStartTimeUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *L2StakingRewardStartTimeUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(L2StakingRewardStartTimeUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(L2StakingRewardStartTimeUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *L2StakingRewardStartTimeUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *L2StakingRewardStartTimeUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// L2StakingRewardStartTimeUpdated represents a RewardStartTimeUpdated event raised by the L2Staking contract.
type L2StakingRewardStartTimeUpdated struct {
	RewardStartTime *big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterRewardStartTimeUpdated is a free log retrieval operation binding the contract event 0x0a833dce8576120bfa59e89b567b9f4ae38c4052612149424afb5327d19ed5df.
//
// Solidity: event RewardStartTimeUpdated(uint256 rewardStartTime)
func (_L2Staking *L2StakingFilterer) FilterRewardStartTimeUpdated(opts *bind.FilterOpts) (*L2StakingRewardStartTimeUpdatedIterator, error) {

	logs, sub, err := _L2Staking.contract.FilterLogs(opts, "RewardStartTimeUpdated")
	if err != nil {
		return nil, err
	}
	return &L2StakingRewardStartTimeUpdatedIterator{contract: _L2Staking.contract, event: "RewardStartTimeUpdated", logs: logs, sub: sub}, nil
}

// WatchRewardStartTimeUpdated is a free log subscription operation binding the contract event 0x0a833dce8576120bfa59e89b567b9f4ae38c4052612149424afb5327d19ed5df.
//
// Solidity: event RewardStartTimeUpdated(uint256 rewardStartTime)
func (_L2Staking *L2StakingFilterer) WatchRewardStartTimeUpdated(opts *bind.WatchOpts, sink chan<- *L2StakingRewardStartTimeUpdated) (event.Subscription, error) {

	logs, sub, err := _L2Staking.contract.WatchLogs(opts, "RewardStartTimeUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(L2StakingRewardStartTimeUpdated)
				if err := _L2Staking.contract.UnpackLog(event, "RewardStartTimeUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRewardStartTimeUpdated is a log parse operation binding the contract event 0x0a833dce8576120bfa59e89b567b9f4ae38c4052612149424afb5327d19ed5df.
//
// Solidity: event RewardStartTimeUpdated(uint256 rewardStartTime)
func (_L2Staking *L2StakingFilterer) ParseRewardStartTimeUpdated(log types.Log) (*L2StakingRewardStartTimeUpdated, error) {
	event := new(L2StakingRewardStartTimeUpdated)
	if err := _L2Staking.contract.UnpackLog(event, "RewardStartTimeUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// L2StakingStakerAddedIterator is returned from FilterStakerAdded and is used to iterate over the raw logs and unpacked data for StakerAdded events raised by the L2Staking contract.
type L2StakingStakerAddedIterator struct {
	Event *L2StakingStakerAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *L2StakingStakerAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(L2StakingStakerAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(L2StakingStakerAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *L2StakingStakerAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *L2StakingStakerAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// L2StakingStakerAdded represents a StakerAdded event raised by the L2Staking contract.
type L2StakingStakerAdded struct {
	Addr   common.Address
	TmKey  [32]byte
	BlsKey []byte
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterStakerAdded is a free log retrieval operation binding the contract event 0x058ecb29c230cd5df283c89e996187ed521393fe4546cd1b097921c4b2de293d.
//
// Solidity: event StakerAdded(address indexed addr, bytes32 tmKey, bytes blsKey)
func (_L2Staking *L2StakingFilterer) FilterStakerAdded(opts *bind.FilterOpts, addr []common.Address) (*L2StakingStakerAddedIterator, error) {

	var addrRule []interface{}
	for _, addrItem := range addr {
		addrRule = append(addrRule, addrItem)
	}

	logs, sub, err := _L2Staking.contract.FilterLogs(opts, "StakerAdded", addrRule)
	if err != nil {
		return nil, err
	}
	return &L2StakingStakerAddedIterator{contract: _L2Staking.contract, event: "StakerAdded", logs: logs, sub: sub}, nil
}

// WatchStakerAdded is a free log subscription operation binding the contract event 0x058ecb29c230cd5df283c89e996187ed521393fe4546cd1b097921c4b2de293d.
//
// Solidity: event StakerAdded(address indexed addr, bytes32 tmKey, bytes blsKey)
func (_L2Staking *L2StakingFilterer) WatchStakerAdded(opts *bind.WatchOpts, sink chan<- *L2StakingStakerAdded, addr []common.Address) (event.Subscription, error) {

	var addrRule []interface{}
	for _, addrItem := range addr {
		addrRule = append(addrRule, addrItem)
	}

	logs, sub, err := _L2Staking.contract.WatchLogs(opts, "StakerAdded", addrRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(L2StakingStakerAdded)
				if err := _L2Staking.contract.UnpackLog(event, "StakerAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStakerAdded is a log parse operation binding the contract event 0x058ecb29c230cd5df283c89e996187ed521393fe4546cd1b097921c4b2de293d.
//
// Solidity: event StakerAdded(address indexed addr, bytes32 tmKey, bytes blsKey)
func (_L2Staking *L2StakingFilterer) ParseStakerAdded(log types.Log) (*L2StakingStakerAdded, error) {
	event := new(L2StakingStakerAdded)
	if err := _L2Staking.contract.UnpackLog(event, "StakerAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// L2StakingStakerRemovedIterator is returned from FilterStakerRemoved and is used to iterate over the raw logs and unpacked data for StakerRemoved events raised by the L2Staking contract.
type L2StakingStakerRemovedIterator struct {
	Event *L2StakingStakerRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *L2StakingStakerRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(L2StakingStakerRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(L2StakingStakerRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *L2StakingStakerRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *L2StakingStakerRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// L2StakingStakerRemoved represents a StakerRemoved event raised by the L2Staking contract.
type L2StakingStakerRemoved struct {
	StakerAddrs []common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterStakerRemoved is a free log retrieval operation binding the contract event 0x3511bf213f9290ba907e91e12a43e8471251e1879580ae5509292a3514c23f61.
//
// Solidity: event StakerRemoved(address[] stakerAddrs)
func (_L2Staking *L2StakingFilterer) FilterStakerRemoved(opts *bind.FilterOpts) (*L2StakingStakerRemovedIterator, error) {

	logs, sub, err := _L2Staking.contract.FilterLogs(opts, "StakerRemoved")
	if err != nil {
		return nil, err
	}
	return &L2StakingStakerRemovedIterator{contract: _L2Staking.contract, event: "StakerRemoved", logs: logs, sub: sub}, nil
}

// WatchStakerRemoved is a free log subscription operation binding the contract event 0x3511bf213f9290ba907e91e12a43e8471251e1879580ae5509292a3514c23f61.
//
// Solidity: event StakerRemoved(address[] stakerAddrs)
func (_L2Staking *L2StakingFilterer) WatchStakerRemoved(opts *bind.WatchOpts, sink chan<- *L2StakingStakerRemoved) (event.Subscription, error) {

	logs, sub, err := _L2Staking.contract.WatchLogs(opts, "StakerRemoved")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(L2StakingStakerRemoved)
				if err := _L2Staking.contract.UnpackLog(event, "StakerRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStakerRemoved is a log parse operation binding the contract event 0x3511bf213f9290ba907e91e12a43e8471251e1879580ae5509292a3514c23f61.
//
// Solidity: event StakerRemoved(address[] stakerAddrs)
func (_L2Staking *L2StakingFilterer) ParseStakerRemoved(log types.Log) (*L2StakingStakerRemoved, error) {
	event := new(L2StakingStakerRemoved)
	if err := _L2Staking.contract.UnpackLog(event, "StakerRemoved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// L2StakingUndelegatedIterator is returned from FilterUndelegated and is used to iterate over the raw logs and unpacked data for Undelegated events raised by the L2Staking contract.
type L2StakingUndelegatedIterator struct {
	Event *L2StakingUndelegated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *L2StakingUndelegatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(L2StakingUndelegated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(L2StakingUndelegated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *L2StakingUndelegatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *L2StakingUndelegatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// L2StakingUndelegated represents a Undelegated event raised by the L2Staking contract.
type L2StakingUndelegated struct {
	Delegatee      common.Address
	Delegator      common.Address
	Amount         *big.Int
	EffectiveEpoch *big.Int
	UblockEpoch    *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUndelegated is a free log retrieval operation binding the contract event 0x92039db29d8c0a1aa1433fe109c69488c8c5e51b23c9de7d303ad80c1fef778c.
//
// Solidity: event Undelegated(address indexed delegatee, address indexed delegator, uint256 amount, uint256 effectiveEpoch, uint256 ublockEpoch)
func (_L2Staking *L2StakingFilterer) FilterUndelegated(opts *bind.FilterOpts, delegatee []common.Address, delegator []common.Address) (*L2StakingUndelegatedIterator, error) {

	var delegateeRule []interface{}
	for _, delegateeItem := range delegatee {
		delegateeRule = append(delegateeRule, delegateeItem)
	}
	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}

	logs, sub, err := _L2Staking.contract.FilterLogs(opts, "Undelegated", delegateeRule, delegatorRule)
	if err != nil {
		return nil, err
	}
	return &L2StakingUndelegatedIterator{contract: _L2Staking.contract, event: "Undelegated", logs: logs, sub: sub}, nil
}

// WatchUndelegated is a free log subscription operation binding the contract event 0x92039db29d8c0a1aa1433fe109c69488c8c5e51b23c9de7d303ad80c1fef778c.
//
// Solidity: event Undelegated(address indexed delegatee, address indexed delegator, uint256 amount, uint256 effectiveEpoch, uint256 ublockEpoch)
func (_L2Staking *L2StakingFilterer) WatchUndelegated(opts *bind.WatchOpts, sink chan<- *L2StakingUndelegated, delegatee []common.Address, delegator []common.Address) (event.Subscription, error) {

	var delegateeRule []interface{}
	for _, delegateeItem := range delegatee {
		delegateeRule = append(delegateeRule, delegateeItem)
	}
	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}

	logs, sub, err := _L2Staking.contract.WatchLogs(opts, "Undelegated", delegateeRule, delegatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(L2StakingUndelegated)
				if err := _L2Staking.contract.UnpackLog(event, "Undelegated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUndelegated is a log parse operation binding the contract event 0x92039db29d8c0a1aa1433fe109c69488c8c5e51b23c9de7d303ad80c1fef778c.
//
// Solidity: event Undelegated(address indexed delegatee, address indexed delegator, uint256 amount, uint256 effectiveEpoch, uint256 ublockEpoch)
func (_L2Staking *L2StakingFilterer) ParseUndelegated(log types.Log) (*L2StakingUndelegated, error) {
	event := new(L2StakingUndelegated)
	if err := _L2Staking.contract.UnpackLog(event, "Undelegated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// L2StakingUndelegationClaimedIterator is returned from FilterUndelegationClaimed and is used to iterate over the raw logs and unpacked data for UndelegationClaimed events raised by the L2Staking contract.
type L2StakingUndelegationClaimedIterator struct {
	Event *L2StakingUndelegationClaimed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *L2StakingUndelegationClaimedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(L2StakingUndelegationClaimed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(L2StakingUndelegationClaimed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *L2StakingUndelegationClaimedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *L2StakingUndelegationClaimedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// L2StakingUndelegationClaimed represents a UndelegationClaimed event raised by the L2Staking contract.
type L2StakingUndelegationClaimed struct {
	Delegator common.Address
	Amount    *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterUndelegationClaimed is a free log retrieval operation binding the contract event 0xcc3089abc79631b3c0c81414a72e237c08559073a970cf474e36ae965e382fb3.
//
// Solidity: event UndelegationClaimed(address indexed delegator, uint256 amount)
func (_L2Staking *L2StakingFilterer) FilterUndelegationClaimed(opts *bind.FilterOpts, delegator []common.Address) (*L2StakingUndelegationClaimedIterator, error) {

	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}

	logs, sub, err := _L2Staking.contract.FilterLogs(opts, "UndelegationClaimed", delegatorRule)
	if err != nil {
		return nil, err
	}
	return &L2StakingUndelegationClaimedIterator{contract: _L2Staking.contract, event: "UndelegationClaimed", logs: logs, sub: sub}, nil
}

// WatchUndelegationClaimed is a free log subscription operation binding the contract event 0xcc3089abc79631b3c0c81414a72e237c08559073a970cf474e36ae965e382fb3.
//
// Solidity: event UndelegationClaimed(address indexed delegator, uint256 amount)
func (_L2Staking *L2StakingFilterer) WatchUndelegationClaimed(opts *bind.WatchOpts, sink chan<- *L2StakingUndelegationClaimed, delegator []common.Address) (event.Subscription, error) {

	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}

	logs, sub, err := _L2Staking.contract.WatchLogs(opts, "UndelegationClaimed", delegatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(L2StakingUndelegationClaimed)
				if err := _L2Staking.contract.UnpackLog(event, "UndelegationClaimed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUndelegationClaimed is a log parse operation binding the contract event 0xcc3089abc79631b3c0c81414a72e237c08559073a970cf474e36ae965e382fb3.
//
// Solidity: event UndelegationClaimed(address indexed delegator, uint256 amount)
func (_L2Staking *L2StakingFilterer) ParseUndelegationClaimed(log types.Log) (*L2StakingUndelegationClaimed, error) {
	event := new(L2StakingUndelegationClaimed)
	if err := _L2Staking.contract.UnpackLog(event, "UndelegationClaimed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
